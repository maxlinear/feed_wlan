From 49bc1b2cda745957bff19d448c3c1673a7943b8e Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Mon, 23 Jan 2023 16:19:20 +0100
Subject: [PATCH] WLANRTSYS-48299: RM capabilities in opensource hostapd: only
 RRM capabilities

---
 hostapd/mxl_config.c         | 28 ++++++++++++++++++++++++++++
 src/ap/gas_serv.c            |  5 +++++
 src/ap/mxl_config.h          |  2 ++
 src/common/ieee802_11_defs.h |  3 +++
 4 files changed, 38 insertions(+)

diff --git a/hostapd/mxl_config.c b/hostapd/mxl_config.c
index d0a0862d6..46579e1f7 100644
--- a/hostapd/mxl_config.c
+++ b/hostapd/mxl_config.c
@@ -170,6 +170,29 @@ int mxl_hostapd_config_fill (struct hostapd_config *conf,
 			return 0;
 		}
 		mxl_conf->event_cache_interval = val;
+	} else if (os_strcmp(buf, "rrm_beacon_report_passive") == 0) {
+		if (atoi(pos))
+			bss->radio_measurements[0] |= WLAN_RRM_CAPS_BEACON_REPORT_PASSIVE;
+	} else if (os_strcmp(buf, "rrm_beacon_report_active") == 0) {
+		if (atoi(pos))
+			bss->radio_measurements[0] |= WLAN_RRM_CAPS_BEACON_REPORT_ACTIVE;
+	} else if (os_strcmp(buf, "rrm_beacon_report_table") == 0) {
+		if (atoi(pos))
+			bss->radio_measurements[0] |= WLAN_RRM_CAPS_BEACON_REPORT_TABLE;
+	} else if (os_strcmp(buf, "rrm_manipulate_measurement") == 0) {
+		mxl_bss_conf->rrm_manipulate_measurement = atoi(pos);
+	} else if (os_strcmp(buf, "rrm_link_measurement") == 0) {
+		if (atoi(pos))
+			bss->radio_measurements[0] |= WLAN_RRM_CAPS_LINK_MEASUREMENT;
+	} else if (os_strcmp(buf, "rrm_sta_statistics") == 0) {
+		if (atoi(pos))
+			bss->radio_measurements[1] |= WLAN_RRM_CAPS_STATISTICS_MEASUREMENT;
+	} else if (os_strcmp(buf, "rrm_channel_load") == 0) {
+		if (atoi(pos))
+			bss->radio_measurements[1] |= WLAN_RRM_CAPS_CHANNEL_LOAD;
+	} else if (os_strcmp(buf, "rrm_noise_histogram") == 0) {
+		if (atoi(pos))
+			bss->radio_measurements[1] |= WLAN_RRM_CAPS_NOISE_HISTOGRAM;
 	} else
 		return 0;
 
@@ -187,6 +210,11 @@ void mxl_hostapd_config_defaults_bss(struct hostapd_bss_config *bss)
 	mxl_bss_conf->soft_block_acl_allow_time = SOFT_BLOCK_ALLOW_TIME_DEFAULT;
 	mxl_bss_conf->soft_block_acl_on_probe_req = SOFT_BLOCK_ON_PROBE_REQ_DEFAULT;
 	mxl_bss_conf->soft_block_acl_on_auth_req = SOFT_BLOCK_ON_AUTH_REQ_STATUS_CODE_DEFAULT;
+	/* default rrm */
+	bss->radio_measurements[0] = WLAN_RRM_CAPS_LINK_MEASUREMENT | WLAN_RRM_CAPS_NEIGHBOR_REPORT |
+		WLAN_RRM_CAPS_BEACON_REPORT_PASSIVE | WLAN_RRM_CAPS_BEACON_REPORT_TABLE;
+	bss->radio_measurements[1] = WLAN_RRM_CAPS_STATISTICS_MEASUREMENT |
+		WLAN_RRM_CAPS_CHANNEL_LOAD;
 }
 
 void mxl_hostapd_config_defaults(struct hostapd_config *conf)
diff --git a/src/ap/gas_serv.c b/src/ap/gas_serv.c
index 4642e4927..9bf2473ea 100644
--- a/src/ap/gas_serv.c
+++ b/src/ap/gas_serv.c
@@ -283,7 +283,12 @@ static void anqp_add_capab_list(struct hostapd_data *hapd,
 		wpabuf_put_le16(buf, ANQP_TDLS_CAPABILITY);
 	if (get_anqp_elem(hapd, ANQP_EMERGENCY_NAI))
 		wpabuf_put_le16(buf, ANQP_EMERGENCY_NAI);
+#ifdef CONFIG_VENDOR_MXL
+	if (get_anqp_elem(hapd, ANQP_NEIGHBOR_REPORT) ||
+		(hapd->conf->radio_measurements[0] & WLAN_RRM_CAPS_NEIGHBOR_REPORT))
+#else
 	if (get_anqp_elem(hapd, ANQP_NEIGHBOR_REPORT))
+#endif /* CONFIG_VENDOR_MXL */
 		wpabuf_put_le16(buf, ANQP_NEIGHBOR_REPORT);
 #ifdef CONFIG_FILS
 	if (!dl_list_empty(&hapd->conf->fils_realms) ||
diff --git a/src/ap/mxl_config.h b/src/ap/mxl_config.h
index 4cb52f268..94417505e 100644
--- a/src/ap/mxl_config.h
+++ b/src/ap/mxl_config.h
@@ -52,6 +52,8 @@ struct mxl_hostapd_bss_config {
 	int soft_block_acl_on_auth_req;
 
 	int sDisableSoftblock;
+
+	int rrm_manipulate_measurement;
 };
 
 struct hostapd_config;
diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index 247ba283c..f27a901cc 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -773,6 +773,9 @@
 #define WLAN_RRM_CAPS_BEACON_REPORT_ACTIVE BIT(5)
 #define WLAN_RRM_CAPS_BEACON_REPORT_TABLE BIT(6)
 /* byte 2 (out of 5) */
+#define WLAN_RRM_CAPS_CHANNEL_LOAD BIT(1)
+#define WLAN_RRM_CAPS_NOISE_HISTOGRAM BIT(2)
+#define WLAN_RRM_CAPS_STATISTICS_MEASUREMENT BIT(3)
 #define WLAN_RRM_CAPS_LCI_MEASUREMENT BIT(4)
 /* byte 5 (out of 5) */
 #define WLAN_RRM_CAPS_FTM_RANGE_REPORT BIT(2)
-- 
2.43.0

