From 4817102ec2416264d4febaffbe0b04d52e71f5a5 Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Tue, 14 Mar 2023 15:36:34 +0100
Subject: [PATCH] WLANRTSYS-53101: 6GHz beacon alignment

- Tag: HE Operation: HE Operation Parameters: Default PE Duration
- Tag: HE Operation: 6 GHz Operation Information: Control: Regulatory Info
- Tag: HE Operation: 6 GHz Operation Information: Minimum Rate
- Tag: Extended Capabilities: (octets 8 & 9): Max Number Of MSDUs In A-MSDU
- Tag: Country Information
---
 hostapd/config_file.c        |  8 ++++++++
 hostapd/hostapd.conf         |  3 +++
 src/ap/ap_config.c           |  1 +
 src/ap/ap_config.h           | 14 ++++++++++++++
 src/ap/beacon.c              | 17 +++++++++++++++++
 src/ap/ieee802_11.c          |  7 +++++++
 src/ap/ieee802_11_he.c       |  8 +++++---
 src/ap/ieee802_11_shared.c   |  4 ++++
 src/common/ieee802_11_defs.h |  2 ++
 9 files changed, 61 insertions(+), 3 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index cbee24122..5d9488631 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4869,6 +4869,14 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 			wpa_printf(MSG_ERROR, "Num of BTWT schedules exceeds the limit %d", num_sched);
 		}
 #endif
+	} else if (os_strcmp(buf, "ext_cap_max_num_msdus_in_amsdu") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_RANGE(val, EXT_CAP_MAX_NUM_MSDU_IN_AMSDU_MIN, EXT_CAP_MAX_NUM_MSDU_IN_AMSDU_MAX)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid ext_cap_max_num_msdus_in_amsdu %d (expected [%d...%d])",
+					   line, val, EXT_CAP_MAX_NUM_MSDU_IN_AMSDU_MIN, EXT_CAP_MAX_NUM_MSDU_IN_AMSDU_MAX);
+			return 1;
+		}
+		conf->ext_cap_max_num_msdus_in_amsdu = (u8)val;
 #ifdef CONFIG_VENDOR_MXL
 	} else if (mxl_hostapd_config_fill(conf, bss, buf, pos, line)) {
 #endif /* CONFIG_VENDOR_MXL */
diff --git a/hostapd/hostapd.conf b/hostapd/hostapd.conf
index f02cd9274..be1ea038d 100644
--- a/hostapd/hostapd.conf
+++ b/hostapd/hostapd.conf
@@ -818,6 +818,9 @@ wmm_ac_vo_acm=0
 # disable_11ax: Boolean (0/1) to disable HE for a specific BSS
 #disable_11ax=0
 
+# Require stations to support HE PHY (reject association if they do not)
+#require_he=1
+
 #he_su_beamformer: HE single user beamformer support
 # 0 = not supported (default)
 # 1 = supported
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index d1a6ce246..a5dddbe86 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -310,6 +310,7 @@ struct hostapd_config * hostapd_config_defaults(void)
 #endif /* CONFIG_AIRTIME_POLICY */
 
 	conf->mbssid_aid_offset = NON_MULTIBSS_AID_OFFSET;
+	conf->ext_cap_max_num_msdus_in_amsdu = EXT_CAP_MAX_NUM_MSDU_IN_AMSDU_DEFAULT;
 #ifdef CONFIG_VENDOR_MXL
 	mxl_hostapd_config_defaults(conf);
 #endif /* CONFIG_VENDOR_MXL */
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 59d3b8b52..a530dae18 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1257,6 +1257,8 @@ struct hostapd_config {
 #ifdef CONFIG_IEEE80211AX
 	enum bcast_twt_wake_duration_unit btwt_wake_dur_unit;
 #endif
+	/* Extended Capabilities: Max Number of MSDUs in A-MSDU */
+	u8 ext_cap_max_num_msdus_in_amsdu;
 #ifdef CONFIG_VENDOR_MXL
 	struct mxl_hostapd_config mxl_conf;
 #endif /* CONFIG_VENDOR_MXL */
@@ -1396,4 +1398,16 @@ void hostapd_remove_acl_mac(struct mac_acl_entry **acl, int *num,
 #define IGNORE_BROADCAST_SSID_EMPTY_SSID	1
 #define IGNORE_BROADCAST_SSID_CLEAR_SSID	2
 
+/* country 3 */
+#define GLOBAL_OPERATING_CLASSES_MIN	0x01
+#define GLOBAL_OPERATING_CLASSES_MAX	0x1f
+#define ALL_ENVIRONMENTS				0x20
+#define OUTDOOR_ENVIRONMENT_ONLY		0x4f
+#define INDOOR_ENVIRONMENT_ONLY			0x49
+#define NONCOUNTRY_ENTITY				0x58
+
+#define EXT_CAP_MAX_NUM_MSDU_IN_AMSDU_MIN		0
+#define EXT_CAP_MAX_NUM_MSDU_IN_AMSDU_MAX		3
+#define EXT_CAP_MAX_NUM_MSDU_IN_AMSDU_DEFAULT	EXT_CAP_MAX_NUM_MSDU_IN_AMSDU_MAX
+
 #endif /* HOSTAPD_CONFIG_H */
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index 0245e94a6..b5022b07e 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -218,6 +218,13 @@ static u8 * hostapd_eid_country_add(struct hostapd_data *hapd, u8 *pos,
 static u8 * hostapd_fill_subband_triplets(struct hostapd_data *hapd, u8 *pos,
 					    u8 *end)
 {
+#define COUNTRY_STRING_OCTET_3                     2
+#define TABLE_E4_GLOBAL_OP_CLASSES                 4
+#define COUNTRY_OPERATING_TRIPLET_EXT_ID           234
+#define COUNTRY_OPERATING_TRIPLET_COVERAGE_CLASS_0 0
+#define OPERATING_CLASS_6GHZ_20MHZ_BW              131
+	bool op_class_6g = false;
+
 	int i;
 	struct hostapd_hw_modes *mode;
 	struct hostapd_channel_data *start, *prev;
@@ -227,6 +234,16 @@ static u8 * hostapd_fill_subband_triplets(struct hostapd_data *hapd, u8 *pos,
 	if (mode->mode == HOSTAPD_MODE_IEEE80211A)
 		chan_spacing = 4;
 
+	op_class_6g = is_6ghz_op_class(hapd->iconf->op_class);
+	if (op_class_6g) {
+		hapd->iconf->country[COUNTRY_STRING_OCTET_3] = TABLE_E4_GLOBAL_OP_CLASSES;
+		*pos++ = COUNTRY_OPERATING_TRIPLET_EXT_ID; /* Operating Extn ID */
+		*pos++ = hapd->iconf->op_class; /* Operating class */
+		*pos++ = COUNTRY_OPERATING_TRIPLET_COVERAGE_CLASS_0; /*Coverage Class */
+ 	}
+	if (op_class_6g && hapd->iconf->op_class != OPERATING_CLASS_6GHZ_20MHZ_BW)
+		return pos;
+
 	start = prev = NULL;
 	for (i = 0; i < mode->num_channels; i++) {
 		struct hostapd_channel_data *chan = &mode->channels[i];
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 367666e76..f5fabea0f 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -3966,6 +3966,13 @@ static int __check_assoc_ies(struct hostapd_data *hapd, struct sta_info *sta,
 				return resp;
 		}
 	}
+	if (hapd->iconf->ieee80211ax && !hapd->conf->disable_11ax &&
+		hapd->iconf->require_he && !(sta->flags & WLAN_STA_HE)) {
+		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
+			       HOSTAPD_LEVEL_INFO, "Station does not support "
+			       "mandatory HE PHY - reject association");
+		return WLAN_STATUS_DENIED_HE_NOT_SUPPORTED;
+	}
 #endif /* CONFIG_IEEE80211AX */
 #ifdef CONFIG_IEEE80211BE
 	if (hapd->iconf->ieee80211be && !hapd->conf->disable_11be) {
diff --git a/src/ap/ieee802_11_he.c b/src/ap/ieee802_11_he.c
index f308a6daf..5c5216abc 100644
--- a/src/ap/ieee802_11_he.c
+++ b/src/ap/ieee802_11_he.c
@@ -170,6 +170,8 @@ u8 * hostapd_eid_he_capab(struct hostapd_data *hapd, u8 *eid,
 
 u8 * hostapd_eid_he_operation(struct hostapd_data *hapd, u8 *eid)
 {
+#define HE_6GHZ_OPER_INFO_CTRL_REG_INFO_OFFSET	3
+
 	struct ieee80211_he_operation *oper;
 	u8 *pos = eid;
 	int oper_size = 6;
@@ -223,7 +225,7 @@ u8 * hostapd_eid_he_operation(struct hostapd_data *hapd, u8 *eid)
 			hostapd_get_oper_chwidth(hapd->iconf);
 		u8 seg0 = hapd->iconf->he_oper_centr_freq_seg0_idx;
 		u8 seg1 = hostapd_get_oper_centr_freq_seg1_idx(hapd->iconf);
-		u8 control;
+		u8 control = 0;
 
 #ifdef CONFIG_IEEE80211BE
 		if (hapd->iconf->punct_bitmap) {
@@ -278,8 +280,8 @@ u8 * hostapd_eid_he_operation(struct hostapd_data *hapd, u8 *eid)
 
 		*pos++ = seg0;
 		*pos++ = seg1;
-		/* Minimum Rate */
-		*pos++ = 6; /* TODO: what should be set here? */
+		/* Minimum Rate with NSS */
+		*pos++ = HE_6G_OPER_INFO_MINIMUM_RATE_NSS;
 	}
 
 	oper->he_oper_params = host_to_le32(params);
diff --git a/src/ap/ieee802_11_shared.c b/src/ap/ieee802_11_shared.c
index 692da65b7..cf118cdd3 100644
--- a/src/ap/ieee802_11_shared.c
+++ b/src/ap/ieee802_11_shared.c
@@ -417,8 +417,12 @@ static void hostapd_ext_capab_byte(struct hostapd_data *hapd, u8 *pos, int idx,
 			*pos |= 0x01; /* Bit 48 - UTF-8 SSID */
 		break;
 	case 7: /* Bits 56-63 */
+		if (hapd->iconf->ext_cap_max_num_msdus_in_amsdu & 0x01)
+			*pos |= 0x80;	/* Bit 63 - LSB of Max Number of MSDUs in A-MSDU */
 		break;
 	case 8: /* Bits 64-71 */
+		if (hapd->iconf->ext_cap_max_num_msdus_in_amsdu & 0x02)
+			*pos |= 0x01;	/* Bit 64 - MSB of Max Number of MSDUs in A-MSDU */
 		if (hapd->conf->ftm_responder)
 			*pos |= 0x40; /* Bit 70 - FTM responder */
 		if (hapd->conf->ftm_initiator)
diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index 744b17e2c..9c55e2ab1 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -2472,6 +2472,8 @@ enum he_6ghz_ap_type {
 #define SPATIAL_REUSE_SRG_INFORMATION_PRESENT	BIT(3)
 #define SPATIAL_REUSE_HESIGA_SR_VAL15_ALLOWED	BIT(4)
 
+#define HE_6G_OPER_INFO_MINIMUM_RATE_NSS	3
+
 struct ieee80211_he_mu_edca_parameter_set {
 	u8 he_qos_info;
 	u8 he_mu_ac_be_param[3];
-- 
2.43.0

