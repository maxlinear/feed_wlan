From 1bbf5216527e105849eeb4df95e5dde6318fada1 Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Tue, 5 Dec 2023 15:19:25 +0200
Subject: [PATCH] WLANRTSYS-60767: Puma8: Implement puncturing bitmap legacy
 configuration

Signed-off-by: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
---
 src/ap/hostapd.c              |  7 +++++++
 src/ap/mxl_hostapd.c          | 26 ++++++++++++++++++++++++++
 src/ap/mxl_hostapd.h          |  1 +
 src/common/vendor_cmds_copy.h | 11 +++++++++++
 4 files changed, 45 insertions(+)

diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 327312db0..faed9c5fe 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -3231,6 +3231,9 @@ static int hostapd_setup_interface_complete_sync(struct hostapd_iface *iface,
 			goto fail;
 
 		if (!iface->set_freq_done) {
+#if defined(CONFIG_VENDOR_MXL) && defined(CONFIG_IEEE80211BE)
+			mxl_hostapd_set_eht_punct_bitmap(hapd, hapd->iconf->punct_bitmap);
+#endif /* CONFIG_VENDOR_MXL && CONFIG_IEEE80211BE */
 			if (hostapd_set_freq(hapd, hapd->iconf->hw_mode, iface->freq,
 				     hapd->iconf->channel,
 				     hapd->iconf->enable_edmg,
@@ -5435,6 +5438,10 @@ int hostapd_switch_channel(struct hostapd_data *hapd,
 		return 0;
 	}
 
+#if defined(CONFIG_VENDOR_MXL) && defined(CONFIG_IEEE80211BE)
+	mxl_hostapd_set_eht_punct_bitmap(hapd, settings->punct_bitmap);
+#endif /* CONFIG_VENDOR_MXL && CONFIG_IEEE80211BE */
+
 	/* TODO - Update secondary channel offset properly
 	 * for all other cases such as APUT tests
 	 */
diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index 5dbb46328..7db83c9ec 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -1391,6 +1391,31 @@ static void mxl_hostapd_send_debug_mode_eht_cap (struct hostapd_data *hapd)
 	MXL_DRV_VENDOR_SET(MXL_NL80211_VENDOR_SUBCMD_SET_EHT_DEBUG_DATA, &debug_data, sizeof(debug_data));
 }
 
+void mxl_hostapd_set_eht_punct_bitmap(struct hostapd_data *hapd, u16 punct_bitmap)
+{
+	struct mxl_vendor_eht_oper eht_operation_hw = { 0 };
+
+	if (!hapd->iconf->ieee80211be)
+		return;
+
+	if (MXL_DRV_VENDOR_GET(MXL_NL80211_VENDOR_SUBCMD_GET_EHT_OPERATION, NULL, 0, &eht_operation_hw, sizeof(eht_operation_hw))) {
+		wpa_printf(MSG_ERROR, "MXL_NL80211_VENDOR_SUBCMD_GET_EHT_OPERATION failed");
+		return;
+	}
+
+	eht_operation_hw.eht_disable_subch_bitmap[0] = (u8)(punct_bitmap & 0xffu);
+	eht_operation_hw.eht_disable_subch_bitmap[1] = (u8)((punct_bitmap >> 8u) & 0xffu);
+
+	if (punct_bitmap)
+		eht_operation_hw.eht_op_params |= EHT_OPER_DISABLED_SUBCHAN_BITMAP_PRESENT;
+	else
+		eht_operation_hw.eht_op_params &= ~EHT_OPER_DISABLED_SUBCHAN_BITMAP_PRESENT;
+
+	if (MXL_DRV_VENDOR_SET(MXL_NL80211_VENDOR_SUBCMD_SET_EHT_OPERATION, &eht_operation_hw, sizeof(eht_operation_hw))) {
+		wpa_printf(MSG_ERROR, "MXL_NL80211_VENDOR_SUBCMD_SET_EHT_OPERATION failed");
+	}
+}
+
 #endif /* CONFIG_IEEE80211BE */
 
 
@@ -1407,6 +1432,7 @@ int mxl_hostapd_setup_interface(struct hostapd_data *hapd)
 #endif
 #ifdef CONFIG_IEEE80211BE
 	mxl_hostapd_set_debug_mode_eht_cap(hapd);
+	mxl_hostapd_set_eht_punct_bitmap(hapd, hapd->iconf->punct_bitmap);
 #endif /* CONFIG_IEEE80211BE */
 
 	/* Add next vendor command here */
diff --git a/src/ap/mxl_hostapd.h b/src/ap/mxl_hostapd.h
index ee6d93dfc..4f3eceb58 100644
--- a/src/ap/mxl_hostapd.h
+++ b/src/ap/mxl_hostapd.h
@@ -143,6 +143,7 @@ int mxl_hostapd_setup_interface(struct hostapd_data *hapd);
 void mxl_hostapd_setup_interface_post(struct hostapd_iface *iface);
 int mxl_hostapd_setup_bss_pre(struct hostapd_data *hapd);
 int mxl_hostapd_setup_bss_post(struct hostapd_data *hapd);
+void mxl_hostapd_set_eht_punct_bitmap(struct hostapd_data *hapd, u16 punct_bitmap);
 
 void mxl_hostapd_driver_init(struct hostapd_iface *iface, struct wpa_init_params *params);
 void mxl_hostapd_setup_interface_pre(struct hostapd_iface *iface);
diff --git a/src/common/vendor_cmds_copy.h b/src/common/vendor_cmds_copy.h
index fa68b2a22..8eb48a5b2 100644
--- a/src/common/vendor_cmds_copy.h
+++ b/src/common/vendor_cmds_copy.h
@@ -652,6 +652,17 @@ struct mxl_vendor_eht_capa {
   u8 eht_ppe_thresholds[32];
 } __attribute__ ((packed));
 
+/* Data for MXL_NL80211_VENDOR_SUBCMD_SET_EHT_OPERATION and
+ *          MXL_NL80211_VENDOR_SUBCMD_GET_EHT_OPERATION vendor commands */
+struct mxl_vendor_eht_oper {
+  u8 eht_op_params;
+  u8 eht_mcs_nss_set[4];
+  u8 eht_channel_width;
+  u8 eht_ccfs0;
+  u8 eht_ccfs1;
+  u8 eht_disable_subch_bitmap[2];
+} __attribute__ ((packed));
+
 /*******************************************************************************
 *                           Event structures                                   *
 *******************************************************************************/
-- 
2.43.0

