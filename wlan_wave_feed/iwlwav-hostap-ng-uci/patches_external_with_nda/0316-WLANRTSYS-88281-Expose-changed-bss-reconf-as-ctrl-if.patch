From 5783e2233b85ba71a4bc75f91a97560ff580d0ee Mon Sep 17 00:00:00 2001
From: nchernikov <nchernikov@maxlinear.com>
Date: Wed, 12 Mar 2025 11:51:25 +0200
Subject: [PATCH] WLANRTSYS-88281 Expose changed bss reconf as ctrl iface
 command and adapt opensource reload_config to coexist with reconf

Signed-off-by: nchernikov <nchernikov@maxlinear.com>
---
 hostapd/mxl_ctrl_iface.c  | 18 +++++++++++++++++
 hostapd/mxl_hostapd_cli.c |  5 +++++
 hostapd/mxl_hostapd_cli.h |  3 +++
 src/ap/hostapd.c          | 25 ++++++++++++++++++++++-
 src/ap/mxl_hostapd.c      | 42 +++++++++++++++++++++++++++++++++++++++
 src/ap/mxl_hostapd.h      |  1 +
 6 files changed, 93 insertions(+), 1 deletion(-)

diff --git a/hostapd/mxl_ctrl_iface.c b/hostapd/mxl_ctrl_iface.c
index 337cc1917..969ea2f34 100644
--- a/hostapd/mxl_ctrl_iface.c
+++ b/hostapd/mxl_ctrl_iface.c
@@ -3071,6 +3071,21 @@ static int mxl_hostapd_ctrl_iface_set_neighbor_psd(struct hostapd_data *hapd, ch
 	return 0;
 }
 
+static int mxl_hostapd_ctrl_iface_bss_reconf(struct hostapd_iface *iface)
+{
+	if (iface->state == HAPD_IFACE_UNINITIALIZED) {
+		wpa_printf(MSG_ERROR, "Unable to do BSS Reconf - Interface is not initialized");
+		return -1;
+	}
+
+	if (mxl_hostapd_reload_config(iface)) {
+		wpa_printf(MSG_ERROR, "BSS Reconf command failed");
+		return -1;
+	}
+
+	return 0;
+}
+
 int mxl_hostapd_ctrl_iface_update_mbss_beacon(struct hostapd_data *hapd)
 {
 	struct hostapd_data *bss;
@@ -3311,6 +3326,9 @@ int mxl_hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "ASSOCRESP_ELEMENTS ", sizeof("ASSOCRESP_ELEMENTS ") - 1) == 0) {
 		if (mxl_hostapd_ctrl_iface_set_elements(hapd, buf + sizeof("ASSOCRESP_ELEMENTS ") - 1, ASSOCRESP_ELEM_TYPE))
 			*reply_len = -1;
+	} else if (os_strncmp(buf, "BSS_RECONF", 10) == 0) {
+		if (mxl_hostapd_ctrl_iface_bss_reconf(hapd->iface))
+			*reply_len = -1;
 	} else {
 		return 0;
 	}
diff --git a/hostapd/mxl_hostapd_cli.c b/hostapd/mxl_hostapd_cli.c
index 47873c417..bbf1098ff 100644
--- a/hostapd/mxl_hostapd_cli.c
+++ b/hostapd/mxl_hostapd_cli.c
@@ -554,3 +554,8 @@ int mxl_hostapd_cli_cmd_get_assocresp_elements(struct wpa_ctrl *ctrl, int argc,
 {
 	return _hostapd_cli_cmd_get_elements(ctrl, argc, argv, "assocresp", "ASSOCRESP");
 }
+
+int mxl_hostapd_cli_cmd_bss_reconf(struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	return mxl_wpa_ctrl_command(ctrl, "BSS_RECONF");
+}
diff --git a/hostapd/mxl_hostapd_cli.h b/hostapd/mxl_hostapd_cli.h
index 71732a02f..7cfe7e97d 100644
--- a/hostapd/mxl_hostapd_cli.h
+++ b/hostapd/mxl_hostapd_cli.h
@@ -105,6 +105,8 @@ int mxl_wpa_ctrl_command(struct wpa_ctrl *ctrl, const char *cmd);
 	  MXL_CLI_BSS_NAME_PREFIX "[assocresp_elements] = set assocresp elements" }, \
 	{ "get_assocresp_elements", mxl_hostapd_cli_cmd_get_assocresp_elements, NULL, \
 	  MXL_CLI_BSS_NAME_PREFIX "= get assocresp elements" }, \
+	{ "bss_reconf", mxl_hostapd_cli_cmd_bss_reconf, NULL, \
+	  " = do reconf on all changed bss in radio"}, \
 
 #ifdef CONFIG_ACS
 #define MXL_CLI_COMMANDS_ACS \
@@ -184,5 +186,6 @@ int mxl_hostapd_cli_cmd_set_authresp_elements(struct wpa_ctrl *ctrl, int argc, c
 int mxl_hostapd_cli_cmd_get_authresp_elements(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_set_assocresp_elements(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_get_assocresp_elements(struct wpa_ctrl *ctrl, int argc, char *argv[]);
+int mxl_hostapd_cli_cmd_bss_reconf(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 
 #endif /* MXL_HOSTAPD_CLI_H */
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 31f858a76..179038833 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -86,7 +86,10 @@ static void hostapd_interface_setup_failure_handler(void *eloop_ctx,
 static void hostapd_switch_color_timeout_handler(void *eloop_data,
 						 void *user_ctx);
 #endif /* CONFIG_IEEE80211AX */
-
+#ifdef CONFIG_VENDOR_MXL
+static int mxl_hostapd_iface_conf_changed(struct hostapd_config *newconf,
+				      struct hostapd_config *oldconf);
+#endif /* CONFIG_VENDOR_MXL */
 
 int hostapd_for_each_interface(struct hapd_interfaces *interfaces,
 			       int (*cb)(struct hostapd_iface *iface,
@@ -250,6 +253,13 @@ static void hostapd_clear_old(struct hostapd_iface *iface)
 static int hostapd_iface_conf_changed(struct hostapd_config *newconf,
 				      struct hostapd_config *oldconf)
 {
+#ifdef CONFIG_VENDOR_MXL
+	/*	bss order in hostapd context may have changed in repsect to conf file
+		due to a possible previous reconf - use mxl function instead
+	*/
+	return mxl_hostapd_iface_conf_changed(newconf, oldconf);
+#endif /* CONFIG_VENDOR_MXL */
+
 	size_t i;
 
 	if (newconf->num_bss != oldconf->num_bss)
@@ -326,6 +336,19 @@ int hostapd_reload_config(struct hostapd_iface *iface)
 				   "Failed to enable interface on config reload");
 		return res;
 	}
+
+#ifdef CONFIG_VENDOR_MXL
+	/*  If we got here it means both existing bss and new conf has the same bss names and number of bss
+		So either they have same ordering or we need to reorder bss list in newconf due to iface bss list
+		previously being reoredered by mxl reconf i.e bss[x] != newconf->bss[x]
+	*/
+	if (mxl_hostapd_check_and_reorder_bss_conf(iface, newconf)) {
+		wpa_printf(MSG_ERROR,
+				   "Failed to check and reorder bss config");
+		return -1;
+	}
+#endif /* CONFIG_VENDOR_MXL */
+
 	iface->conf = newconf;
 
 #ifdef CONFIG_VENDOR_MXL
diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index 688937a10..868cb1a1e 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -3438,3 +3438,45 @@ void mxl_hostapd_check_limit_reached(struct hostapd_data *hapd, const u8 *sta_ad
 		}
 	}
 }
+
+int mxl_hostapd_check_and_reorder_bss_conf(struct hostapd_iface *iface, struct hostapd_config *newconf)
+{
+	struct hostapd_data *hapd;
+	struct hostapd_bss_config *temp_bss;
+	size_t i, j;
+	bool same_bss, reordered = false;
+
+	if (!iface)
+		return -1;
+
+	if (iface->num_bss != newconf->num_bss) {
+		wpa_printf(MSG_ERROR, "%s: Iface num of bss mismatch with newconf", __func__);
+		return -1;
+	}
+
+	/*	Reorder bss list in new read config to match the bss list of the iface
+		Either iface bss list is same as read config or not due to previous reconf
+		So, use iface bss list as refernce and reorder the newconf bss list to match it
+	*/
+	for (i = 0; i < iface->num_bss; i++) {
+		hapd = iface->bss[i];
+		same_bss = os_strcmp(hapd->conf->iface, newconf->bss[i]->iface) == 0;
+		if (!same_bss) {
+			for (j = 0; j < iface->num_bss; j++) {
+				if (os_strcmp(hapd->conf->iface, newconf->bss[j]->iface) == 0) {
+					temp_bss = newconf->bss[i];
+					newconf->bss[i] = newconf->bss[j];
+					newconf->bss[j] = temp_bss;
+					reordered = true;
+					break;
+				}
+			}
+		}
+	}
+
+	/* newconf bss list was reordered - assign new last bss */
+	if (reordered)
+		newconf->last_bss = newconf->bss[iface->num_bss - 1];
+
+	return 0;
+}
diff --git a/src/ap/mxl_hostapd.h b/src/ap/mxl_hostapd.h
index a121ea37e..fd891b530 100644
--- a/src/ap/mxl_hostapd.h
+++ b/src/ap/mxl_hostapd.h
@@ -258,4 +258,5 @@ bool mxl_hostapd_prune_sta(struct hostapd_data *hapd, const u8 *addr, struct sta
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
 void mxl_parse_rnr(struct ieee802_11_elems *elems, struct dl_list *rnr_scan_6g_ap_info);
 void mxl_hostapd_check_limit_reached(struct hostapd_data *hapd, const u8 *sta_addr, u16 *resp);
+int mxl_hostapd_check_and_reorder_bss_conf(struct hostapd_iface *iface, struct hostapd_config *newconf);
 #endif /* MXL_HOSTAPD_H */
-- 
2.43.0

