From 5a671637f7f3d3b1f6165e1a978cfed2167d8b24 Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Wed, 17 May 2023 15:52:54 +0200
Subject: [PATCH] WLANRTSYS-55314: Align HT capabilities

- WLANRTSYS-47651: MXL proprietary NL80211_BAND_ATTR_HT_TX_BF_CAPA
---
 hostapd/config_file.c             | 190 ++++++++++++++++++++++++++++++
 src/ap/ap_config.c                |   2 +
 src/ap/ap_config.h                |   2 +
 src/ap/hostapd.c                  |   9 ++
 src/ap/hw_features.c              |  82 +++++++++++++
 src/ap/ieee802_11_ht.c            |   4 +-
 src/ap/mxl_hostapd.c              |  24 ++++
 src/ap/mxl_hostapd.h              |   4 +-
 src/common/ieee802_11_defs.h      |  13 +-
 src/common/vendor_cmds_copy.h     |   6 +
 src/drivers/driver.h              |   5 +
 src/drivers/driver_nl80211_capa.c |  53 ++++++++-
 12 files changed, 387 insertions(+), 7 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 70b5d62b3..c462fb4d3 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -1081,6 +1081,188 @@ static int hostapd_config_ht_capab(struct hostapd_config *conf,
 	return 0;
 }
 
+static int hostapd_config_ht_tx_bf_capab(struct hostapd_config *conf,
+				   const char *capab)
+{
+	if (conf->ht_tx_bf_capab_from_hw) {
+		wpa_printf(MSG_DEBUG, "Use HT TX_BF Capability from HW\n");
+		return 0;
+	}
+
+	if (os_strstr(capab, "[IMPL-TXBF-RX]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_IMPLICIT_TXBF_RX_CAP;
+	if (os_strstr(capab, "[RX-STAG-SND]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_RX_STAGGERED_SOUNDING_CAP;
+	if (os_strstr(capab, "[TX-STAG-SND]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_TX_STAGGERED_SOUNDING_CAP;
+	if (os_strstr(capab, "[RX-NDP]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_RX_NDP_CAP;
+	if (os_strstr(capab, "[TX-NDP]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_TX_NDP_CAP;
+	if (os_strstr(capab, "[IMPL-TXBF]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_IMPLICIT_TX_BF_CAP;
+
+	if (os_strstr(capab, "[CALIB-RESP]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CALIBRATION_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_CALIB_OFFSET);
+	}
+	if (os_strstr(capab, "[CALIB-RESP+REQ]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CALIBRATION_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_CALIB_OFFSET);
+	}
+
+	if (os_strstr(capab, "[EXPL-CSI-TXBF]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_EXPLICIT_CSI_TXBF_CAP;
+	if (os_strstr(capab, "[EXPL-NONCOMPR-STEER]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_EXPLICIT_NONCOMPR_STEERING_CAP;
+	if (os_strstr(capab, "[EXPL-COMPR-STEER]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_EXPLICIT_COMPR_STEERING_CAP;
+
+
+	if (os_strstr(capab, "[EXPL-TXBF-CSI-FBACK-DELAYED]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-TXBF-CSI-FBACK-IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-TXBF-CSI-FBACK-DELAYED+IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_OFFSET);
+	}
+
+
+	if (os_strstr(capab, "[EXPL-NONCOMPR-FB-FBACK-DELAYED]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-NONCOMPR-FB-FBACK-IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-NONCOMPR-FB-FBACK-DELAYED+IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+
+	if (os_strstr(capab, "[EXPL-COMPR-FB-FBACK-DELAYED]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-COMPR-FB-FBACK-IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-COMPR-FB-FBACK-DELAYED+IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+
+	if (os_strstr(capab, "[MIN-GROUP-12]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_MINIMAL_GROUPING_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_MINIMAL_GROUPING_OFFSET);
+	}
+	if (os_strstr(capab, "[MIN-GROUP-14]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_MINIMAL_GROUPING_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_MINIMAL_GROUPING_OFFSET);
+	}
+	if (os_strstr(capab, "[MIN-GROUP-124]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_MINIMAL_GROUPING_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_MINIMAL_GROUPING_OFFSET);
+	}
+
+
+	if (os_strstr(capab, "[CSI-BF-ANT-1]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(0 << TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-BF-ANT-2]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-BF-ANT-3]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-BF-ANT-4]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_OFFSET);
+	}
+
+
+	if (os_strstr(capab, "[NONCOMPS-BF-ANT-1]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(0 << TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[NONCOMPS-BF-ANT-2]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[NONCOMPS-BF-ANT-3]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[NONCOMPS-BF-ANT-4]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+
+	if (os_strstr(capab, "[COMPS-BF-ANT-1]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(0 << TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[COMPS-BF-ANT-2]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[COMPS-BF-ANT-3]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[COMPS-BF-ANT-4]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+
+
+	if (os_strstr(capab, "[CSI-MAX-ROWS-BF-1]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK;
+		conf->ht_tx_bf_capab |= (u32)(0 << TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-MAX-ROWS-BF-2]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-MAX-ROWS-BF-3]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-MAX-ROWS-BF-4]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_OFFSET);
+	}
+
+
+	if (os_strstr(capab, "[CHE-SPACE-TIME-STR-1]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK;
+		conf->ht_tx_bf_capab |= (u32)(0 << TX_BF_CAP_CHANNEL_ESTIMATION_CAP_OFFSET);
+	}
+	if (os_strstr(capab, "[CHE-SPACE-TIME-STR-2]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_CHANNEL_ESTIMATION_CAP_OFFSET);
+	}
+	if (os_strstr(capab, "[CHE-SPACE-TIME-STR-3]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_CHANNEL_ESTIMATION_CAP_OFFSET);
+	}
+	if (os_strstr(capab, "[CHE-SPACE-TIME-STR-4]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_CHANNEL_ESTIMATION_CAP_OFFSET);
+	}
+
+	return 0;
+}
 
 #ifdef CONFIG_IEEE80211AC
 static int hostapd_config_vht_capab(struct hostapd_config *conf,
@@ -3471,6 +3653,14 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 				   line);
 			return 1;
 		}
+	} else if (os_strcmp(buf, "ht_tx_bf_capab_from_hw") == 0) {
+		conf->ht_tx_bf_capab_from_hw = atoi(pos);
+	} else if (os_strcmp(buf, "ht_tx_bf_capab") == 0) {
+		if (hostapd_config_ht_tx_bf_capab(conf, pos) < 0) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid ht_tx_bf_capab",
+				   line);
+			return 1;
+		}
 	} else if (os_strcmp(buf, "require_ht") == 0) {
 		conf->require_ht = atoi(pos);
 	} else if (os_strcmp(buf, "obss_interval") == 0) {
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 4ed508aee..37b3b66fa 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -262,6 +262,8 @@ struct hostapd_config * hostapd_config_defaults(void)
 	conf->tx_queue[3] = txq_bk;
 
 	conf->ht_capab = HT_CAP_INFO_SMPS_DISABLED;
+	conf->ht_tx_bf_capab = 0;
+	conf->ht_tx_bf_capab_from_hw = 1;
 
 	conf->ap_table_max_size = 255;
 	conf->ap_table_expiration_time = 60;
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 1b4929234..66b0ab3f5 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1161,6 +1161,8 @@ struct hostapd_config {
 
 	int ht_op_mode_fixed;
 	u16 ht_capab;
+	int ht_tx_bf_capab_from_hw;
+	u32 ht_tx_bf_capab;
 	int ieee80211n;
 	int secondary_channel;
 	int no_pri_sec_switch;
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 127ebf783..503e76fc1 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -307,6 +307,14 @@ int hostapd_reload_config(struct hostapd_iface *iface)
 	}
 	iface->conf = newconf;
 
+#ifdef CONFIG_VENDOR_MXL
+	if (mxl_hostapd_prepare_reload_config(iface) < 0) {
+		wpa_printf(MSG_ERROR,
+				   "Failed to prepare config for reload");
+		return -1;
+	}
+#endif /* CONFIG_VENDOR_MXL */
+
 	for (j = 0; j < iface->num_bss; j++) {
 		hapd = iface->bss[j];
 		if (!hapd->conf->config_id || !newconf->bss[j]->config_id ||
@@ -320,6 +328,7 @@ int hostapd_reload_config(struct hostapd_iface *iface)
 		hapd->iconf->ieee80211n = oldconf->ieee80211n;
 		hapd->iconf->ieee80211ac = oldconf->ieee80211ac;
 		hapd->iconf->ht_capab = oldconf->ht_capab;
+		hapd->iconf->ht_tx_bf_capab = oldconf->ht_tx_bf_capab;
 		hapd->iconf->vht_capab = oldconf->vht_capab;
 		hostapd_set_oper_chwidth(hapd->iconf,
 					 hostapd_get_oper_chwidth(oldconf));
diff --git a/src/ap/hw_features.c b/src/ap/hw_features.c
index 17c8ff1fa..21039486c 100644
--- a/src/ap/hw_features.c
+++ b/src/ap/hw_features.c
@@ -689,6 +689,86 @@ static int ieee80211n_supported_ht_capab(struct hostapd_iface *iface)
 	return 1;
 }
 
+static u32 get_ht_cap(u32 val, u32 mask)
+{
+	u32 res = 0;
+
+	for (; mask; mask >>= 1) {
+		if (mask & 1)
+			break;
+		res++;
+	}
+
+	return (u32) ((mask & val) >> res);
+}
+
+static int ieee80211n_tx_bf_cap_check_max(u32 hw, u32 conf, u32 cap, char *cap_info)
+{
+	if (!(get_ht_cap(conf, cap) <= get_ht_cap(hw, cap)))
+		wpa_printf(MSG_WARNING, "Driver does not support configured HT Cap: %s", cap_info);
+
+	return 1;
+}
+
+static int ieee80211n_tx_bf_cap_check(u32 hw, u32 conf, u32 cap, char *cap_info)
+{
+	if ((conf & cap) && !(hw & cap))
+		wpa_printf(MSG_WARNING, "Driver does not support configured HT Cap: %s", cap_info);
+
+	return 1;
+}
+
+static int ieee80211n_supported_ht_tx_bf_capab(struct hostapd_iface *iface)
+{
+
+#define TXBF_CAP_CHECK(cap, name) \
+	do { if (!ieee80211n_tx_bf_cap_check(hw, conf, cap, name)) return 0; } while (0)
+
+#define TXBF_CAP_CHECK_MAX(cap, name) \
+	do { if (!ieee80211n_tx_bf_cap_check_max(hw, conf, cap, name)) return 0; } while (0)
+
+	u32 hw = iface->current_mode->ht_tx_bf_capab;
+	u32 conf = iface->conf->ht_tx_bf_capab;
+	wpa_printf(MSG_DEBUG, "hw txbf capab: 0x%x, conf txbf capab: 0x%x", hw, conf);
+
+	if (iface->conf->ht_tx_bf_capab_from_hw) {
+		iface->conf->ht_tx_bf_capab = hw;
+		wpa_printf(MSG_DEBUG, "Use HW HT TX_BF Capability\n");
+		return 1;
+	}
+
+	TXBF_CAP_CHECK(TX_BF_CAP_IMPLICIT_TXBF_RX_CAP, 					"[IMPL-TXBF-RX]");
+	TXBF_CAP_CHECK(TX_BF_CAP_RX_STAGGERED_SOUNDING_CAP, 			"[RX-STAG-SND]");
+	TXBF_CAP_CHECK(TX_BF_CAP_TX_STAGGERED_SOUNDING_CAP, 			"[TX-STAG-SND]");
+	TXBF_CAP_CHECK(TX_BF_CAP_RX_NDP_CAP,							"[RX-NDP]");
+	TXBF_CAP_CHECK(TX_BF_CAP_TX_NDP_CAP,							"[TX-NDP]");
+	TXBF_CAP_CHECK(TX_BF_CAP_IMPLICIT_TX_BF_CAP,					"[IMPL-TXBF]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_CALIBRATION_MASK,					"[CALIB-*]");
+	TXBF_CAP_CHECK(TX_BF_CAP_EXPLICIT_CSI_TXBF_CAP,					"[EXPL-CSI-TXBF]");
+	TXBF_CAP_CHECK(TX_BF_CAP_EXPLICIT_NONCOMPR_STEERING_CAP,		"[EXPL-NONCOMPR-STEER]");
+	TXBF_CAP_CHECK(TX_BF_CAP_EXPLICIT_COMPR_STEERING_CAP,			"[EXPL-COMPR-STEER]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK,	"[EXPL-TXBF-CSI-FBACK-*]");
+
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_MASK,	"[EXPL-NONCOMPR-FB-FBACK-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_MASK, "[EXPL-COMPR-FB-FBACK-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_MINIMAL_GROUPING_MASK,								"[MIN-GROUP-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK,						"[CSI-BF-ANT-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK,	"[NONCOMPS-BF-ANT-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK,	"[COMPS-BF-ANT-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK,			"[CSI-MAX-ROWS-BF-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK,						"[CHE-SPACE-TIME-STR-*]");
+	return 1;
+
+#undef TXBF_CAP_CHECK
+#undef TXBF_CAP_CHECK_MAX
+}
+
+#ifdef CONFIG_VENDOR_MXL
+int mxl_ieee80211n_supported_ht_tx_bf_capab(struct hostapd_iface *iface)
+{
+	return ieee80211n_supported_ht_tx_bf_capab(iface);
+}
+#endif /* CONFIG_VENDOR_MXL */
 
 #ifdef CONFIG_IEEE80211AC
 static int ieee80211ac_supported_vht_capab(struct hostapd_iface *iface)
@@ -750,6 +830,8 @@ int hostapd_check_ht_capab(struct hostapd_iface *iface)
 
 	if (!ieee80211n_supported_ht_capab(iface))
 		return -1;
+	if (!ieee80211n_supported_ht_tx_bf_capab(iface))
+		return -1;
 #ifdef CONFIG_IEEE80211AX
 	if (iface->conf->ieee80211ax &&
 	    !ieee80211ax_supported_he_capab(iface))
diff --git a/src/ap/ieee802_11_ht.c b/src/ap/ieee802_11_ht.c
index 25007d7ef..6739b7d5f 100644
--- a/src/ap/ieee802_11_ht.c
+++ b/src/ap/ieee802_11_ht.c
@@ -42,9 +42,9 @@ u8 * hostapd_eid_ht_capabilities(struct hostapd_data *hapd, u8 *eid)
 	cap->a_mpdu_params = hapd->iface->current_mode->a_mpdu_params;
 	os_memcpy(cap->supported_mcs_set, hapd->iface->current_mode->mcs_set,
 		  16);
-
+	/* tx_bf_capability_info */
+	cap->tx_bf_capability_info = host_to_le32(hapd->iconf->ht_tx_bf_capab);
 	/* TODO: ht_extended_capabilities (now fully disabled) */
-	/* TODO: tx_bf_capability_info (now fully disabled) */
 	/* TODO: asel_capabilities (now fully disabled) */
 
  	pos += sizeof(*cap);
diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index a5b123b56..c390908cd 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -454,6 +454,30 @@ enum oper_chan_width mxl_get_oper_width(int width)
 	return -1; /* should never happen */
 }
 
+static int mxl_hostapd_check_ht_tx_bf_capab(struct hostapd_iface *iface)
+{
+	if (is_6ghz_freq(iface->freq) || !iface->conf->ieee80211n)
+		return 0;
+
+	if (!mxl_ieee80211n_supported_ht_tx_bf_capab(iface))
+		return -1;
+
+	return 0;
+}
+
+int mxl_hostapd_prepare_reload_config(struct hostapd_iface *iface) {
+	/* Add all MxL specific preprations before config reload - SIGHUP */
+
+	/* Re-apply bf tx capabs to not lose value due to config re-read */
+	if (mxl_hostapd_check_ht_tx_bf_capab(iface) < 0) {
+		wpa_printf(MSG_ERROR,
+				   "Failed to check ht capabs on config reload");
+		return -1;
+	}
+
+	return 0;
+}
+
 void mxl_hostapd_cleanup_iface(struct hostapd_iface *iface)
 {
 	mxl_hostapd_dfs_history_deinit(iface);
diff --git a/src/ap/mxl_hostapd.h b/src/ap/mxl_hostapd.h
index 17760b206..f8e641c6c 100644
--- a/src/ap/mxl_hostapd.h
+++ b/src/ap/mxl_hostapd.h
@@ -147,8 +147,10 @@ void mxl_hostapd_driver_init(struct hostapd_iface *iface, struct wpa_init_params
 void mxl_hostapd_setup_interface_pre(struct hostapd_iface *iface);
 int mxl_hostapd_get_secondary_offset(int primary, int bandwidth, int center_idx);
 void mxl_hostapd_update_freq_params_sec_offs(struct hostapd_freq_params *params);
-struct hostapd_channel_data * mxl_hostapd_get_mode_channel(struct hostapd_iface *iface, unsigned int freq);
 enum oper_chan_width mxl_get_oper_width(int width);
+int mxl_ieee80211n_supported_ht_tx_bf_capab(struct hostapd_iface *iface);
+int mxl_hostapd_prepare_reload_config(struct hostapd_iface *iface);
+struct hostapd_channel_data * mxl_hostapd_get_mode_channel(struct hostapd_iface *iface, unsigned int freq);
 struct hostapd_data * mxl_get_hapd_bssid(struct hostapd_iface *iface, const u8 *bssid);
 void mxl_hostapd_cleanup_iface(struct hostapd_iface *iface);
 void mxl_hostapd_update_coc(struct hostapd_iface *iface, const u8 *data, size_t data_len);
diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index 79a83d88b..8ba020ca7 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -1263,19 +1263,26 @@ struct ieee80211_ampe_ie {
 #define TX_BF_CAP_RX_NDP_CAP ((u32) BIT(3))
 #define TX_BF_CAP_TX_NDP_CAP ((u32) BIT(4))
 #define TX_BF_CAP_IMPLICIT_TX_BF_CAP ((u32) BIT(5))
-#define TX_BF_CAP_CALIBRATION_MASK ((u32) (BIT(6) | BIT(7))
+#define TX_BF_CAP_CALIBRATION_MASK ((u32) (BIT(6) | BIT(7)))
 #define TX_BF_CAP_CALIB_OFFSET 6
 #define TX_BF_CAP_EXPLICIT_CSI_TXBF_CAP ((u32) BIT(8))
 #define TX_BF_CAP_EXPLICIT_NONCOMPR_STEERING_CAP ((u32) BIT(9))
 #define TX_BF_CAP_EXPLICIT_COMPR_STEERING_CAP ((u32) BIT(10))
-#define TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK ((u32) (BIT(10) | BIT(11)))
-#define TX_BF_CAP_EXPLICIT_BF_CSI_FEEDBACK_OFFSET 11
+#define TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK ((u32) (BIT(11) | BIT(12)))
+#define TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_OFFSET 11
+#define TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_MASK   ((u32) (BIT(13) | BIT(14)))
 #define TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_OFFSET 13
+#define TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_MASK   ((u32) (BIT(15) | BIT(16)))
 #define TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_OFFSET 15
+#define TX_BF_CAP_MINIMAL_GROUPING_MASK   ((u32) (BIT(17) | BIT(18)))
 #define TX_BF_CAP_MINIMAL_GROUPING_OFFSET 17
+#define TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK   ((u32) (BIT(19) | BIT(20)))
 #define TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_OFFSET 19
+#define TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK   ((u32) (BIT(21) | BIT(22)))
 #define TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET 21
+#define TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK   ((u32) (BIT(23) | BIT(24)))
 #define TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET 23
+#define TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK   ((u32) (BIT(25) | BIT(26)))
 #define TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_OFFSET 25
 #define TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK ((u32) (BIT(27) | BIT(28)))
 #define TX_BF_CAP_CHANNEL_ESTIMATION_CAP_OFFSET 27
diff --git a/src/common/vendor_cmds_copy.h b/src/common/vendor_cmds_copy.h
index 4a9ceb153..2d30b6d69 100644
--- a/src/common/vendor_cmds_copy.h
+++ b/src/common/vendor_cmds_copy.h
@@ -610,6 +610,12 @@ struct intel_vendor_channel_switch_cfg {
   u8 csaDeauthFrames[INTEL_MAX_PROTECTED_DEAUTH_FRAME_LEN]; /* Deauth frames (optionally encrypted) per VAP */
 } __attribute__ ((packed));
 
+/* Data for LTQ_NL80211_VENDOR_SUBCMD_GET_PROP_PHY_CAP vendor command */
+struct mxl_vendor_prop_phy_cap {
+  u32 ht_bf;
+} __attribute__ ((packed));
+
+
 /*******************************************************************************
 *                           Event structures                                   *
 *******************************************************************************/
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 910bd1054..7c716700f 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -299,6 +299,11 @@ struct hostapd_hw_modes {
 	 */
 	u8 vht_mcs_set[8];
 
+	/**
+	 * ht_tx_bf_capab - HT (IEEE 802.11n) TX BF capabilities
+	 */
+	u32 ht_tx_bf_capab;
+
 	unsigned int flags; /* HOSTAPD_MODE_FLAG_* */
 
 	/**
diff --git a/src/drivers/driver_nl80211_capa.c b/src/drivers/driver_nl80211_capa.c
index 55985aded..9afea394b 100644
--- a/src/drivers/driver_nl80211_capa.c
+++ b/src/drivers/driver_nl80211_capa.c
@@ -1452,6 +1452,51 @@ static void qca_nl80211_get_features(struct wpa_driver_nl80211_data *drv)
 
 #endif /* CONFIG_DRIVER_NL80211_QCA */
 
+static int _get_prop_phy_cap_reply_handler(struct nl_msg *msg, void *arg)
+{
+	struct nlattr *tb[NL80211_ATTR_MAX + 1];
+	struct nlattr *nl_vendor_reply;
+	struct genlmsghdr *gnlh = nlmsg_data(nlmsg_hdr(msg));
+	struct mxl_vendor_prop_phy_cap *cap = arg;
+	if (!cap)
+		return NL_SKIP;
+
+	nla_parse(tb, NL80211_ATTR_MAX, genlmsg_attrdata(gnlh, 0), genlmsg_attrlen(gnlh, 0), NULL);
+	nl_vendor_reply = tb[NL80211_ATTR_VENDOR_DATA];
+
+	if (!nl_vendor_reply) {
+		wpa_printf(MSG_INFO, "nl80211: GET_PROP_PHY_CAP failed: no reply");
+		return NL_SKIP;
+	}
+
+	if ((size_t) nla_len(nl_vendor_reply) != sizeof(struct mxl_vendor_prop_phy_cap)) {
+		wpa_printf(MSG_INFO, "nl80211: GET_PROP_PHY_CAP failed: recieved data has wrong size");
+		return NL_SKIP;
+	}
+	memcpy_s(cap, sizeof(struct mxl_vendor_prop_phy_cap), nla_data(nl_vendor_reply), sizeof(struct mxl_vendor_prop_phy_cap));
+	return NL_SKIP;
+}
+
+static void _ltq_nl80211_get_prop_phy_cap(struct wpa_driver_nl80211_data *drv, struct mxl_vendor_prop_phy_cap *cap)
+{
+	int ret = 0;
+	struct nl_msg *msg;
+	if (!cap)
+		return;
+
+	if (!(msg = nl80211_drv_msg(drv, 0, NL80211_CMD_VENDOR)) ||
+		nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_LTQ) ||
+		nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD, LTQ_NL80211_VENDOR_SUBCMD_GET_PROP_PHY_CAP)) {
+		nlmsg_free(msg);
+		return;
+	}
+	ret = send_and_recv_msgs(drv, msg, _get_prop_phy_cap_reply_handler, cap, NULL, NULL, NULL);
+	if (ret) {
+		wpa_printf(MSG_ERROR, "nl80211: sending/receiving GET_PROP_PHY_CAP failed: %i (%s)", ret, strerror(-ret));
+		return;
+	}
+	return;
+}
 
 int wpa_driver_nl80211_capa(struct wpa_driver_nl80211_data *drv)
 {
@@ -2629,6 +2674,7 @@ nl80211_get_hw_feature_data(void *priv, u16 *num_modes, u16 *flags,
 		.failed = 0,
 		.dfs_domain = 0,
 	};
+	struct mxl_vendor_prop_phy_cap cap = { 0 };
 
 	*num_modes = 0;
 	*flags = 0;
@@ -2646,10 +2692,10 @@ nl80211_get_hw_feature_data(void *priv, u16 *num_modes, u16 *flags,
 	if (send_and_recv_msgs(drv, msg, phy_info_handler, &result,
 			       NULL, NULL, NULL) == 0) {
 		struct hostapd_hw_modes *modes;
+		int i;
 
 		nl80211_set_regulatory_flags(drv, &result);
 		if (result.failed) {
-			int i;
 
 			for (i = 0; result.modes && i < *num_modes; i++) {
 				os_free(result.modes[i].channels);
@@ -2660,6 +2706,11 @@ nl80211_get_hw_feature_data(void *priv, u16 *num_modes, u16 *flags,
 			return NULL;
 		}
 
+		_ltq_nl80211_get_prop_phy_cap(drv, &cap);
+		for (i = 0; result.modes && i < *num_modes; i++) {
+			result.modes[i].ht_tx_bf_capab = cap.ht_bf;
+		}
+
 		*dfs_domain = result.dfs_domain;
 
 		modes = wpa_driver_nl80211_postprocess_modes(result.modes,
-- 
2.43.0

