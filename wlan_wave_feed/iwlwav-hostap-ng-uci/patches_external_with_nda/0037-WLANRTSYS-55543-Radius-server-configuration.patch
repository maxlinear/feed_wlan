From aa400d546526387acc8c578abb560d22a11a7411 Mon Sep 17 00:00:00 2001
From: Dmitrijs Martinovs <dmartinovs@maxlinear.com>
Date: Wed, 24 May 2023 18:04:30 +0300
Subject: [PATCH] WLANRTSYS-55543: Radius server configuration

---
 hostapd/config_file.c          | 12 ++++++++++++
 src/ap/ap_config.c             |  3 +++
 src/ap/ap_config.h             | 17 +++++++++++++++++
 src/ap/hostapd.c               |  6 ++++++
 src/ap/ieee802_1x.c            | 25 ++++++++++++++++++++++++-
 src/ap/ieee802_1x.h            |  1 +
 src/eap_server/eap_i.h         |  3 +++
 src/eap_server/eap_server.c    | 16 ++++++++++++++++
 src/eapol_auth/eapol_auth_sm.c |  5 ++++-
 src/eapol_auth/eapol_auth_sm.h |  4 ++++
 10 files changed, 90 insertions(+), 2 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 99ca5f8bb..f61a8f6cd 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -2764,6 +2764,14 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		bss->openssl_ecdh_curves = os_strdup(pos);
 	} else if (os_strcmp(buf, "fragment_size") == 0) {
 		bss->fragment_size = atoi(pos);
+	} else if (os_strcmp(buf, "eap_req_id_retry_interval") == 0) {
+		bss->eap_req_id_retry_interval = atoi(pos);
+	} else if (os_strcmp(buf, "eap_aaa_req_retries") == 0) {
+		bss->eap_aaa_req_retries = atoi(pos);
+	} else if (os_strcmp(buf, "eap_aaa_req_timeout") == 0) {
+		bss->eap_aaa_req_timeout = atoi(pos);
+	} else if (os_strcmp(buf, "failed_authentication_quiet_period") == 0) {
+		bss->auth_quiet_period = atoi(pos);
 #ifdef EAP_SERVER_FAST
 	} else if (os_strcmp(buf, "pac_opaque_encr_key") == 0) {
 		os_free(bss->pac_opaque_encr_key);
@@ -4082,6 +4090,10 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		bss->disable_pmksa_caching = atoi(pos);
 	} else if (os_strcmp(buf, "okc") == 0) {
 		bss->okc = atoi(pos);
+	} else if (os_strcmp(buf, "pmksa_interval") == 0) {
+		bss->pmksa_interval = atoi(pos);
+	} else if (os_strcmp(buf, "pmksa_life_time") == 0) {
+		bss->pmksa_life_time = atoi(pos);
 #ifdef CONFIG_WPS
 	} else if (os_strcmp(buf, "wps_state") == 0) {
 		bss->wps_state = atoi(pos);
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 72e1c27a2..fc141e103 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -108,6 +108,9 @@ void hostapd_config_defaults_bss(struct hostapd_bss_config *bss)
 	bss->assoc_sa_query_max_timeout = 1000;
 	bss->assoc_sa_query_retry_timeout = 201;
 	bss->group_mgmt_cipher = WPA_CIPHER_AES_128_CMAC;
+	bss->eap_req_id_retry_interval = 0;
+	bss->pmksa_interval = 0;
+	bss->auth_quiet_period = 0;
 #ifdef EAP_SERVER_FAST
 	 /* both anonymous and authenticated provisioning */
 	bss->eap_fast_prov = 3;
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index a4c376c60..0f423905b 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -375,6 +375,14 @@ struct hostapd_bss_config {
 	char *eap_req_id_text; /* optional displayable message sent with
 				* EAP Request-Identity */
 	size_t eap_req_id_text_len;
+	int eap_req_id_retry_interval; /* Time Interval in seconds between
+				identity requests retries. A value of 0 (zero) disables it */
+	int eap_aaa_req_retries; /* Number of retries for Radius requests */
+	int eap_aaa_req_timeout; /* Radius request timeout in seconds after which
+			the request must be retransmitted for the # of retries available */
+	int auth_quiet_period; /* The enforced quiet period (time interval) in
+				seconds following failed authentication.A value of 0 (zero)
+				disables it.*/
 	int eapol_key_index_workaround;
 
 #ifdef CONFIG_WEP
@@ -533,6 +541,15 @@ struct hostapd_bss_config {
 	int disable_pmksa_caching;
 	int okc; /* Opportunistic Key Caching */
 
+	/* Default time in seconds after which a Wi-Fi client is forced
+	 * to ReAuthenticate
+	 */
+	int pmksa_life_time;
+	/* Time interval in seconds after which the PMKSA (Pairwise Master Key
+	 * Security Association) cache is purged
+	 */
+	int pmksa_interval;
+
 	int wps_state;
 #ifdef CONFIG_WPS
 	int wps_independent;
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 48f35dd2e..44d305155 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -509,6 +509,12 @@ void hostapd_free_hapd_data(struct hostapd_data *hapd)
 	hostapd_deinit_wpa(hapd);
 	vlan_deinit(hapd);
 	hostapd_acl_deinit(hapd);
+	if (!hapd->conf->disable_pmksa_caching && hapd->conf->pmksa_interval) {
+		if (eloop_is_timeout_registered(ieee802_1x_pmksa_purge_cache,
+			hapd, NULL))
+			eloop_cancel_timeout(ieee802_1x_pmksa_purge_cache, hapd, NULL);
+	}
+
 #ifndef CONFIG_NO_RADIUS
 	if (!hapd->mld_first_bss) {
 		radius_client_deinit(hapd->radius);
diff --git a/src/ap/ieee802_1x.c b/src/ap/ieee802_1x.c
index 54ac8af30..e06c0f6de 100644
--- a/src/ap/ieee802_1x.c
+++ b/src/ap/ieee802_1x.c
@@ -2557,6 +2557,10 @@ int ieee802_1x_init(struct hostapd_data *hapd)
 #endif /* CONFIG_WEP */
 	conf.eap_req_id_text = hapd->conf->eap_req_id_text;
 	conf.eap_req_id_text_len = hapd->conf->eap_req_id_text_len;
+	conf.eap_req_id_retry_interval = hapd->conf->eap_req_id_retry_interval;
+	conf.eap_aaa_req_retries = hapd->conf->eap_aaa_req_retries;
+	conf.eap_aaa_req_timeout = hapd->conf->eap_aaa_req_timeout;
+	conf.auth_quiet_period = hapd->conf->auth_quiet_period;
 	conf.erp_send_reauth_start = hapd->conf->erp_send_reauth_start;
 	conf.erp_domain = hapd->conf->erp_domain;
 #ifdef CONFIG_TESTING_OPTIONS
@@ -3057,6 +3061,14 @@ static void ieee802_1x_wnm_notif_send(void *eloop_ctx, void *timeout_ctx)
 }
 #endif /* CONFIG_HS20 */
 
+void ieee802_1x_pmksa_purge_cache(void *eloop_ctx, void *user_ctx)
+{
+	struct hostapd_data *hapd = eloop_ctx;
+	wpa_auth_pmksa_flush(hapd->wpa_auth);
+	eloop_cancel_timeout(ieee802_1x_pmksa_purge_cache, hapd, NULL);
+	eloop_register_timeout(hapd->conf->pmksa_interval, 0,
+		ieee802_1x_pmksa_purge_cache, hapd, NULL);
+}
 
 static bool ieee802_1x_finished(struct hostapd_data *hapd,
 				struct sta_info *sta, int success,
@@ -3093,7 +3105,9 @@ static bool ieee802_1x_finished(struct hostapd_data *hapd,
 #endif /* CONFIG_MACSEC */
 
 	key = ieee802_1x_get_key(sta->eapol_sm, &len);
-	if (sta->session_timeout_set) {
+	if (hapd->conf->pmksa_life_time) {
+		session_timeout = hapd->conf->pmksa_life_time;
+	} else if (sta->session_timeout_set) {
 		os_get_reltime(&now);
 		os_reltime_sub(&sta->session_timeout, &now, &remaining);
 		session_timeout = (remaining.sec > 0) ? remaining.sec : 1;
@@ -3107,6 +3121,15 @@ static bool ieee802_1x_finished(struct hostapd_data *hapd,
 		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_WPA,
 			       HOSTAPD_LEVEL_DEBUG,
 			       "Added PMKSA cache entry (IEEE 802.1X)");
+		if (!hapd->conf->disable_pmksa_caching && hapd->conf->pmksa_interval) {
+			if (!eloop_is_timeout_registered(ieee802_1x_pmksa_purge_cache,
+					hapd, NULL)) {
+				wpa_dbg(hapd->msg_ctx, MSG_DEBUG,
+					"Add timeout to purge cache");
+				eloop_register_timeout(hapd->conf->pmksa_interval, 0,
+					ieee802_1x_pmksa_purge_cache, hapd, NULL);
+			}
+		}
 	}
 
 	if (!success) {
diff --git a/src/ap/ieee802_1x.h b/src/ap/ieee802_1x.h
index 1469351c1..bbf93538e 100644
--- a/src/ap/ieee802_1x.h
+++ b/src/ap/ieee802_1x.h
@@ -65,5 +65,6 @@ void ieee802_1x_encapsulate_radius(struct hostapd_data *hapd,
 				   const u8 *eap, size_t len);
 struct eapol_state_machine *
 ieee802_1x_alloc_eapol_sm(struct hostapd_data *hapd, struct sta_info *sta);
+void ieee802_1x_pmksa_purge_cache(void *eloop_ctx, void *user_ctx);
 
 #endif /* IEEE802_1X_H */
diff --git a/src/eap_server/eap_i.h b/src/eap_server/eap_i.h
index 10affa431..184124236 100644
--- a/src/eap_server/eap_i.h
+++ b/src/eap_server/eap_i.h
@@ -122,6 +122,9 @@ struct eap_sm {
 	/* Constants */
 	int MaxRetrans;
 
+	int eap_req_id_retry_interval;
+	int eap_aaa_req_retries;
+	int eap_aaa_req_timeout;
 	struct eap_eapol_interface eap_if;
 
 	/* Full authenticator state machine local variables */
diff --git a/src/eap_server/eap_server.c b/src/eap_server/eap_server.c
index 0b7a5b98c..1de65054e 100644
--- a/src/eap_server/eap_server.c
+++ b/src/eap_server/eap_server.c
@@ -309,6 +309,12 @@ SM_STATE(EAP, IDLE)
 {
 	SM_ENTRY(EAP, IDLE);
 
+	if (sm->eap_req_id_retry_interval) {
+		sm->eap_if.retransWhile = sm->eap_req_id_retry_interval;
+		wpa_printf(MSG_DEBUG,
+			   "EAP: retransmit timeout %d seconds ",sm->eap_if.retransWhile);
+	}
+	else
 	sm->eap_if.retransWhile = eap_sm_calculateTimeout(
 		sm, sm->retransCount, sm->eap_if.eapSRTT, sm->eap_if.eapRTTVAR,
 		sm->methodTimeout);
@@ -413,6 +419,8 @@ SM_STATE(EAP, METHOD_REQUEST)
 		sm->methodTimeout = sm->m->getTimeout(sm, sm->eap_method_priv);
 	else
 		sm->methodTimeout = 0;
+	// Reset to init default
+	sm->MaxRetrans = 5;
 }
 
 
@@ -1008,6 +1016,12 @@ SM_STATE(EAP, IDLE2)
 {
 	SM_ENTRY(EAP, IDLE2);
 
+	if (sm->eap_aaa_req_timeout) {
+		sm->eap_if.retransWhile = sm->eap_aaa_req_timeout;
+		wpa_printf(MSG_DEBUG,
+			   "EAP: retransmit timeout %d seconds ",sm->eap_if.retransWhile);
+	}
+	else
 	sm->eap_if.retransWhile = eap_sm_calculateTimeout(
 		sm, sm->retransCount, sm->eap_if.eapSRTT, sm->eap_if.eapRTTVAR,
 		sm->methodTimeout);
@@ -1096,6 +1110,8 @@ SM_STATE(EAP, AAA_RESPONSE)
 	eap_copy_buf(&sm->eap_if.eapReqData, sm->eap_if.aaaEapReqData);
 	sm->currentId = eap_sm_getId(sm->eap_if.eapReqData);
 	sm->methodTimeout = sm->eap_if.aaaMethodTimeout;
+	if (sm->eap_aaa_req_retries)
+		sm->MaxRetrans = sm->eap_aaa_req_retries;
 }
 
 
diff --git a/src/eapol_auth/eapol_auth_sm.c b/src/eapol_auth/eapol_auth_sm.c
index e1b82ebe3..6a37e7a8b 100644
--- a/src/eapol_auth/eapol_auth_sm.c
+++ b/src/eapol_auth/eapol_auth_sm.c
@@ -812,7 +812,10 @@ eapol_auth_alloc(struct eapol_authenticator *eapol, const u8 *addr,
 
 	/* Set default values for state machine constants */
 	sm->auth_pae_state = AUTH_PAE_INITIALIZE;
-	sm->quietPeriod = AUTH_PAE_DEFAULT_quietPeriod;
+	if (eapol->conf.auth_quiet_period)
+		sm->quietPeriod = eapol->conf.auth_quiet_period;
+	else
+		sm->quietPeriod = AUTH_PAE_DEFAULT_quietPeriod;
 	sm->reAuthMax = AUTH_PAE_DEFAULT_reAuthMax;
 
 	sm->be_auth_state = BE_AUTH_INITIALIZE;
diff --git a/src/eapol_auth/eapol_auth_sm.h b/src/eapol_auth/eapol_auth_sm.h
index 7296a3aca..d82833c9a 100644
--- a/src/eapol_auth/eapol_auth_sm.h
+++ b/src/eapol_auth/eapol_auth_sm.h
@@ -21,6 +21,10 @@ struct eapol_auth_config {
 	int individual_wep_key_len;
 	char *eap_req_id_text; /* a copy of this will be allocated */
 	size_t eap_req_id_text_len;
+	int eap_req_id_retry_interval;
+	int eap_aaa_req_retries;
+	int eap_aaa_req_timeout;
+	int auth_quiet_period;
 	int erp_send_reauth_start;
 	char *erp_domain; /* a copy of this will be allocated */
 	bool eap_skip_prot_success;
-- 
2.43.0

