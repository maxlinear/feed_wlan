From 359bdcaceceed17b45d4cf3b89439177f1c4683a Mon Sep 17 00:00:00 2001
From: Dmitrijs Martinovs <dmartinovs@maxlinear.com>
Date: Fri, 16 Jun 2023 15:42:38 +0200
Subject: [PATCH] WLANRTSYS-56151: Dynamic country change

---
 hostapd/config_file.c  |   7 +++
 src/ap/ap_config.h     |   8 +++
 src/ap/dfs.c           |  13 ++---
 src/ap/dfs.h           |  10 ++++
 src/ap/drv_callbacks.c |   2 +-
 src/ap/hostapd.c       | 114 +++++++++++++++++++++++++++++++++++++----
 src/ap/hostapd.h       |   2 +-
 7 files changed, 135 insertions(+), 21 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index d3789dc83..ad079fff9 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -2820,6 +2820,13 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		os_memcpy(conf->country, pos, 2);
 	} else if (os_strcmp(buf, "country3") == 0) {
 		conf->country[2] = strtol(pos, NULL, 16);
+	} else if (os_strcmp(buf, "dynamic_country") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_BOOL_RANGE(val)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid dynamic_country %d", line, val);
+			return 1;
+		}
+		conf->dynamic_country = val;
 	} else if (os_strcmp(buf, "ieee80211d") == 0) {
 		conf->ieee80211d = atoi(pos);
 	} else if (os_strcmp(buf, "ieee80211h") == 0) {
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 187ca23a1..1f7bd033b 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1211,6 +1211,14 @@ struct hostapd_config {
 			  *	Annex E table (0x04 = global table)
 			  */
 
+	int dynamic_country; /* Country and channel list will updated run-time
+			      * after receiving regulatory changed event
+			      * regardless of the initiator and regardless
+			      * if hostapd is waiting for channel list update
+			      * And country specified in conf file will be
+			      * set to kernel only in case non-valid ocuntry
+			      * have been already set */
+
 	int ieee80211d;
 
 	int ieee80211h; /* DFS */
diff --git a/src/ap/dfs.c b/src/ap/dfs.c
index 46b31ef6e..128e96f70 100644
--- a/src/ap/dfs.c
+++ b/src/ap/dfs.c
@@ -23,11 +23,6 @@
 #include "mxl_zwdfs.h"
 #endif /* CONFIG_VENDOR_MXL */
 
-enum dfs_channel_type {
-	DFS_ANY_CHANNEL,
-	DFS_AVAILABLE, /* non-radar or radar-available */
-	DFS_NO_CAC_YET, /* radar-not-yet-available */
-};
 
 static struct hostapd_channel_data *
 dfs_downgrade_bandwidth(struct hostapd_iface *iface, int *secondary_channel,
@@ -43,7 +38,7 @@ static bool dfs_use_radar_background(struct hostapd_iface *iface)
 }
 
 
-static int dfs_get_used_n_chans(struct hostapd_iface *iface, int *seg1)
+int dfs_get_used_n_chans(struct hostapd_iface *iface, int *seg1)
 {
 	int n_chans = 1;
 
@@ -171,7 +166,7 @@ dfs_get_chan_data(struct hostapd_hw_modes *mode, int freq, int first_chan_idx)
 }
 
 
-static int dfs_chan_range_available(struct hostapd_hw_modes *mode,
+int dfs_chan_range_available(struct hostapd_hw_modes *mode,
 				    int first_chan_idx, int num_chans,
 				    enum dfs_channel_type type)
 {
@@ -351,7 +346,7 @@ static void dfs_adjust_center_freq(struct hostapd_iface *iface,
 
 
 /* Return start channel idx we will use for mode->channels[idx] */
-static int dfs_get_start_chan_idx(struct hostapd_iface *iface, int *seg1_start)
+int dfs_get_start_chan_idx(struct hostapd_iface *iface, int *seg1_start)
 {
 	struct hostapd_hw_modes *mode;
 	struct hostapd_channel_data *chan;
@@ -1412,7 +1407,7 @@ hostapd_dfs_background_start_channel_switch(struct hostapd_iface *iface,
 }
 
 
-static int hostapd_dfs_start_channel_switch(struct hostapd_iface *iface)
+int hostapd_dfs_start_channel_switch(struct hostapd_iface *iface)
 {
 	struct hostapd_channel_data *channel;
 	int secondary_channel;
diff --git a/src/ap/dfs.h b/src/ap/dfs.h
index 606c1b393..cf4b25325 100644
--- a/src/ap/dfs.h
+++ b/src/ap/dfs.h
@@ -32,5 +32,15 @@ int hostapd_dfs_start_cac(struct hostapd_iface *iface, int freq,
 int hostapd_handle_dfs_offload(struct hostapd_iface *iface);
 int hostapd_is_dfs_overlap(struct hostapd_iface *iface, enum chan_width width,
 			   int center_freq);
+int dfs_get_start_chan_idx(struct hostapd_iface *iface, int *seg1_start);
+int dfs_get_used_n_chans(struct hostapd_iface *iface, int *seg1);
+enum dfs_channel_type {
+	DFS_ANY_CHANNEL,
+	DFS_AVAILABLE, /* non-radar or radar-available */
+	DFS_NO_CAC_YET, /* radar-not-yet-available */
+};
+int dfs_chan_range_available(struct hostapd_hw_modes *mode,
+							 int first_chan_idx, int num_chans, enum dfs_channel_type type);
+int hostapd_dfs_start_channel_switch(struct hostapd_iface *iface);
 
 #endif /* DFS_H */
diff --git a/src/ap/drv_callbacks.c b/src/ap/drv_callbacks.c
index 614c3647b..9b040b695 100644
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -2543,7 +2543,7 @@ void wpa_supplicant_event(void *ctx, enum wpa_event_type event,
 		 * too much stuff. */
 		/* hostapd_get_hw_features(hapd->iface); */
 		hostapd_channel_list_updated(
-			hapd->iface, data->channel_list_changed.initiator);
+			hapd->iface, &data->channel_list_changed);
 		break;
 	case EVENT_DFS_CAC_STARTED:
 		if (!data)
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 385db1504..396547d60 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -2158,17 +2158,100 @@ static void channel_list_update_timeout(void *eloop_ctx, void *timeout_ctx)
 	setup_interface2(iface);
 }
 
+static void
+hostapd_conf_update_country_code (struct hostapd_iface *iface, const char *new_country)
+{
+	iface->conf->country[0] = new_country[0];
+	iface->conf->country[1] = new_country[1];
+}
 
-void hostapd_channel_list_updated(struct hostapd_iface *iface, int initiator)
+static int hostapd_is_valid_country (const char *country)
 {
-	if (initiator == REGDOM_SET_BY_DRIVER) {
+	if (country[0] == '\0' || country[1] == '\0')
+		return 0;
+
+	/*	Special country code cases not supported:
+	 *	00 - World regulatory domain
+	 *	99 - built by driver but a specific alpha2 cannot be determined
+	 *	98 - result of an intersection between two regulatory domains
+	 *	97 - regulatory domain has not yet been configured */
+	if ((country[0] == '0' && country[1] == '0') ||
+	    (country[0] == '9' && country[1] == '9') ||
+	    (country[0] == '9' && country[1] == '8') ||
+	    (country[0] == '9' && country[1] == '7'))
+		return 0;
+
+	return 1;
+}
+
+static int
+hostapd_change_country(struct hostapd_iface *iface, struct channel_list_changed *info)
+{
+	int ret;
+	int n_chans, n_chans1;
+	int start_chan_idx, start_chan_idx1;
+
+	if (!hostapd_is_valid_country(info->alpha2))
+		return 0;
+
+	/* If this country already configured, nothing to do */
+	if (os_strncmp(iface->conf->country, info->alpha2, 2) == 0)
+		return 0;
+
+	if (iface->state != HAPD_IFACE_ENABLED) {
+		hostapd_conf_update_country_code(iface, info->alpha2);
+		return 0;
+	}
+
+	/* Update channels and flags */
+	if (hostapd_get_hw_features(iface)) {
+		wpa_printf(MSG_ERROR, "Failed to get new regulatory data");
+		return -1;
+	}
+
+	ret = hostapd_select_hw_mode(iface);
+	if (ret != 0) {
+		wpa_printf(MSG_ERROR, "Could not select hw_mode");
+		return -1;
+	}
+
+	hostapd_conf_update_country_code(iface, info->alpha2);
+
+	/* Check if current channel definition still valid on new regdom */
+	start_chan_idx = dfs_get_start_chan_idx(iface, &start_chan_idx1);
+	n_chans = dfs_get_used_n_chans(iface, &n_chans1);
+
+	if (!dfs_chan_range_available(iface->current_mode, start_chan_idx, n_chans, DFS_ANY_CHANNEL)) {
+		wpa_printf(MSG_INFO, "Regdom change: current chandef not allowed, switching channel");
+		return hostapd_dfs_start_channel_switch(iface);
+	}
+
+	wpa_printf(MSG_INFO, "Regdom change: current chandef allowed, updating beacons");
+	if (ieee802_11_update_beacons(iface))
+		return -1;
+
+	return 0;
+}
+
+void hostapd_channel_list_updated(struct hostapd_iface *iface, struct channel_list_changed *info)
+{
+	if (iface->conf->dynamic_country && !iface->wait_channel_update) {
+		if (hostapd_change_country(iface, info)) {
+			wpa_printf(MSG_ERROR, "Regdom change: country update failed");
+			hostapd_disable_iface(iface);
+		}
+
+		return;
+	}
+
+	if (info->initiator == REGDOM_SET_BY_DRIVER) {
 		hostapd_for_each_interface(iface->interfaces,
 					   hostapd_no_ir_channel_list_updated,
 					   NULL);
 		return;
 	}
 
-	if (!iface->wait_channel_update || initiator != REGDOM_SET_BY_USER)
+	if (!iface->wait_channel_update || info->initiator != REGDOM_SET_BY_USER)
 		return;
 
 	wpa_printf(MSG_DEBUG, "Channel list updated - continue setup");
@@ -2235,15 +2318,26 @@ static int setup_interface(struct hostapd_iface *iface)
 		if (hostapd_get_country(hapd, previous_country) < 0)
 			previous_country[0] = '\0';
 
-		os_memcpy(country, hapd->iconf->country, 3);
-		country[3] = '\0';
-		if (hostapd_set_country(hapd, country) < 0) {
-			wpa_printf(MSG_ERROR, "Failed to set country code");
-			return -1;
+		if (hapd->iconf->dynamic_country && hostapd_is_valid_country(previous_country)) {
+			os_memcpy(country, previous_country, 3);
+			country[3] = '\0';
+
+			hostapd_conf_update_country_code(iface, previous_country);
+
+			wpa_printf(MSG_DEBUG, "Dynamic country enabled, staying on current country %s", country);
 		}
+		else {
+			os_memcpy(country, hapd->iconf->country, 3);
+			country[3] = '\0';
+
+			if (hostapd_set_country(hapd, country) < 0) {
+				wpa_printf(MSG_ERROR, "Failed to set country code");
+				return -1;
+			}
 
-		wpa_printf(MSG_DEBUG, "Previous country code %s, new country code %s",
-			   previous_country, country);
+			wpa_printf(MSG_DEBUG, "Previous country code %s, new country code %s",
+				previous_country, country);
+		}
 
 		if (os_strncmp(previous_country, country, 2) != 0) {
 			wpa_printf(MSG_DEBUG, "Continue interface setup after channel list update");
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 11536c06a..37ccdf0a0 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -763,7 +763,7 @@ void hostapd_free_hapd_data(struct hostapd_data *hapd);
 void hostapd_cleanup_iface_partial(struct hostapd_iface *iface);
 int hostapd_add_iface(struct hapd_interfaces *ifaces, char *buf);
 int hostapd_remove_iface(struct hapd_interfaces *ifaces, char *buf);
-void hostapd_channel_list_updated(struct hostapd_iface *iface, int initiator);
+void hostapd_channel_list_updated(struct hostapd_iface *iface, struct channel_list_changed *info);
 void hostapd_set_state(struct hostapd_iface *iface, enum hostapd_iface_state s);
 const char * hostapd_state_text(enum hostapd_iface_state s);
 int hostapd_csa_in_progress(struct hostapd_iface *iface);
-- 
2.43.0

