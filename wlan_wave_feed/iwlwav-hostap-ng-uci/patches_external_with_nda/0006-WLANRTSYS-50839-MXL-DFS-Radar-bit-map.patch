From 1d198d8786de1149d41ed6ffc962e9efe1a922be Mon Sep 17 00:00:00 2001
From: mvuls <mvuls@maxlinear.com>
Date: Wed, 8 Nov 2023 10:39:02 +0200
Subject: [PATCH] WLANRTSYS-50839: MXL DFS Radar bit map

---
 src/ap/dfs.c                       | 10 ++++++++++
 src/ap/mxl_dfs_common.c            | 23 +++++++++++++++++++++++
 src/ap/mxl_dfs_common.h            |  4 ++++
 src/drivers/driver_nl80211_event.c |  6 ++++++
 4 files changed, 43 insertions(+)

diff --git a/src/ap/dfs.c b/src/ap/dfs.c
index 738158db8..ac5af55ae 100644
--- a/src/ap/dfs.c
+++ b/src/ap/dfs.c
@@ -714,6 +714,9 @@ static int set_dfs_state(struct hostapd_iface *iface, int freq, int ht_enabled,
 	wpa_printf(MSG_DEBUG, "DFS freq: %dMHz, n_chans: %d", frequency,
 		   n_chans);
 	for (i = 0; i < n_chans; i++) {
+#ifdef CONFIG_VENDOR_MXL
+		if (mxl_hostapd_check_rbm(iface, i))
+#endif /* CONFIG_VENDOR_MXL */
 		ret += set_dfs_state_freq(iface, frequency, state);
 		frequency = frequency + 20;
 
@@ -1449,15 +1452,22 @@ int mxl_dfs_get_start_chan_idx(struct hostapd_iface *iface, int *seg1_start) { r
 int mxl_dfs_check_chans_unavailable(struct hostapd_iface *iface, int start_chan_idx, int n_chans)
 	{ return dfs_check_chans_unavailable(iface, start_chan_idx, n_chans); }
 int mxl_hostapd_dfs_start_channel_switch(struct hostapd_iface *iface) { return hostapd_dfs_start_channel_switch(iface); }
+int mxl_set_dfs_state_freq(struct hostapd_iface *iface, int freq, u32 state) { return set_dfs_state_freq(iface, freq, state); }
 #endif /* CONFIG_VENDOR_MXL */
 
 int hostapd_dfs_radar_detected(struct hostapd_iface *iface, int freq,
 			       int ht_enabled, int chan_offset, int chan_width,
 			       int cf1, int cf2)
 {
+#ifdef CONFIG_VENDOR_MXL
+	wpa_msg(iface->bss[0]->msg_ctx, MSG_INFO, DFS_EVENT_RADAR_DETECTED
+		"freq=%d ht_enabled=%d chan_offset=%d chan_width=%d cf1=%d cf2=%d rbm=%d",
+		freq, ht_enabled, chan_offset, chan_width, cf1, cf2, iface->mxl_iface.rbm);
+#else
 	wpa_msg(iface->bss[0]->msg_ctx, MSG_INFO, DFS_EVENT_RADAR_DETECTED
 		"freq=%d ht_enabled=%d chan_offset=%d chan_width=%d cf1=%d cf2=%d",
 		freq, ht_enabled, chan_offset, chan_width, cf1, cf2);
+#endif
 
 	/* Proceed only if DFS is not offloaded to the driver */
 	if (iface->drv_flags & WPA_DRIVER_FLAGS_DFS_OFFLOAD)
diff --git a/src/ap/mxl_dfs_common.c b/src/ap/mxl_dfs_common.c
index 0dae4e510..81626b96e 100644
--- a/src/ap/mxl_dfs_common.c
+++ b/src/ap/mxl_dfs_common.c
@@ -227,3 +227,26 @@ bool mxl_hostapd_handle_radar(struct hostapd_iface *iface)
 
 	return false;
 }
+
+bool mxl_hostapd_check_rbm(struct hostapd_iface *iface, int ch_pos)
+{
+	if (!iface->mxl_iface.rbm)
+		return true;
+
+	if (iface->mxl_iface.rbm & BIT(ch_pos))
+		return true;
+
+	return false;
+}
+
+void mxl_hostapd_set_rbm(void *ctx, u8 rbm)
+{
+	struct hostapd_data *hapd = ctx;
+	hapd->iface->mxl_iface.rbm = rbm;
+}
+
+void mxl_hostapd_clear_rbm(void *ctx)
+{
+	struct hostapd_data *hapd = ctx;
+	hapd->iface->mxl_iface.rbm = 0;
+}
diff --git a/src/ap/mxl_dfs_common.h b/src/ap/mxl_dfs_common.h
index b8bdb234b..d63de6e51 100644
--- a/src/ap/mxl_dfs_common.h
+++ b/src/ap/mxl_dfs_common.h
@@ -39,5 +39,9 @@ struct hostapd_channel_data * mxl_dfs_get_valid_channel(struct hostapd_iface *if
 							u8 *oper_centr_freq_seg0_idx,
 							u8 *oper_centr_freq_seg1_idx);
 bool mxl_hostapd_handle_radar(struct hostapd_iface *iface);
+int mxl_set_dfs_state_freq(struct hostapd_iface *iface, int freq, u32 state);
+bool mxl_hostapd_check_rbm(struct hostapd_iface *iface, int ch_pos);
+void mxl_hostapd_set_rbm(void *ctx, u8 rbm);
+void mxl_hostapd_clear_rbm(void *ctx);
 
 #endif /* MXL_DFS_COMMON_H */
diff --git a/src/drivers/driver_nl80211_event.c b/src/drivers/driver_nl80211_event.c
index ba378bf6e..8418127ae 100644
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -2520,7 +2520,13 @@ static void nl80211_radar_event(struct wpa_driver_nl80211_data *drv,
 
 	switch (event_type) {
 	case NL80211_RADAR_DETECTED:
+#if defined(CONFIG_VENDOR_MXL) && !defined(CONFIG_VENDOR_MXL_BUILD_FOR_SUPPLICANT)
+		mxl_hostapd_set_rbm(drv->ctx, tb[NL80211_ATTR_RADAR_BIT_MAP] ? nla_get_u8(tb[NL80211_ATTR_RADAR_BIT_MAP]) : 0);
+#endif /* defined(CONFIG_VENDOR_MXL) && !defined(CONFIG_VENDOR_MXL_BUILD_FOR_SUPPLICANT) */
 		wpa_supplicant_event(drv->ctx, EVENT_DFS_RADAR_DETECTED, &data);
+#if defined(CONFIG_VENDOR_MXL) && !defined(CONFIG_VENDOR_MXL_BUILD_FOR_SUPPLICANT)
+		mxl_hostapd_clear_rbm(drv->ctx);
+#endif /* defined(CONFIG_VENDOR_MXL) && !defined(CONFIG_VENDOR_MXL_BUILD_FOR_SUPPLICANT) */
 		break;
 	case NL80211_RADAR_CAC_FINISHED:
 		wpa_supplicant_event(drv->ctx, EVENT_DFS_CAC_FINISHED, &data);
-- 
2.43.0

