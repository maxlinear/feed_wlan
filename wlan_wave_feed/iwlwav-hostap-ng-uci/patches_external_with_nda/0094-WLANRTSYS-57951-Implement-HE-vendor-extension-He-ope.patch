From 714412b4e858dc5eb60b391f6f5af62ef17a9593 Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Thu, 17 Aug 2023 12:51:20 +0200
Subject: [PATCH] WLANRTSYS-57951: Implement HE vendor extension: He operation

---
 hostapd/config_file.c  | 28 +++++++++++++++++++++++++++-
 src/ap/ap_config.c     |  1 +
 src/ap/ap_config.h     |  2 ++
 src/ap/ieee802_11_he.c | 17 +++++++++++++++--
 4 files changed, 45 insertions(+), 3 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 44a809f70..026878abd 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4298,7 +4298,7 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		conf->he_op.he_bss_color_partial = atoi(pos);
 	} else if (os_strcmp(buf, "he_default_pe_duration") == 0 || os_strcmp(buf, "he_operation_default_pe_duration") == 0) {
 		conf->he_op.he_default_pe_duration = atoi(pos);
-	} else if (os_strcmp(buf, "he_twt_required") == 0) {
+	} else if (os_strcmp(buf, "he_twt_required") == 0 || os_strcmp(buf, "he_operation_twt_required") == 0) {
 		conf->he_op.he_twt_required = atoi(pos);
 	// TODO: tmp solution - remake this to work with 1 parameter name
 	} else if (os_strcmp(buf, "he_twt_responder") == 0 || os_strcmp(buf, "twt_responder_support") == 0) {
@@ -4309,6 +4309,8 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 	// TODO: tmp solution - remake this to work with 1 parameter name
 	} else if (os_strcmp(buf, "he_er_su_disable") == 0 || os_strcmp(buf, "he_operation_er_su_disable") == 0) {
 		conf->he_op.he_er_su_disable = atoi(pos);
+	} else if (os_strcmp(buf, "he_operation_vht_operation_information_present") == 0) {
+		conf->he_oper_vht_oper_info = atoi(pos);
 	} else if (os_strcmp(buf, "he_basic_mcs_nss_set") == 0) {
 		conf->he_op.he_basic_mcs_nss_set = atoi(pos);
 	} else if (os_strcmp(buf, "he_mu_edca_qos_info_param_count") == 0) {
@@ -4513,6 +4515,30 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		conf->multibss_enable = atoi(pos);
 	} else if (os_strcmp(buf, "he_oper_max_co_hosted_bssid_ind") == 0) {
 		conf->he_oper_max_co_hosted_bssid_ind = atoi(pos);
+	} else if (os_strcmp(buf, "he_operation_cohosted_bss") == 0) {
+		conf->he_oper_cohosted_bss = atoi(pos);
+	} else if (os_strcmp(buf, "he_operation_max_mcs_for_1ss") == 0) {
+		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_1ss is not supported", line);
+	} else if (os_strcmp(buf, "he_operation_max_mcs_for_2ss") == 0) {
+		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_2ss is not supported", line);
+	} else if (os_strcmp(buf, "he_operation_max_mcs_for_3ss") == 0) {
+		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_3ss is not supported", line);
+	} else if (os_strcmp(buf, "he_operation_max_mcs_for_4ss") == 0) {
+		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_4ss is not supported", line);
+	} else if (os_strcmp(buf, "he_operation_max_mcs_for_5ss") == 0) {
+		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_5ss is not supported", line);
+	} else if (os_strcmp(buf, "he_operation_max_mcs_for_6ss") == 0) {
+		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_6ss is not supported", line);
+	} else if (os_strcmp(buf, "he_operation_max_mcs_for_7ss") == 0) {
+		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_7ss is not supported", line);
+	} else if (os_strcmp(buf, "he_operation_max_mcs_for_8ss") == 0) {
+		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_8ss is not supported", line);
+	} else if (os_strcmp(buf, "he_operation_vht_channel_width") == 0) {
+		wpa_printf(MSG_WARNING, "Line %d: he_operation_vht_channel_width is not supported", line);
+	} else if (os_strcmp(buf, "he_operation_vht_channel_center_segment0") == 0) {
+		wpa_printf(MSG_WARNING, "Line %d: he_operation_vht_channel_center_segment0 is not supported", line);
+	} else if (os_strcmp(buf, "he_operation_vht_channel_center_segment1") == 0) {
+		wpa_printf(MSG_WARNING, "Line %d: he_operation_vht_channel_center_segment1 is not supported", line);
 #endif /* CONFIG_IEEE80211AX */
 	} else if (os_strcmp(buf, "max_listen_interval") == 0) {
 		bss->max_listen_interval = atoi(pos);
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index af9326295..9ecbe553b 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -356,6 +356,7 @@ struct hostapd_config * hostapd_config_defaults(void)
 	conf->he_6ghz_rx_ant_pat = 1;
 	conf->he_6ghz_tx_ant_pat = 1;
 	conf->he_oper_max_co_hosted_bssid_ind = 5;
+	conf->he_oper_cohosted_bss = 1;
 	conf->bss_color_change_timeout  = BSS_COLOR_CHANGE_TIMEOUT_DEFAULT;
 	conf->num_bss_color_coll_thresh = NUM_BSS_COLOR_COLL_THRESH_DEFAULT;
 	conf->bss_color_coll_age_thresh = BSS_COLOR_COLL_AGE_THRESH_DEFAULT;
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index cbd12fb14..7a95bbd15 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1396,6 +1396,7 @@ struct hostapd_config {
 	u8 he_spatial_reuse_ie_present_in_beacon;
 	u8 he_spatial_reuse_ie_present_in_assoc_response;
 	u8 he_spatial_reuse_ie_present_in_probe_response;
+	u8 he_oper_vht_oper_info;
 #endif /* CONFIG_IEEE80211AX */
 
 	/* VHT enable/disable config from CHAN_SWITCH */
@@ -1462,6 +1463,7 @@ struct hostapd_config {
 #ifdef CONFIG_IEEE80211AX
 	enum bcast_twt_wake_duration_unit btwt_wake_dur_unit;
 	u8 he_oper_max_co_hosted_bssid_ind;
+	u8 he_oper_cohosted_bss;
 #endif
 	/* Extended Capabilities: Max Number of MSDUs in A-MSDU */
 	u8 ext_cap_max_num_msdus_in_amsdu;
diff --git a/src/ap/ieee802_11_he.c b/src/ap/ieee802_11_he.c
index 8e9540081..a1770e284 100644
--- a/src/ap/ieee802_11_he.c
+++ b/src/ap/ieee802_11_he.c
@@ -181,13 +181,16 @@ u8 * hostapd_eid_he_operation(struct hostapd_data *hapd, u8 *eid)
 	if (!hapd->iface->current_mode)
 		return eid;
 
+	if (hapd->iface->conf->he_oper_vht_oper_info)
+		oper_size += 3;
+
 	if (is_6ghz_op_class(hapd->iconf->op_class))
 		oper_size += 5;
 	else
 		co_hosted_bss_ind = (bool)(hapd->iconf->num_bss > MIN_NUM_BSS_IN_NON_MBSSID_SET &&
 		    !hapd->iconf->multibss_enable);
 
-	if (co_hosted_bss_ind)
+	if (co_hosted_bss_ind && hapd->iconf->he_oper_cohosted_bss)
 		oper_size += 1;
 
 	*pos++ = WLAN_EID_EXTENSION;
@@ -227,8 +230,18 @@ u8 * hostapd_eid_he_operation(struct hostapd_data *hapd, u8 *eid)
 
 	pos += 6; /* skip the fixed part */
 
+	/* Conditional VHT Operation Information (3 octets) */
+	if (hapd->iface->conf->he_oper_vht_oper_info) {
+		u8 seg0 = hostapd_get_oper_centr_freq_seg0_idx(hapd->iconf);
+		u8 seg1 = hostapd_get_oper_centr_freq_seg1_idx(hapd->iconf);
+		*pos++ = hostapd_get_oper_chwidth(hapd->iconf);
+		*pos++ = seg0 ? seg0 : hapd->iconf->channel;
+		*pos++ = seg1;
+		params |= HE_OPERATION_VHT_OPER_INFO;
+	}
+
 	/* Conditional MaxBSSID Indicator subfield */
-	if (co_hosted_bss_ind) {
+	if (co_hosted_bss_ind && hapd->iconf->he_oper_cohosted_bss) {
 		params |= HE_OPERATION_COHOSTED_BSS;
 		*pos++ = hapd->iface->conf->he_oper_max_co_hosted_bssid_ind;
 	}
-- 
2.43.0

