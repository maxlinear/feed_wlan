From 6e98bf7e17876d703b276ce270be228d39d438d5 Mon Sep 17 00:00:00 2001
From: "Maneendra,Pokuri Naga" <pnmaneendra@maxlinear.com>
Date: Mon, 11 Mar 2024 18:47:29 +0530
Subject: [PATCH] WLANRTSYS-64277 SCS Feature changes Signed-off-by:
 pnmaneendra pnmaneendra@maxlinear.com

---
 hostapd/Makefile                 |   3 +
 src/ap/ap_drv_ops.c              |  13 ++
 src/ap/beacon.c                  |  12 ++
 src/ap/ieee802_11.c              |   9 ++
 src/ap/ieee802_11_shared.c       |   8 ++
 src/ap/mxl_ieee802_11.h          |   4 +
 src/ap/mxl_ieee802_11_shared.c   |  28 ++++
 src/ap/mxl_sta_info.h            |   4 +
 src/ap/mxl_wmm.c                 | 211 ++++++++++++++++++++++++++++++-
 src/ap/mxl_wmm.h                 |   7 +
 src/common/ieee802_11_common.c   |   6 +
 src/common/ieee802_11_common.h   |   2 +
 src/common/ieee802_11_defs.h     |  18 +++
 src/common/mxl_ieee802_11_defs.h |   3 +
 src/common/mxl_wpa_ctrl.h        |   5 +
 src/common/vendor_cmds_copy.h    |  29 +++++
 src/drivers/driver_nl80211.c     |   5 +
 17 files changed, 366 insertions(+), 1 deletion(-)

diff --git a/hostapd/Makefile b/hostapd/Makefile
index 742df6f4f..39451f4e9 100644
--- a/hostapd/Makefile
+++ b/hostapd/Makefile
@@ -405,6 +405,9 @@ OBJS += ../src/ap/mxl_mld.o
 ifdef CONFIG_EPCS_MXL
 CFLAGS += -DCONFIG_EPCS_MXL
 endif
+ifdef CONFIG_SCS_MXL
+CFLAGS += -DCONFIG_SCS_MXL
+endif
 endif
 endif
 
diff --git a/src/ap/ap_drv_ops.c b/src/ap/ap_drv_ops.c
index 2e9acce7f..559d6a0f8 100644
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -22,6 +22,10 @@
 #include "hs20.h"
 #include "wpa_auth.h"
 #include "ap_drv_ops.h"
+#ifdef CONFIG_VENDOR_MXL
+#include "mxl_dfs_common.h"
+#include "mxl_ieee802_11.h"
+#endif /* CONFIG_VENDOR_MXL */
 
 
 u32 hostapd_sta_flags_to_drv(u32 flags)
@@ -206,6 +210,15 @@ int hostapd_build_ap_extra_ies(struct hostapd_data *hapd,
 		goto fail;
 #endif /* CONFIG_OWE */
 
+#ifdef CONFIG_SCS_MXL
+	pos = mxl_hostapd_eid_wce(hapd, buf, sizeof(buf));
+	if (add_buf_data(&beacon, buf, pos - buf) < 0 ||
+	    add_buf_data(&proberesp, buf, pos - buf) < 0 ||
+	    add_buf_data(&assocresp, buf, pos - buf) < 0) {
+		goto fail;
+	}
+#endif /*CONFIG_SCS_MXL */
+
 	add_buf(&beacon, hapd->conf->vendor_elements);
 	add_buf(&proberesp, hapd->conf->vendor_elements);
 	add_buf(&assocresp, hapd->conf->assocresp_elements);
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index b0b817967..391661aff 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -707,6 +707,9 @@ static size_t hostapd_probe_resp_elems_len(struct hostapd_data *hapd,
 	buflen += hostapd_mbo_ie_len(hapd);
 	buflen += hostapd_eid_owe_trans_len(hapd);
 	buflen += hostapd_eid_dpp_cc_len(hapd);
+#ifdef CONFIG_SCS_MXL
+	buflen += mxl_hostapd_eid_wce_len(hapd);
+#endif /* CONFIG_SCS_MXL */
 
 	return buflen;
 }
@@ -968,6 +971,9 @@ static u8 * hostapd_probe_resp_fill_elems(struct hostapd_data *hapd,
 	pos = hostapd_eid_mbo(hapd, pos, epos - pos);
 	pos = hostapd_eid_owe_trans(hapd, pos, epos - pos);
 	pos = hostapd_eid_dpp_cc(hapd, pos, epos - pos);
+#ifdef CONFIG_SCS_MXL
+	pos = mxl_hostapd_eid_wce(hapd, pos, epos - pos);
+#endif /* CONFIG_SCS_MXL */
 
 	if (hapd->conf->vendor_elements) {
 		os_memcpy(pos, wpabuf_head(hapd->conf->vendor_elements),
@@ -2372,6 +2378,9 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 	tail_len += hostapd_mbo_ie_len(hapd);
 	tail_len += hostapd_eid_owe_trans_len(hapd);
 	tail_len += hostapd_eid_dpp_cc_len(hapd);
+#ifdef CONFIG_SCS_MXL
+	tail_len += mxl_hostapd_eid_wce_len(hapd);
+#endif /* CONFIG_SCS_MXL */
 
 	if (hapd->iconf->multibss_enable && (MULTIBSS_REFERENCE_BSS_IDX == hapd->conf->bss_idx)) {
 		multiple_bssid_ie_len = multiple_bssid_ie_get_len(hapd, true, NULL, 0);
@@ -2630,6 +2639,9 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 	tailpos = hostapd_eid_owe_trans(hapd, tailpos,
 					tail + tail_len - tailpos);
 	tailpos = hostapd_eid_dpp_cc(hapd, tailpos, tail + tail_len - tailpos);
+#ifdef CONFIG_SCS_MXL
+	tailpos = mxl_hostapd_eid_wce(hapd, tailpos, tail + tail_len - tailpos);
+#endif /* CONFIG_SCS_MXL */
 
 	if (hapd->conf->vendor_elements) {
 		os_memcpy(tailpos, wpabuf_head(hapd->conf->vendor_elements),
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index e32665e6f..aec223210 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -5412,6 +5412,9 @@ rsnxe_done:
 		p = hostapd_eid_mbo(hapd, p, buf + buflen - p);
 #endif /* CONFIG_MBO */
 
+#ifdef CONFIG_SCS_MXL
+	p = mxl_hostapd_eid_wce(hapd, p, buf + buflen - p);
+#endif /* CONFIG_SCS_MXL */
 	if (hapd->conf->assocresp_elements &&
 	    (size_t) (buf + buflen - p) >=
 	    wpabuf_len(hapd->conf->assocresp_elements)) {
@@ -6620,6 +6623,12 @@ static int handle_action(struct hostapd_data *hapd,
 	case WLAN_ACTION_RADIO_MEASUREMENT:
 		hostapd_handle_radio_measurement(hapd, (const u8 *) mgmt, len);
 		return 1;
+#ifdef CONFIG_SCS_MXL
+	case WLAN_ACTION_ROBUST_AV_STREAMING:
+		wpa_printf(MSG_DEBUG, "WLAN_ACTION_ROBUST_AV_STREAMING");
+		mxl_hostapd_scs_action(hapd, mgmt, len);
+		return 1;
+#endif /* CONFIG_SCS_MXL */
 	}
 
 	hostapd_logger(hapd, mgmt->sa, HOSTAPD_MODULE_IEEE80211,
diff --git a/src/ap/ieee802_11_shared.c b/src/ap/ieee802_11_shared.c
index 0a68d82d1..16cc995bc 100644
--- a/src/ap/ieee802_11_shared.c
+++ b/src/ap/ieee802_11_shared.c
@@ -375,6 +375,9 @@ static void hostapd_ext_capab_byte(struct hostapd_data *hapd, u8 *pos, int idx,
 	*pos = 0x00;
 	u8 ext_cap = 0;
 
+#ifdef CONFIG_SCS_MXL
+	struct ieee80211_eht_capabilities *eht_cap = &hapd->iconf->mxl_conf.eht_capab_dbg;
+#endif /* CONFIG_SCS_MXL */
 	if (idx < hapd->iface->extended_capa_len)
 		ext_cap = hapd->iface->extended_capa[idx];
 
@@ -441,6 +444,11 @@ static void hostapd_ext_capab_byte(struct hostapd_data *hapd, u8 *pos, int idx,
 	case 6: /* Bits 48-55 */
 		if (hapd->conf->ssid.utf8_ssid)
 			*pos |= 0x01; /* Bit 48 - UTF-8 SSID */
+#ifdef CONFIG_SCS_MXL
+		if(mxl_is_mlo_enabled(hapd->conf) &&
+		   (eht_cap->mac_cap & EHT_MAC_CAP0_SCS_TRAFFIC_DESC))
+				*pos |= 0x40; /* Bit 54 - SCS Supported */
+#endif /* CONFIG_SCS_MXL */
 		break;
 	case 7: /* Bits 56-63 */
 		if (hapd->conf->opmode_notif) {
diff --git a/src/ap/mxl_ieee802_11.h b/src/ap/mxl_ieee802_11.h
index abf1f53cd..6c6ee87a0 100644
--- a/src/ap/mxl_ieee802_11.h
+++ b/src/ap/mxl_ieee802_11.h
@@ -16,6 +16,10 @@ u8 * hostapd_eid_txpower_envelope_vendor_mxl_6g(struct hostapd_data *hapd, u8 *e
 u8 * hostapd_eid_txpower_envelope_vendor_mxl(struct hostapd_data *hapd, u8 *eid);
 void mxl_free_sta(struct hostapd_data *hapd, struct sta_info *sta);
 void mxl_cache_sta_deauth(struct hostapd_data *hapd, struct sta_info *sta);
+#ifdef CONFIG_SCS_MXL
+u8 * mxl_hostapd_eid_wce(struct hostapd_data *hapd, u8 *eid, size_t len);
+size_t mxl_hostapd_eid_wce_len(struct hostapd_data *hapd);
+#endif /* CONFIG_SCS_MXL */
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
 struct hostapd_data;
 
diff --git a/src/ap/mxl_ieee802_11_shared.c b/src/ap/mxl_ieee802_11_shared.c
index 72e0ed4f4..a95601fec 100644
--- a/src/ap/mxl_ieee802_11_shared.c
+++ b/src/ap/mxl_ieee802_11_shared.c
@@ -102,4 +102,32 @@ int mxl_get_non_tx_mlo_ie_len(struct hostapd_data *hapd, u8 *probe_req_mle, size
 	return len;
 }
 
+#ifdef CONFIG_SCS_MXL
+size_t mxl_hostapd_eid_wce_len(struct hostapd_data *hapd)
+{
+	if (mxl_is_mlo_enabled(hapd->conf))
+		return 8;
+	return 0;
+}
+
+u8 * mxl_hostapd_eid_wce(struct hostapd_data *hapd, u8 *eid, size_t len)
+{
+	size_t elen = mxl_hostapd_eid_wce_len(hapd);
+	u8 *pos = eid;
+	if (!mxl_is_mlo_enabled(hapd->conf))
+		return eid;
+	if (len < elen) {
+		wpa_printf(MSG_DEBUG,"WCE: Not enough room in buffer for Capabilities Element IE: buf len = %zu", len);
+		return eid;
+	}
+	*pos++ = WLAN_EID_VENDOR_SPECIFIC;
+	*pos++ = elen-2;
+	WPA_PUT_BE24(pos, OUI_WFA);
+	pos += 3;
+	*pos++ = WCE_OUI_TYPE;
+	*pos++ = 1;
+	*pos++ = WFA_QOS_MGMT_SCS_TRAFFIC_DESC;
+	return pos;
+}
+#endif /* CONFIG_SCS_MXL */
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
diff --git a/src/ap/mxl_sta_info.h b/src/ap/mxl_sta_info.h
index 51b5d47c5..6cc5376ae 100644
--- a/src/ap/mxl_sta_info.h
+++ b/src/ap/mxl_sta_info.h
@@ -26,6 +26,10 @@ struct mxl_sta_info {
 #ifdef CONFIG_EPCS_MXL
 	unsigned int epcs_supported:1;
 #endif /* CONFIG_EPCS_MXL */
+#ifdef CONFIG_SCS_MXL
+	unsigned int scs_supported:1;
+#endif /* CONFIG_SCS_MXL */
+
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
 };
 
diff --git a/src/ap/mxl_wmm.c b/src/ap/mxl_wmm.c
index 1268f3a16..de9ec2478 100644
--- a/src/ap/mxl_wmm.c
+++ b/src/ap/mxl_wmm.c
@@ -19,7 +19,7 @@
 #include "wmm.h"
 #include "mxl_wmm.h"
 #include "beacon.h"
-
+#include "common/mxl_wpa_ctrl.h"
 
 #ifdef CONFIG_EPCS_MXL
 /*
@@ -167,3 +167,212 @@ void mxl_hostapd_eht_protected(struct hostapd_data *hapd,
 			*action);
 }
 #endif /* CONFIG_EPCS_MXL */
+
+#ifdef CONFIG_SCS_MXL
+static void mxl_send_scs_resp(struct hostapd_data *hapd,
+			const struct ieee80211_mgmt *mgmt, int status)
+{
+	u8 buf[256];
+	struct ieee80211_mgmt *mgmt_resp = (struct ieee80211_mgmt *) buf;
+	struct sta_info *sta;
+	wpa_printf(MSG_DEBUG, "Send SCS Response");
+	sta = ap_get_sta(hapd, mgmt->sa);
+
+	if (sta == NULL) {
+		wpa_printf(MSG_ERROR, "SCS: mxl_send_scs_resp - station not connected");
+		return;
+	}
+
+	wpa_printf(MSG_DEBUG, "handle_scs_resp");
+	os_memset(buf, 0, sizeof(buf));
+	mgmt_resp->frame_control = IEEE80211_FC(WLAN_FC_TYPE_MGMT, WLAN_FC_STYPE_ACTION);
+	os_memcpy(mgmt_resp->da, mgmt->sa, ETH_ALEN);
+	os_memcpy(mgmt_resp->sa, hapd->own_addr, ETH_ALEN);
+	os_memcpy(mgmt_resp->bssid, hapd->own_addr, ETH_ALEN);
+
+	mgmt_resp->u.action.category = WLAN_ACTION_ROBUST_AV_STREAMING;
+	mgmt_resp->u.action.u.scs_action_resp.action = ROBUST_AV_SCS_RESP;
+	mgmt_resp->u.action.u.scs_action_resp.dialog_token = mgmt->u.action.u.scs_action_req.dialog_token;
+	mgmt_resp->u.action.u.scs_action_resp.count = 1;
+	mgmt_resp->u.action.u.scs_action_resp.scsId = mgmt->u.action.u.scs_action_req.scsId;
+	mgmt_resp->u.action.u.scs_action_resp.status = status;
+	if (hostapd_drv_send_mlme(hapd, mgmt_resp, IEEE80211_HDRLEN + sizeof(mgmt_resp->u.action.u.scs_action_resp) + sizeof(mgmt_resp->u.action.category), 0, NULL, 0, 0) < 0)
+		wpa_printf(MSG_DEBUG, "ROBUST AV scs_action_send_resp: send failed");
+}
+
+int mxl_scs_add_req(struct hostapd_data *hapd, const struct ieee80211_mgmt *mgmt, size_t len)
+{
+	const u8 *pos,*pos1;
+	pos = mgmt->u.action.u.scs_action_req.variable;
+	struct qos_characteristic_element *q = (struct qos_characteristic_element *) pos;
+	struct sta_info *sta;
+	struct mxl_scs_add_req scs_add_req;
+	os_memset(&scs_add_req, 0, sizeof(struct mxl_scs_add_req));
+
+	wpa_printf(MSG_DEBUG,"SCS: eid=%d,length=%d,eid_ext=%d",q->eid,q->length,q->eid_ext);
+
+	sta = ap_get_sta(hapd, mgmt->sa);
+	if (sta == NULL) {
+		wpa_printf(MSG_ERROR, "SCS: mxl_scs_add_req - station not connected");
+		return WLAN_STATUS_UNSPECIFIED_FAILURE;
+	}
+
+	if (!mxl_mlo_is_ml_sta(sta) && !(sta->mxl_sta_info.ext_flags & WLAN_STA_MLD_STA)) {
+		wpa_printf(MSG_ERROR, "SCS: mxl_scs_add_req - MLO not enabled/supported in station");
+		return WLAN_STATUS_UNSPECIFIED_FAILURE;
+	}
+
+	scs_add_req.aid = sta->aid;
+	scs_add_req.status = 0;
+	scs_add_req.scsid = mgmt->u.action.u.scs_action_req.scsId;
+	scs_add_req.minDataRate = q->minDataRate[0] | (q->minDataRate[1] << 8) | (q->minDataRate[2] << 16);
+	scs_add_req.delayBound = q->delayBound[0] | (q->delayBound[1] << 8) | (q->delayBound[2] << 16);
+	u32 ctrl_info = le_to_host32(q->ctrl_info);
+	scs_add_req.minServiceInterval = le_to_host32(q->minServiceInterval);
+	scs_add_req.maxServiceInterval = le_to_host32(q->maxServiceInterval);
+	scs_add_req.tid = QOS_CTRL_INFO_TID_MASK  &  ( ctrl_info >> QOS_CTRL_INFO_TID_SHIFT);
+	scs_add_req.userPrio = QOS_CTRL_INFO_USER_PRIORITY_MASK & (ctrl_info >> QOS_CTRL_INFO_USER_PRIORITY_SHIFT);
+	scs_add_req.bitmapNextParamPresence  = QOS_CTRL_INFO_BIT_MAP_MASK  & ( ctrl_info >> QOS_CTRL_INFO_BIT_MAP_SHIFT);
+	scs_add_req.linkId = QOS_CTRL_INFO_LINKID_MASK & ( ctrl_info >> QOS_CTRL_INFO_LINKID_SHIFT);
+
+	pos1 = q->variable;
+
+	if (scs_add_req.bitmapNextParamPresence & BIT(QOS_MAX_MSDU_SIZE)) {
+		os_memcpy(&(scs_add_req.maxMsduSize), pos1, sizeof(u16));
+		pos1 += sizeof(u16); // length of maxMsduSize
+	}
+
+	if (scs_add_req.bitmapNextParamPresence & BIT(QOS_SERVICE_START_TIME)) {
+		os_memcpy(&(scs_add_req.serviceStartTime), pos1, sizeof(u32));
+		pos1 += sizeof(u32); // length of serviceStartTime
+	}
+
+	if (scs_add_req.bitmapNextParamPresence & BIT(QOS_SERVICE_START_TIME_LINK_ID)) {
+		os_memcpy(&(scs_add_req.serviceStartTimeLinkId), pos1, sizeof(u8));
+		pos1 += sizeof(u8); // length of serviceStartTimeLinkId
+	}
+
+	if (scs_add_req.bitmapNextParamPresence & BIT(QOS_MEAN_DATA_RATE)) {
+		os_memcpy(&(scs_add_req.meanDataRate), pos1, 3 * sizeof(u8));
+		pos1 += 3 * sizeof(u8); // length of meanDataRate
+	}
+
+	if (scs_add_req.bitmapNextParamPresence & BIT(QOS_BURST_SIZE)) {
+		os_memcpy(&(scs_add_req.burstSize), pos1, sizeof(u32));
+		pos1 += sizeof(u32); // length of burstSize
+	}
+
+	if (scs_add_req.bitmapNextParamPresence & BIT(QOS_MSDU_LIFE_TIME)) {
+		os_memcpy(&(scs_add_req.msduLifeTime), pos1, sizeof(u16));
+		pos1 += sizeof(u16); // length of msduLifeTime
+	}
+
+	if (scs_add_req.bitmapNextParamPresence & BIT(QOS_MSDU_DELIVERY_RATIO)) {
+		os_memcpy(&(scs_add_req.msduDeliveryRatio), pos1, sizeof(u8));
+		pos1 += sizeof(u8); // length of msduDeliveryRatio
+	}
+
+	if (scs_add_req.bitmapNextParamPresence & BIT(QOS_MSDU_COUNT_EXPONENT)) {
+		os_memcpy(&(scs_add_req.msduCountExponent), pos1, sizeof(u8));
+		pos1 += sizeof(u8); // length of msduCountExponent
+	}
+
+	if (scs_add_req.bitmapNextParamPresence & BIT(QOS_MEDIUM_TIME)) {
+		os_memcpy(&(scs_add_req.mediumTime), pos1, sizeof(u16));
+		pos1 += sizeof(u16); // length of mediumTime
+	}
+
+	if (MXL_DRV_VENDOR_SET(LTQ_NL80211_VENDOR_SUBCMD_SCS_ADD_REQ,
+	    &scs_add_req, sizeof(struct mxl_scs_add_req))) {
+		wpa_printf(MSG_ERROR, "send LTQ_NL80211_VENDOR_SUBCMD_SEND_SCS_ADD_REQ failed!!!");
+		return WLAN_STATUS_UNSPECIFIED_FAILURE;
+	}
+	wpa_msg(hapd->msg_ctx, MSG_INFO, AP_STA_SCS_ADD);
+	wpa_msg_no_global(hapd->msg_ctx_parent, MSG_INFO, AP_STA_SCS_ADD);
+	return WLAN_STATUS_SUCCESS;
+}
+
+int mxl_scs_remove_req(struct hostapd_data *hapd,
+			const struct ieee80211_mgmt *mgmt, size_t len)
+{
+	struct sta_info *sta;
+	struct mxl_scs_rem_req scs_rem_req;
+	sta = ap_get_sta(hapd, mgmt->sa);
+
+	if (sta == NULL) {
+		wpa_printf(MSG_ERROR, "SCS: scs_rem_req - station not connected");
+		return WLAN_STATUS_UNSPECIFIED_FAILURE;
+	}
+
+	if (!mxl_mlo_is_ml_sta(sta) && !(sta->mxl_sta_info.ext_flags & WLAN_STA_MLD_STA)) {
+		wpa_printf(MSG_ERROR, "SCS: scs_rem_req - MLO not enabled/supported in station");
+		return WLAN_STATUS_UNSPECIFIED_FAILURE;
+	}
+
+	scs_rem_req.aid = sta->aid;
+	scs_rem_req.scsid = mgmt->u.action.u.scs_action_req.scsId;
+	if (MXL_DRV_VENDOR_SET(LTQ_NL80211_VENDOR_SUBCMD_SCS_REM_REQ,
+	    &scs_rem_req, sizeof(struct mxl_scs_rem_req))) {
+		wpa_printf(MSG_ERROR, "send LTQ_NL80211_VENDOR_SUBCMD_SEND_SCS_REM_REQ failed!!!");
+		//TODO: Modify the enum based on specification for varied failure reasons.
+		return WLAN_STATUS_UNSPECIFIED_FAILURE;
+	}
+	wpa_msg(hapd->msg_ctx, MSG_INFO, AP_STA_SCS_REM);
+	wpa_msg_no_global(hapd->msg_ctx_parent, MSG_INFO, AP_STA_SCS_REM);
+	return WLAN_STATUS_TCLAS_PROCESSING_TERMINATED;
+}
+
+void mxl_handle_scs_req(struct hostapd_data *hapd,
+			const struct ieee80211_mgmt *mgmt, size_t len)
+{
+	int status;
+	u8 eid = mgmt->u.action.u.scs_action_req.eid;
+	if(eid != WLAN_EID_SCS_DESCRIPTOR) {
+		wpa_printf(MSG_ERROR, "SCS: mxl_handle_scs_req - SCS Descriptor element is not present");
+		return;
+	}
+	u8 reqType =mgmt->u.action.u.scs_action_req.reqType;
+	wpa_printf(MSG_DEBUG, "SCS req_type =%d",reqType);
+	switch(reqType)
+	{
+		case SCS_REQ_ADD:
+			status = mxl_scs_add_req(hapd, mgmt,len);
+			mxl_send_scs_resp(hapd, mgmt, status);
+			break;
+		case SCS_REQ_REMOVE:
+			status = mxl_scs_remove_req(hapd, mgmt, len);
+			mxl_send_scs_resp(hapd, mgmt, status);
+			break;
+		default:
+			hostapd_logger(hapd, mgmt->sa, HOSTAPD_MODULE_IEEE80211,
+			        HOSTAPD_LEVEL_DEBUG,
+			        "hostapd_scs_req - unknown request type %d",
+			        reqType);
+			return;
+	}
+}
+
+void mxl_hostapd_scs_action(struct hostapd_data *hapd,
+			const struct ieee80211_mgmt *mgmt, size_t len)
+{
+	u8 *action = (u8 *) &mgmt->u.action.u;
+
+	if ((hapd->iconf->mxl_conf.mlo_supported == MULTILINK_DISABLED) && !mxl_is_mlo_enabled(hapd->conf)) {
+		wpa_printf(MSG_ERROR, "SCS: mxl_hostapd_scs_action - MLO is not supported/enabled in AP");
+		return;
+	}
+
+	switch (*action) {
+	case ROBUST_AV_SCS_REQ:
+		wpa_printf(MSG_DEBUG, "mxl_hostapd_scs_action: ROBUST_AV_SCS_REQ");
+		mxl_handle_scs_req(hapd, mgmt, len);
+		break;
+	default:
+		hostapd_logger(hapd, mgmt->sa, HOSTAPD_MODULE_IEEE80211,
+				   HOSTAPD_LEVEL_DEBUG,
+				   "mxl_hostapd_scs_action - unknown action code %d",
+				   *action);
+		break;
+	}
+}
+#endif /* CONFIG_SCS_MXL */
diff --git a/src/ap/mxl_wmm.h b/src/ap/mxl_wmm.h
index 0c725eb23..2fe1c9284 100644
--- a/src/ap/mxl_wmm.h
+++ b/src/ap/mxl_wmm.h
@@ -19,4 +19,11 @@ void mxl_hostapd_eht_protected(struct hostapd_data *hapd,
 			const struct ieee80211_mgmt *mgmt, size_t len);
 
 #endif /* CONFIG_EPCS_MXL */
+
+#ifdef CONFIG_SCS_MXL
+void mxl_hostapd_scs_action(struct hostapd_data *hapd, const struct ieee80211_mgmt *mgmt, size_t len);
+void mxl_handle_scs_req(struct hostapd_data *hapd, const struct ieee80211_mgmt *mgmt, size_t len);
+int mxl_scs_add_req(struct hostapd_data *hapd, const struct ieee80211_mgmt *mgmt, size_t len);
+int mxl_scs_remove_req(struct hostapd_data *hapd, const struct ieee80211_mgmt *mgmt, size_t len);
+#endif /* CONFIG_SCS_MXL */
 #endif /* MXL_WME_H */
diff --git a/src/common/ieee802_11_common.c b/src/common/ieee802_11_common.c
index 39cb219e4..2c27f1d8b 100644
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -143,6 +143,12 @@ static int ieee802_11_parse_vendor_specific(const u8 *pos, size_t elen,
 			elems->sae_pk = pos + 4;
 			elems->sae_pk_len = elen - 4;
 			break;
+#ifdef CONFIG_VENDOR_MXL
+		case WCE_OUI_TYPE:
+			elems->wfa_capability_elem = pos;
+			elems->wfa_capability_elem_len = elen;
+			break;
+#endif /* CONFIG_VENDOR_MXL */
 		default:
 			wpa_printf(MSG_MSGDUMP, "Unknown WFA "
 				   "information element ignored "
diff --git a/src/common/ieee802_11_common.h b/src/common/ieee802_11_common.h
index a8b106a65..f208d6374 100644
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -113,6 +113,7 @@ struct ieee802_11_elems {
 #ifdef CONFIG_VENDOR_MXL
 	const u8 *multilink_ie;
 	const u8 *non_inheritance;
+	const u8 *wfa_capability_elem;
 #endif /* CONFIG_VENDOR_MXL */
 	const u8 *multiple_bssid_index;
 
@@ -181,6 +182,7 @@ struct ieee802_11_elems {
 #ifdef CONFIG_VENDOR_MXL
 	u8 multilink_ie_len;
 	u8 non_inheritance_len;
+	u8 wfa_capability_elem_len;
 #endif /* CONFIG_VENDOR_MXL */
 
 	struct mb_ies_info mb_ies;
diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index 625263b98..c9fa1f5f3 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -1167,6 +1167,24 @@ struct ieee80211_mgmt {
 					u8 variable[];
 				} STRUCT_PACKED eht_epcs_req;
 #endif /* CONFIG_EPCS_MXL */
+#ifdef CONFIG_SCS_MXL
+				struct {
+					u8 action;
+					u8 dialog_token;
+					u8 eid;
+					u8 length;
+					u8 scsId;
+					u8 reqType;
+					u8 variable[];
+				}STRUCT_PACKED scs_action_req;
+				struct {
+					u8 action;
+					u8 dialog_token;
+					u8 count;
+					u8 scsId;
+					u16 status;
+				}STRUCT_PACKED scs_action_resp;
+#endif /* CONFIG_SCS_MXL */
 			} u;
 		} STRUCT_PACKED action;
 	} u;
diff --git a/src/common/mxl_ieee802_11_defs.h b/src/common/mxl_ieee802_11_defs.h
index 1db104964..b2ffdb7b1 100644
--- a/src/common/mxl_ieee802_11_defs.h
+++ b/src/common/mxl_ieee802_11_defs.h
@@ -82,6 +82,9 @@ struct rnr_neighbor_ap_info {
 #define RNR_TBTT_INFO_LEN_DIFFERENT_SSID 13
 #define RNR_TBTT_INFO_LEN_MLD            16
 
+#define WCE_IE_VENDOR_TYPE 0x506f9a23
+#define WCE_OUI_TYPE 0x23
+
 /* According to IEEE80211-2016 "The subfields of the
  * VHT Operation Information field are defined in Table 9-252.*/
 #define VHT_OPER_CHANWIDTH_20_40MHZ                     0
diff --git a/src/common/mxl_wpa_ctrl.h b/src/common/mxl_wpa_ctrl.h
index 9feec5d4b..848f33aa4 100644
--- a/src/common/mxl_wpa_ctrl.h
+++ b/src/common/mxl_wpa_ctrl.h
@@ -23,6 +23,11 @@
 #define ZWDFS_ANT_ENABLE "ZWDFS-ANT-ENABLE"
 #define ZWDFS_ANT_DISABLE "ZWDFS-ANT-DISABLE"
 
+#ifdef CONFIG_SCS_MXL
+#define AP_STA_SCS_ADD "AP-STA-SCS-ADD "
+#define AP_STA_SCS_REM "AP-STA-SCS-REM "
+#endif /* CONFIG_SCS_MXL */
+
 /* Event to indicate Sogtblock drop */
 #define LTQ_SOFTBLOCK_DROP "LTQ-SOFTBLOCK-DROP"
 
diff --git a/src/common/vendor_cmds_copy.h b/src/common/vendor_cmds_copy.h
index 1c45835f9..9feb28b1a 100644
--- a/src/common/vendor_cmds_copy.h
+++ b/src/common/vendor_cmds_copy.h
@@ -682,6 +682,35 @@ struct mxl_ml_sta_add_param {
   u16 aid;
 } __attribute__ ((packed));
 
+struct mxl_scs_add_req {
+  u16 aid;
+  u8  status;
+  u8  scsid;
+  u32 tid;
+  u32 userPrio;
+  u32 linkId;
+  u32 minServiceInterval;
+  u32 maxServiceInterval;
+  u32 minDataRate;
+  u32 bitmapNextParamPresence; // Bitmap to indicate presence (in the SCS original frame) of the below parameters
+  u32 delayBound;
+  u32 maxMsduSize;
+  u32 serviceStartTime;
+  u32 serviceStartTimeLinkId;
+  u32 meanDataRate;
+  u32 burstSize;
+  u16 msduLifeTime;
+  u8  msduDeliveryRatio;
+  u8  msduCountExponent;
+  u16 mediumTime;
+}__attribute__ ((packed));
+
+struct mxl_scs_rem_req {
+  u16 aid;
+  u8 status;
+  u8 scsid;
+}__attribute__ ((packed));
+
 struct mxl_ml_sta_t2lm_teardown {
   u16 aid;
 } __attribute__ ((packed));
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 96404492d..a9863313a 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -2892,6 +2892,11 @@ static int nl80211_action_subscribe_ap(struct i802_bss *bss)
 	if (nl80211_register_action_frame(bss, (u8 *) "\x25", 1) < 0)
 		ret = -1;
 #endif /* CONFIG_EPCS_MXL */
+#ifdef CONFIG_SCS_MXL
+	/* SCS Action frames*/
+	if (nl80211_register_action_frame(bss, (u8 *) "\x13", 1) < 0)
+		ret = -1;
+#endif /* CONFIG_SCS_MXL */
 #ifdef CONFIG_FST
 	/* FST Action frames */
 	if (nl80211_register_action_frame(bss, (u8 *) "\x12", 1) < 0)
-- 
2.43.0

