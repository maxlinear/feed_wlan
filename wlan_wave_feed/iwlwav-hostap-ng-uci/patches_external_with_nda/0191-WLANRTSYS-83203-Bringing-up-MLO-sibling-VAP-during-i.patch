From 9e10c0692917d4d7cf8b6763e81382dfc9ed114b Mon Sep 17 00:00:00 2001
From: "Maneendra,Pokuri Naga" <pnmaneendra@maxlinear.com>
Date: Mon, 29 Jul 2024 10:49:49 +0530
Subject: [PATCH] WLANRTSYS-83203 Bringing up MLO sibling VAP during init
 sequence Issue: During any MLO VAP removal sequence associated sibling VAP is
 also being brought down completely, and during init sequence sibling VAP is
 not coming up

Fix:
During any MLO VAP deinit sequence instead of completely removing the sibling VAP,
just deleting it in driver and retain the MLO configuration for sibling VAP in global MLD structure in hostapd.
and while setting up the MLO config any associated link will be able to find the sibling VAP based on the mld_mac addr,
and able to bring up the sibling VAP also

Fix up to WLANRTSYS-60843: MLO changes: AP MLD configuration

Signed-off-by: pnmaneendra pnmaneendra@maxlinear.com
---
 src/ap/hostapd.c     | 20 ++++++--------
 src/ap/mxl_hostapd.c | 22 +++++++--------
 src/ap/mxl_mld.c     | 65 ++++++++++++++++++++++++++++++++++++++++++++
 src/ap/mxl_mld.h     |  1 +
 4 files changed, 84 insertions(+), 24 deletions(-)

diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index c2c4d79ff..ad5096a22 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -4412,16 +4412,16 @@ static void hostapd_reconf_remove_bss(struct hostapd_iface *iface, int idx)
 	struct hostapd_data *sibling_hapd = NULL;
 	if (iface->conf->bss[idx]->mxl_bss_conf.mlo_enable) {
 		sibling_hapd = iface->bss[idx]->mxl_data.sibling_hapd;
-		if (sibling_hapd)
+		if (sibling_hapd) {
 			mxl_hostapd_remove_mld_vap(iface, idx);
+			hostapd_bss_deinit_no_free(sibling_hapd);
+			mxl_mlo_sibling_vap_drv_delete(iface->bss[idx]);
+		}
 
-		if (mxl_hostapd_deinit_gmld(iface->bss[idx]))
+		else if (mxl_hostapd_deinit_gmld(iface->bss[idx]))
 			wpa_printf(MSG_ERROR, "MLD deinit failed");
 	}
 	hostapd_remove_bss(iface, idx);
-	if (sibling_hapd) {
-		hostapd_remove_bss(sibling_hapd->iface, sibling_hapd->conf->bss_idx);
-	}
 #else
 	hostapd_remove_bss(iface, idx);
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
@@ -4634,9 +4634,11 @@ int hostapd_disable_iface(struct hostapd_iface *hapd_iface)
 				hostapd_cleanup_cs_params(sibling_hapd);
 				hostapd_cleanup_cca_params(sibling_hapd);
 				mxl_hostapd_remove_mld_vap(hapd_iface, j);
+				hostapd_bss_deinit_no_free(sibling_hapd);
+				mxl_mlo_sibling_vap_drv_delete(hapd);
 			}
 
-			if (mxl_hostapd_deinit_gmld(hapd_iface->bss[j])) {
+			else if (mxl_hostapd_deinit_gmld(hapd_iface->bss[j])) {
 				wpa_printf(MSG_ERROR, "MLD deinit failed");
 				return -1;
 			}
@@ -4644,12 +4646,6 @@ int hostapd_disable_iface(struct hostapd_iface *hapd_iface)
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
 		hostapd_bss_deinit_no_free(hapd);
 		hostapd_free_hapd_data(hapd);
-#ifdef CONFIG_IEEE80211BE_MXL_MLO
-		if (sibling_hapd) {
-			hostapd_bss_deinit_no_free(sibling_hapd);
-			hostapd_free_hapd_data(sibling_hapd);
-		}
-#endif /* CONFIG_IEEE80211BE_MXL_MLO */
 	}
 
 	hostapd_deinit_driver(driver, drv_priv, hapd_iface);
diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index 82a0fb867..762783c67 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -2595,20 +2595,19 @@ int mxl_hostapd_remove_iface(struct hostapd_iface *hapd_iface, unsigned int idx)
 
 	if (hapd_iface->conf->bss[idx]->mxl_bss_conf.mlo_enable) {
 		sibling_hapd = hapd_iface->bss[idx]->mxl_data.sibling_hapd;
-		if (sibling_hapd)
+		if (sibling_hapd) {
 			mxl_hostapd_remove_mld_vap(hapd_iface, idx);
+			hostapd_bss_deinit_no_free(sibling_hapd);
+			mxl_mlo_sibling_vap_drv_delete(hapd_iface->bss[idx]);
+		}
 
-		if (mxl_hostapd_deinit_gmld(hapd_iface->bss[idx])) {
+		else if (mxl_hostapd_deinit_gmld(hapd_iface->bss[idx])) {
 			wpa_printf(MSG_ERROR, "MLD deinit failed");
 			return -1;
 		}
 	}
 
 	mxl_hostapd_remove_bss(hapd_iface, idx);
-	if (sibling_hapd) {
-		mxl_hostapd_remove_bss(sibling_hapd->iface, sibling_hapd->conf->bss_idx);
-		sibling_hapd = NULL;
-	}
 
 	return 0;
 }
@@ -2641,18 +2640,17 @@ void mxl_mlo_hostapd_interface_deinit(struct hostapd_iface *iface)
 			break;
 		if(iface->conf->bss[j]->mxl_bss_conf.mlo_enable) {
 			sibling_hapd = iface->bss[j]->mxl_data.sibling_hapd;
-			if (sibling_hapd)
+			if (sibling_hapd) {
 				mxl_hostapd_remove_mld_vap(iface, j);
+				hostapd_bss_deinit_no_free(sibling_hapd);
+				mxl_mlo_sibling_vap_drv_delete(iface->bss[j]);
+			}
 
-			if (mxl_hostapd_deinit_gmld(iface->bss[j]))
+			else if (mxl_hostapd_deinit_gmld(iface->bss[j]))
 				wpa_printf(MSG_ERROR, "MLD deinit failed");
 		}
 
 		mxl_hostapd_bss_deinit(iface->bss[j]);
-		if (sibling_hapd) {
-			mxl_hostapd_remove_bss(sibling_hapd->iface, sibling_hapd->conf->bss_idx);
-			sibling_hapd = NULL;
-		}
 	}
 
 #ifdef NEED_AP_MLME
diff --git a/src/ap/mxl_mld.c b/src/ap/mxl_mld.c
index fd7ea08ba..e8d164a12 100644
--- a/src/ap/mxl_mld.c
+++ b/src/ap/mxl_mld.c
@@ -213,6 +213,7 @@ static int mxl_setup_link(struct p_ap_mld *mld)
 	struct _mxl_vendor_mld_info *mld_info;
 	struct _mxl_vendor_mld_link_info *mld_link_info;
 	struct hostapd_data *hapd = NULL;
+	u8 multibss_vap_mode = NON_MULTIBSS_VAP_MODE;
 	int ret = -1;
 
 	if (!link1 || !link2)
@@ -269,6 +270,39 @@ static int mxl_setup_link(struct p_ap_mld *mld)
 	mxl_hostapd_setup_wpa_mlo_linkid(link2);
 
 	/* set_beacon for each affiliated links */
+	/* if any sibling vap is removed in driver before previous toggle,
+	 *  will add the sibling VAP before setting the beacon for sibling VAP*/
+
+	if (!link1->drv_priv) {
+		char force_ifname[IFNAMSIZ];
+		u8 if_addr[ETH_ALEN];
+		link1->interface_added = 1;
+		if (hostapd_if_add(link1->iface->bss[0], WPA_IF_AP_BSS,
+			  link1->conf->iface, link1->own_addr, link1,
+			  &link1->drv_priv, force_ifname, if_addr,
+			  link1->conf->bridge[0] ? link1->conf->bridge : NULL, false)) {
+			wpa_printf(MSG_ERROR, "Failed to add Sibling BSS and going to error(BSSID="
+			    MACSTR ")", MAC2STR(link1->own_addr));
+			link1->interface_added = 0;
+			goto err;
+		}
+		if (link1->iconf->multibss_enable) {
+			if (MULTIBSS_REFERENCE_BSS_IDX == link1->conf->bss_idx) {
+				multibss_vap_mode = MULTIBSS_TRANSMITTED_VAP_MODE;
+			} else {
+				multibss_vap_mode = MULTIBSS_NON_TRANSMITTED_VAP_MODE;
+			}
+			if (hostapd_drv_set_mbssid_vap_mode(link1, multibss_vap_mode) < 0) {
+					wpa_printf(MSG_ERROR, "Failed to set MBSSID VAP");
+					goto err;
+			}
+			if (hostapd_drv_set_mbssid_num_vaps_in_group(link1, link1->iconf->num_bss - 1) < 0) {
+					wpa_printf(MSG_ERROR, "Failed to set MBSSID number of VAPs in group");
+					goto err;
+			}
+		}
+	}
+
 	ret = ieee802_11_set_beacon(link1);
 	if (ret < 0)
 		goto err;
@@ -1351,6 +1385,37 @@ int mxl_hostapd_mld_remove(struct hostapd_data *hapd, u8 sendto_fw)
 	return 0;
 }
 
+void mxl_mlo_sibling_vap_drv_delete (struct hostapd_data *hapd)
+{
+	struct p_ap_mld *p_ap_mld = NULL;
+	struct hostapd_data *sibling_hapd = NULL;
+
+	if (!hapd) {
+		wpa_printf(MSG_ERROR, "Hapd is NULL");
+		return;
+	}
+
+	p_ap_mld = &(hapd->iface->interfaces->mxl_interfaces.g_ap_mld[hapd->conf->mld_id]);
+	sibling_hapd = hapd->mxl_data.sibling_hapd;
+
+	p_ap_mld->num_links--;
+	p_ap_mld->affiliated_links[0] = hapd->mxl_data.sibling_hapd;
+	p_ap_mld->affiliated_links[1] = NULL;
+	sibling_hapd->conf->mxl_bss_conf.ml_ie_add = 0;
+	sibling_hapd->beacon_set_done = 0;
+	sibling_hapd->mxl_data.sibling_hapd = NULL;
+
+	/* deleting sibling interface from driver, and will be added during mxl_setup_link*/
+	if (sibling_hapd->interface_added) {
+		if (hostapd_if_remove(sibling_hapd, WPA_IF_AP_BSS, sibling_hapd->conf->iface)) {
+			wpa_printf(MSG_ERROR, "Failed to remove sibling BSS interface %s",sibling_hapd->conf->iface);
+		} else {
+				sibling_hapd->interface_added = 0;
+				mxl_hostapd_clear_drv_priv(sibling_hapd);
+			}
+	}
+}
+
 int mxl_ml_sta_add(struct hostapd_data *hapd, struct sta_info *sta)
 {
 	int res = 0;
diff --git a/src/ap/mxl_mld.h b/src/ap/mxl_mld.h
index 94efbdda5..97ad8919a 100644
--- a/src/ap/mxl_mld.h
+++ b/src/ap/mxl_mld.h
@@ -145,6 +145,7 @@ struct hapd_interfaces;
 struct csa_settings;
 int mxl_get_ml_probe_type_mld_id(const u8 * ml_ie, size_t ml_ie_len);
 int mxl_hostapd_mld_remove(struct hostapd_data *hapd, u8 sendto_fw);
+void mxl_mlo_sibling_vap_drv_delete(struct hostapd_data *hapd);
 
 /* Multi-Link element length */
 int mxl_hostapd_multilink_ie_len(struct hostapd_data *hapd, bool is_probe_req);
-- 
2.43.0

