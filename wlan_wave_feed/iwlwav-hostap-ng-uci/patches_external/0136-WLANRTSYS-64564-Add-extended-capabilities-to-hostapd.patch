From 7517595bd0656484e2ab43aca8d704263cb1d358 Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Thu, 21 Mar 2024 16:17:20 +0200
Subject: [PATCH] WLANRTSYS-64564 Add extended capabilities to hostapd_sta_add

---
 src/ap/ieee802_11.c     |  4 ++++
 src/ap/mxl_hostapd.c    | 21 +++++++++++++++++++++
 src/ap/mxl_hostapd.h    |  4 ++++
 src/ap/mxl_ieee802_11.c |  3 +++
 src/ap/mxl_wds.c        | 41 ++++-------------------------------------
 src/ap/sta_info.c       |  4 ++++
 src/ap/wds_wpa.c        | 18 +++---------------
 7 files changed, 43 insertions(+), 52 deletions(-)

diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index aec223210..6fb7a442b 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -5045,6 +5045,10 @@ static int add_associated_sta(struct hostapd_data *hapd,
 				      sta->eht_capab_len);
 #endif /* CONFIG_IEEE80211BE */
 
+#ifdef CONFIG_VENDOR_MXL
+	mxl_hostapd_sta_ext_capab_set(hapd, sta);
+#endif /* CONFIG_VENDOR_MXL */
+
 	/*
 	 * Add the station with forced WLAN_STA_ASSOC flag. The sta->flags
 	 * will be set when the ACK frame for the (Re)Association Response frame
diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index fa1d0f907..02c124a7a 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -88,6 +88,11 @@ void mxl_hostapd_sta_add_params(struct hostapd_data *hapd, struct hostapd_sta_ad
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
 	params->mxl_params.ml_sta_info = mxl_hostapd_ml_sta_info_get(hapd, params->addr);
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
+
+	if (hapd->mxl_data.ext_capab && hapd->mxl_data.ext_capab_len) {
+		params->ext_capab = hapd->mxl_data.ext_capab;
+		params->ext_capab_len = hapd->mxl_data.ext_capab_len;
+	}
 }
 
 int mxl_hostapd_get_aid(struct hostapd_data *hapd, struct sta_info *sta)
@@ -2796,3 +2801,19 @@ u8 * mxl_hostapd_eid_non_inheritance(struct hostapd_data *hapd, u8 *eid, bool is
 
 	return pos;
 }
+
+void mxl_hostapd_sta_ext_capab_reset(struct hostapd_data *hapd)
+{
+	hapd->mxl_data.ext_capab = NULL;
+	hapd->mxl_data.ext_capab_len = 0;
+}
+
+void mxl_hostapd_sta_ext_capab_set(struct hostapd_data *hapd, struct sta_info *sta)
+{
+	mxl_hostapd_sta_ext_capab_reset(hapd);
+
+	if (sta->ext_capability) {
+		hapd->mxl_data.ext_capab = &sta->ext_capability[1];
+		hapd->mxl_data.ext_capab_len = (size_t)sta->ext_capability[0];
+	}
+}
diff --git a/src/ap/mxl_hostapd.h b/src/ap/mxl_hostapd.h
index 119266624..28fa619cf 100644
--- a/src/ap/mxl_hostapd.h
+++ b/src/ap/mxl_hostapd.h
@@ -122,6 +122,8 @@ struct mxl_hostapd_data {
 	u8 sta_statistics_token;
 	struct hostapd_data *sibling_hapd;
 	u8 sibling_peer_addr[ETH_ALEN];
+	const u8 *ext_capab;
+	size_t ext_capab_len;
 };
 
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
@@ -217,6 +219,8 @@ void mxl_handle_deauth(struct hostapd_data *hapd, const struct ieee80211_mgmt *m
 void mxl_hostapd_set_wds_encryption(struct hostapd_data *hapd,
 					struct sta_info *sta,
 					char *ifname_wds);
+void mxl_hostapd_sta_ext_capab_reset(struct hostapd_data *hapd);
+void mxl_hostapd_sta_ext_capab_set(struct hostapd_data *hapd, struct sta_info *sta);
 int mxl_check_linked_sta_assoc_ies(struct hostapd_data *hapd, struct sta_info *sta,
 				struct ieee802_11_elems *elems, int reassoc);
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
diff --git a/src/ap/mxl_ieee802_11.c b/src/ap/mxl_ieee802_11.c
index c52c5900f..49ea5e3e1 100644
--- a/src/ap/mxl_ieee802_11.c
+++ b/src/ap/mxl_ieee802_11.c
@@ -718,6 +718,8 @@ int mxl_mlo_add_associated_sta(struct hostapd_data *hapd, struct sta_info *sta,
 		mxl_mlo_hostapd_prune_associations_mld_mac(hapd->mxl_data.sibling_hapd, sta);
 #endif /* CONFIG_IEEE80211BE */
 
+	mxl_hostapd_sta_ext_capab_set(hapd, sta);
+
 	/*
 	 * Add the station with forced WLAN_STA_ASSOC flag. The sta->flags
 	 * will be set when the ACK frame for the (Re)Association Response frame
@@ -770,6 +772,7 @@ int mxl_mlo_add_associated_sta(struct hostapd_data *hapd, struct sta_info *sta,
 
 		memcpy_s(ml_sta_info.linked_sta_mac, ETH_ALEN, sta1->mxl_sta_info.linked_sta->addr, ETH_ALEN);
 		mxl_hostapd_ml_sta_info_set(sta1, ml_sta_info);
+		mxl_hostapd_sta_ext_capab_set(hapd1, sta1);
 		if (hostapd_sta_add(hapd1, sta1->addr, sta1->aid, sta1->capability,
 				    sta1->supported_rates, sta1->supported_rates_len,
 				    sta1->listen_interval,
diff --git a/src/ap/mxl_wds.c b/src/ap/mxl_wds.c
index 687e278c5..540756ca6 100644
--- a/src/ap/mxl_wds.c
+++ b/src/ap/mxl_wds.c
@@ -247,9 +247,6 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
 	u16 resp, i, capab_info = 0;
 	int new_assoc = 1;
-	u8 *ext_capab = NULL;
-	u8 *ext_capab1 = NULL;
-	errno_t err;
 	bool is_both_ml_sta_assoc_received = true;
 	char *pifname = wds_sta->ifname;
 
@@ -474,18 +471,6 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 	}
 #endif /* CONFIG_IEEE80211BE */
 
-	if (is_both_ml_sta_assoc_received && sta->ext_capability) {
-		ext_capab = os_malloc(1 + sta->ext_capability[0]);
-		if (ext_capab) {
-			err = memcpy_s(ext_capab, 1 + sta->ext_capability[0],
-				 sta->ext_capability, 1 + sta->ext_capability[0]);
-			if (EOK != err) {
-				wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
-				os_free(ext_capab);
-				return;
-			}
-		}
-	}
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
 	if (hapd->conf->mxl_bss_conf.mlo_enable && (sta->mxl_sta_info.ext_flags & (WLAN_STA_MULTILINK))) {
 		os_memset(&ml_sta_info, 0, sizeof(ml_sta_info));
@@ -494,20 +479,11 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 			memcpy_s(ml_sta_info.linked_sta_mac, ETH_ALEN, sta->mxl_sta_info.linked_sta->addr, ETH_ALEN);
 		ml_sta_info.is_ml = true;
 		mxl_hostapd_ml_sta_info_set(sta, ml_sta_info);
-		if (is_both_ml_sta_assoc_received && sta->mxl_sta_info.linked_sta && sta->mxl_sta_info.linked_sta->ext_capability) {
-			ext_capab1 = os_malloc(1 + sta->mxl_sta_info.linked_sta->ext_capability[0]);
-			if (ext_capab1) {
-				err = memcpy_s(ext_capab1, 1 + sta->mxl_sta_info.linked_sta->ext_capability[0],
-				sta->mxl_sta_info.linked_sta->ext_capability, 1 + sta->mxl_sta_info.linked_sta->ext_capability[0]);
-				if (EOK != err) {
-					wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
-					os_free(ext_capab1);
-					return;
-				}
-			}
-		}
 	}
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
+
+	mxl_hostapd_sta_ext_capab_set(hapd, sta);
+
 	if (is_both_ml_sta_assoc_received && hostapd_sta_add(hapd, sta->addr, sta->aid, sta->capability,
 			sta->supported_rates, sta->supported_rates_len,
 			sta->listen_interval,
@@ -526,8 +502,6 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 			       HOSTAPD_LEVEL_NOTICE,
 			       "Could not add STA to kernel driver");
 		ap_free_sta(hapd, sta);
-		os_free(ext_capab);
-		os_free(ext_capab1);
 		return;
 	}
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
@@ -540,6 +514,7 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 				memcpy_s(ml_sta_info.linked_sta_mac, ETH_ALEN, sta1->mxl_sta_info.linked_sta->addr, ETH_ALEN);
 				ml_sta_info.is_ml = true;
 				mxl_hostapd_ml_sta_info_set(sta1, ml_sta_info);
+				mxl_hostapd_sta_ext_capab_set(hapd1, sta1);
 				if (hostapd_sta_add(hapd1, sta1->addr, sta1->aid, sta1->capability,
 					sta1->supported_rates, sta1->supported_rates_len,
 					sta1->listen_interval,
@@ -560,16 +535,12 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 							"Could not add STA1 to kernel driver");
 						ap_free_sta(hapd, sta);
 						ap_free_sta(hapd1, sta1);
-						os_free(ext_capab);
-						os_free(ext_capab1);
 						return;
 					}
 					if (mxl_ml_sta_add(hapd, sta) < 0) {
 						wpa_printf(MSG_ERROR,"ML STA ADD vendor cmd failed!!!");
 						ap_free_sta(hapd, sta);
 						ap_free_sta(hapd1, sta1);
-						os_free(ext_capab);
-						os_free(ext_capab1);
 						return;
 					}
 		}
@@ -577,8 +548,6 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 			if (mxl_ml_sta_add(hapd, sta) < 0) {
 				wpa_printf(MSG_ERROR,"ML STA ADD vendor cmd failed!!!");
 				ap_free_sta(hapd, sta);
-				os_free(ext_capab);
-				os_free(ext_capab1);
 				return;
 			}
 		}
@@ -608,8 +577,6 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 			HOSTAPD_LEVEL_INFO, "hostapd_wds_sta_connect: WDS STA connected");
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
 
-	os_free(ext_capab);
-	os_free(ext_capab1);
 }
 
 void mxl_wds_event_disconnect(struct hostapd_data *hapd,
diff --git a/src/ap/sta_info.c b/src/ap/sta_info.c
index 0b6dc4eea..6a9bdc083 100644
--- a/src/ap/sta_info.c
+++ b/src/ap/sta_info.c
@@ -2603,6 +2603,10 @@ int ap_sta_re_add(struct hostapd_data *hapd, struct sta_info *sta)
 	hostapd_drv_sta_remove(hapd, sta->addr);
 	sta->flags &= ~(WLAN_STA_ASSOC | WLAN_STA_AUTH | WLAN_STA_AUTHORIZED);
 
+#ifdef CONFIG_VENDOR_MXL
+	mxl_hostapd_sta_ext_capab_reset(hapd);
+#endif /* CONFIG_VENDOR_MXL */
+
 	if (hostapd_sta_add(hapd, sta->addr, 0, 0,
 			    sta->supported_rates,
 			    sta->supported_rates_len,
diff --git a/src/ap/wds_wpa.c b/src/ap/wds_wpa.c
index 88a33a520..20964ee4b 100644
--- a/src/ap/wds_wpa.c
+++ b/src/ap/wds_wpa.c
@@ -329,7 +329,6 @@ int ltq_wds_wpa_add(struct hostapd_data *hapd, const u8 *src)
 	u8 wpa_ie[80];
 	size_t wpa_ie_len;
 	int wps_state;
-	u8 *ext_capab = NULL;
 	struct ieee802_11_elems elems;
 
 	/* Check that station doesn't exist. We are allocating several
@@ -485,16 +484,6 @@ int ltq_wds_wpa_add(struct hostapd_data *hapd, const u8 *src)
 		hostapd_get_he_capab(hapd, sta->he_capab, &he_cap, sta->he_capab_len);
 	}
 #endif /* CONFIG_IEEE80211AX */
-	if (sta->ext_capability) {
-		ext_capab = os_malloc(1 + sta->ext_capability[0]);
-		if (ext_capab) {
-			err = memcpy_s(ext_capab, 1 + sta->ext_capability[0], sta->ext_capability, 1 + sta->ext_capability[0]);
-			if (EOK != err) {
-				wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
-				goto free_ext_capab;
-			}
-		}
-	}
 
 	sta->ssi_signal = -5000;
 	if (sta->wpa_sm == NULL)
@@ -512,6 +501,8 @@ int ltq_wds_wpa_add(struct hostapd_data *hapd, const u8 *src)
 			MAC2STR(src));
 	}
 
+	mxl_hostapd_sta_ext_capab_set(hapd, sta);
+
 	if (hostapd_sta_add(hapd, sta->addr, sta->aid, sta->capability,
 			sta->supported_rates, sta->supported_rates_len,
 			sta->listen_interval,
@@ -530,9 +521,8 @@ int ltq_wds_wpa_add(struct hostapd_data *hapd, const u8 *src)
 		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
 			HOSTAPD_LEVEL_NOTICE,
 			"Could not add STA to kernel driver");
-		goto free_ext_capab;
+			goto free_body;
 	}
-	os_free(ext_capab);
 	if (sta->wpa_sm &&
 		wpa_modify_wpa_ie(sta->wpa_sm, RSN_SELECTOR(0x00, 0x10, 0x18, 0), 0, -2)) {
 		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
@@ -561,8 +551,6 @@ int ltq_wds_wpa_add(struct hostapd_data *hapd, const u8 *src)
 
 sta_remove:
 	hostapd_drv_sta_remove(hapd, src);
-free_ext_capab:
-	os_free(ext_capab);
 free_body:
 	os_free(body);
 free_ap_params:
-- 
2.43.0

