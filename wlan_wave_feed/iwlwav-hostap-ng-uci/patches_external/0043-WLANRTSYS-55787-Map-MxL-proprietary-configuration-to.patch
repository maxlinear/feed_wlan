From a81db21cfbde5ac427767c6f031444be4b79592a Mon Sep 17 00:00:00 2001
From: Dmitrijs Martinovs <dmartinovs@maxlinear.com>
Date: Mon, 5 Jun 2023 11:42:39 +0300
Subject: [PATCH] WLANRTSYS-55787: Map MxL proprietary configuration to
 opensource

---
 hostapd/config_file.c | 21 +++++++++++++++------
 src/ap/ap_config.c    |  6 ++++++
 2 files changed, 21 insertions(+), 6 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 6883277d3..4ff1eaa45 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -3749,8 +3749,14 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 				   line, pos);
 			return 1;
 		}
-	} else if (os_strcmp(buf, "beacon_prot") == 0) {
-		bss->beacon_prot = atoi(pos);
+	// TODO: tmp solution - remake this to work with 1 parameter name
+	} else if (os_strcmp(buf, "beacon_prot") == 0 || os_strcmp(buf, "beacon_protection_enabled") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_BOOL_RANGE(val)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid beacon_prot or beacon_protection_enabled", line);
+			return 1;
+		}
+		bss->beacon_prot = val;
 	} else if (os_strcmp(buf, "assoc_sa_query_max_timeout") == 0) {
 		bss->assoc_sa_query_max_timeout = atoi(pos);
 		if (bss->assoc_sa_query_max_timeout == 0) {
@@ -3928,15 +3934,18 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		conf->color_coll_notify_interval = val;
 	} else if (os_strcmp(buf, "he_bss_color_partial") == 0) {
 		conf->he_op.he_bss_color_partial = atoi(pos);
-	} else if (os_strcmp(buf, "he_default_pe_duration") == 0) {
+	} else if (os_strcmp(buf, "he_default_pe_duration") == 0 || os_strcmp(buf, "he_operation_default_pe_duration") == 0) {
 		conf->he_op.he_default_pe_duration = atoi(pos);
 	} else if (os_strcmp(buf, "he_twt_required") == 0) {
 		conf->he_op.he_twt_required = atoi(pos);
-	} else if (os_strcmp(buf, "he_twt_responder") == 0) {
+	// TODO: tmp solution - remake this to work with 1 parameter name
+	} else if (os_strcmp(buf, "he_twt_responder") == 0 || os_strcmp(buf, "twt_responder_support") == 0) {
 		conf->he_op.he_twt_responder = atoi(pos);
-	} else if (os_strcmp(buf, "he_rts_threshold") == 0) {
+	// TODO: tmp solution - remake this to work with 1 parameter name
+	} else if (os_strcmp(buf, "he_rts_threshold") == 0 || os_strcmp(buf, "he_operation_txop_duration_rts_threshold") == 0) {
 		conf->he_op.he_rts_threshold = atoi(pos);
-	} else if (os_strcmp(buf, "he_er_su_disable") == 0) {
+	// TODO: tmp solution - remake this to work with 1 parameter name
+	} else if (os_strcmp(buf, "he_er_su_disable") == 0 || os_strcmp(buf, "he_operation_er_su_disable") == 0) {
 		conf->he_op.he_er_su_disable = atoi(pos);
 	} else if (os_strcmp(buf, "he_basic_mcs_nss_set") == 0) {
 		conf->he_op.he_basic_mcs_nss_set = atoi(pos);
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 7b73fbcaa..974957627 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -330,8 +330,14 @@ struct hostapd_config * hostapd_config_defaults(void)
 #endif /* CONFIG_ACS */
 
 #ifdef CONFIG_IEEE80211AX
+	// ToDo: set default from config
+#if 0
 	conf->he_op.he_rts_threshold = HE_OPERATION_RTS_THRESHOLD_MASK >>
 		HE_OPERATION_RTS_THRESHOLD_OFFSET;
+#else
+	conf->he_op.he_rts_threshold = 31;
+	conf->he_op.he_default_pe_duration = 4;
+#endif
 	/* Set default basic MCS/NSS set to single stream MCS 0-7 */
 	conf->he_op.he_basic_mcs_nss_set = 0xfffc;
 	conf->he_op.he_bss_color_disabled = 0;
-- 
2.43.0

