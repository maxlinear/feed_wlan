From 38eafd75bb6087beabcb336d3f7c2f341a310a48 Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Wed, 5 Jul 2023 15:21:13 +0200
Subject: [PATCH] WLANRTSYS-56718: IOP fixes implementation

- mask out ht and vht mcs bits
  this fix an IOP issue when connectong to old stations
  which not support the newer mcs bits in ht and vht capabilities
- mask out unsupported ht and vht caps
---
 hostapd/config_file.c     |  2 +
 src/ap/ap_config.c        |  1 +
 src/ap/ap_config.h        |  1 +
 src/ap/beacon.c           |  4 +-
 src/ap/ieee802_11.c       |  4 +-
 src/ap/ieee802_11.h       |  2 +-
 src/ap/ieee802_11_ht.c    | 28 ++++++++++++--
 src/ap/ieee802_11_vht.c   | 79 +++++++++++++++++++++++++++++++++++++++
 wpa_supplicant/mesh_mpm.c |  2 +-
 9 files changed, 114 insertions(+), 9 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index ad85f9bd7..d4b3c9e26 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -5851,6 +5851,8 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 			hostapd_whm_read_config(&conf->whm_cfg_flag, conf->whm_config_file);
 		else
 			wpa_printf(MSG_ERROR, "Error Reading whm config file");
+	} else if (os_strcmp(buf, "assoc_rsp_rx_mcs_mask") == 0) {
+		conf->assoc_rsp_rx_mcs_mask = atoi(pos);
 #ifdef CONFIG_VENDOR_MXL
 	} else if (mxl_hostapd_config_fill(conf, bss, buf, pos, line)) {
 #endif /* CONFIG_VENDOR_MXL */
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index f29cd1d9f..90c90a472 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -296,6 +296,7 @@ struct hostapd_config * hostapd_config_defaults(void)
 	conf->ap_table_max_size = 255;
 	conf->ap_table_expiration_time = 60;
 	conf->track_sta_max_age = 180;
+	conf->assoc_rsp_rx_mcs_mask = 1;
 	conf->sPowerSelection = 0; /* 100% */
 	conf->sInterferDetThresh = INTERFERENCE_DET_THRESH_DEFAULT;
 	conf->sDynamicMuTypeDownLink = 3;
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 1c5ad2434..0ddcf54d9 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1282,6 +1282,7 @@ struct hostapd_config {
 	u8 vht_oper_centr_freq_seg0_idx;
 	u8 vht_oper_centr_freq_seg1_idx;
 	u8 ht40_plus_minus_allowed;
+	int assoc_rsp_rx_mcs_mask;
 
 	/* Use driver-generated interface addresses when adding multiple BSSs */
 	u8 use_driver_iface_addr;
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index cc01a055e..a85a0f83c 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -810,7 +810,7 @@ static u8 * hostapd_probe_resp_fill_elems(struct hostapd_data *hapd,
 	}
 
 	pos = hostapd_eid_supported_op_classes(hapd, pos);
-	pos = hostapd_eid_ht_capabilities(hapd, pos);
+	pos = hostapd_eid_ht_capabilities(hapd, pos, NULL);
 	pos = hostapd_eid_ht_operation(hapd, pos);
 
 	/* Probe Response frames always include all non-TX profiles except
@@ -2406,7 +2406,7 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 	tailpos = csa_pos;
 
 	tailpos = hostapd_eid_supported_op_classes(hapd, tailpos);
-	tailpos = hostapd_eid_ht_capabilities(hapd, tailpos);
+	tailpos = hostapd_eid_ht_capabilities(hapd, tailpos, NULL);
 	tailpos = hostapd_eid_ht_operation(hapd, tailpos);
 
 	if (hapd->iconf->mbssid && hapd->iconf->num_bss > 1) {
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 34457c53e..79663695e 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -4442,7 +4442,7 @@ static size_t ieee80211_ml_build_assoc_resp(struct hostapd_data *hapd,
 	p = hostapd_eid_supp_rates(hapd, p);
 	p = hostapd_eid_ext_supp_rates(hapd, p);
 	p = hostapd_eid_rm_enabled_capab(hapd, p, buf + buflen - p);
-	p = hostapd_eid_ht_capabilities(hapd, p);
+	p = hostapd_eid_ht_capabilities(hapd, p, NULL);
 	p = hostapd_eid_ht_operation(hapd, p);
 
 	if (hapd->iconf->ieee80211ac && !hapd->conf->disable_11ac) {
@@ -4947,7 +4947,7 @@ static u16 send_assoc_resp(struct hostapd_data *hapd, struct sta_info *sta,
 	if (sta && status_code == WLAN_STATUS_ASSOC_REJECTED_TEMPORARILY)
 		p = hostapd_eid_assoc_comeback_time(hapd, sta, p);
 
-	p = hostapd_eid_ht_capabilities(hapd, p);
+	p = hostapd_eid_ht_capabilities(hapd, p, sta);
 	p = hostapd_eid_ht_operation(hapd, p);
 
 #ifdef CONFIG_IEEE80211AC
diff --git a/src/ap/ieee802_11.h b/src/ap/ieee802_11.h
index 1da08514e..b06b93b4a 100644
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -61,7 +61,7 @@ u8 * hostapd_eid_supp_rates(struct hostapd_data *hapd, u8 *eid);
 u8 * hostapd_eid_ext_supp_rates(struct hostapd_data *hapd, u8 *eid);
 u8 * hostapd_eid_rm_enabled_capab(struct hostapd_data *hapd, u8 *eid,
 				  size_t len);
-u8 * hostapd_eid_ht_capabilities(struct hostapd_data *hapd, u8 *eid);
+u8 * hostapd_eid_ht_capabilities(struct hostapd_data *hapd, u8 *eid, void *sta_info_struct);
 u8 * hostapd_eid_ht_operation(struct hostapd_data *hapd, u8 *eid);
 u8 * hostapd_eid_vht_capabilities(struct hostapd_data *hapd, u8 *eid, u32 nsts);
 u8 * hostapd_eid_vht_operation(struct hostapd_data *hapd, u8 *eid);
diff --git a/src/ap/ieee802_11_ht.c b/src/ap/ieee802_11_ht.c
index c2a390c39..b3e1738ac 100644
--- a/src/ap/ieee802_11_ht.c
+++ b/src/ap/ieee802_11_ht.c
@@ -24,10 +24,11 @@
 #endif
 
 
-u8 * hostapd_eid_ht_capabilities(struct hostapd_data *hapd, u8 *eid)
+u8 * hostapd_eid_ht_capabilities(struct hostapd_data *hapd, u8 *eid, void *sta_info_struct)
 {
 	struct ieee80211_ht_capabilities *cap;
 	u8 *pos = eid;
+	struct sta_info *sta = sta_info_struct;
 
 	if (!hapd->iconf->ieee80211n || !hapd->iface->current_mode ||
 	    hapd->conf->disable_11n || is_6ghz_op_class(hapd->iconf->op_class))
@@ -49,8 +50,19 @@ u8 * hostapd_eid_ht_capabilities(struct hostapd_data *hapd, u8 *eid)
 
 	cap->a_mpdu_params |= (hapd->iconf->ht_cap_ampdu_parameters);
 
-	os_memcpy(cap->supported_mcs_set, hapd->iface->current_mode->mcs_set,
-		  16);
+	/* Special case for ASSOC RESP:
+	 * mask out RX MCS Set as a workoaround for some STA vendors
+	 */
+	if (hapd->iconf->assoc_rsp_rx_mcs_mask && sta && sta->ht_capabilities) {
+		int i;
+		for (i = 0; i < sizeof(cap->supported_mcs_set); i++) {
+			cap->supported_mcs_set[i] =
+				hapd->iface->current_mode->mcs_set[i] & sta->ht_capabilities->supported_mcs_set[i];
+		}
+	} else {
+		os_memcpy(cap->supported_mcs_set, hapd->iface->current_mode->mcs_set,
+			  16);
+	}
 	/* tx_bf_capability_info */
 	cap->tx_bf_capability_info = host_to_le32(hapd->iconf->ht_tx_bf_capab);
 	/* TODO: ht_extended_capabilities (now fully disabled) */
@@ -529,6 +541,7 @@ void hostapd_get_ht_capab(struct hostapd_data *hapd,
 			  struct ieee80211_ht_capabilities *neg_ht_cap)
 {
 	u16 cap;
+	int i;
 
 	if (ht_cap == NULL)
 		return;
@@ -553,7 +566,16 @@ void hostapd_get_ht_capab(struct hostapd_data *hapd,
 	if (!(hapd->iconf->ht_capab & HT_CAP_INFO_TX_STBC))
 		cap &= ~HT_CAP_INFO_RX_STBC_MASK;
 
+	/* if we don't support RX LDPC, mask out LDPC for TX in the STA's HT caps */
+	if (!(hapd->iconf->ht_capab & HT_CAP_INFO_LDPC_CODING_CAP))
+		cap &= ~HT_CAP_INFO_LDPC_CODING_CAP;
+
 	neg_ht_cap->ht_capabilities_info = host_to_le16(cap);
+
+	/* mask out supported MCS set vs our own MCS set */
+	for (i = 0; i < sizeof(neg_ht_cap->supported_mcs_set); i++) {
+		neg_ht_cap->supported_mcs_set[i] = ht_cap->supported_mcs_set[i] & hapd->iface->current_mode->mcs_set[i];
+	}
 }
 
 
diff --git a/src/ap/ieee802_11_vht.c b/src/ap/ieee802_11_vht.c
index e61e136c4..607209529 100644
--- a/src/ap/ieee802_11_vht.c
+++ b/src/ap/ieee802_11_vht.c
@@ -334,6 +334,39 @@ u16 set_sta_vht_opmode(struct hostapd_data *hapd, struct sta_info *sta,
 }
 
 
+#ifndef MIN
+#define MIN(x,y) ((x) < (y) ? (x) : (y))
+#endif
+
+static inline u16 limit_rx_tx_highest (u16 x, u16 y) {
+	u16 res = 0;
+	x = le_to_host16(x);
+	y = le_to_host16(y);
+	if (!x)
+		res = y;
+	else if (!y)
+		res = x;
+	else
+		res = MIN(x, y);
+	return host_to_le16(res);
+}
+
+static inline u16 limit_rx_tx_map (u16 x, u16 y) {
+	u16 res = 0;
+	int i;
+	for (i = 0; i < 16; i+=2) {
+		u16 mask = 3 << i;
+		u16 r1 = x & mask;
+		u16 r2 = y & mask;
+		if (r1 == mask || r2 == mask) {
+			res |= mask;
+		} else {
+			res |= MIN(r1, r2);
+		}
+	}
+	return res;
+}
+
 void hostapd_get_vht_capab(struct hostapd_data *hapd,
 			   struct ieee80211_vht_capabilities *vht_cap,
 			   struct ieee80211_vht_capabilities *neg_vht_cap)
@@ -393,5 +426,51 @@ void hostapd_get_vht_capab(struct hostapd_data *hapd,
 	if (!(own_cap & VHT_CAP_TXSTBC))
 		cap &= ~VHT_CAP_RXSTBC_MASK;
 
+	/* if we don't support RX LDPC, mask out LDPC for TX in the STA's VHT caps */
+	if (!(own_cap & VHT_CAP_RXLDPC))
+		cap &= ~VHT_CAP_RXLDPC;
+
 	neg_vht_cap->vht_capabilities_info = host_to_le32(cap);
+
+	/* mask out supported MCS set vs our own MCS set */
+	{
+		errno_t err;
+		u16 our_mcs_set[4];
+		struct hostapd_hw_modes *mode = hapd->iface->current_mode;
+
+		if (mode->mode == HOSTAPD_MODE_IEEE80211G && hapd->conf->vendor_vht &&
+		    mode->vht_capab == 0 && hapd->iface->hw_features) {
+			int i;
+
+			for (i = 0; i < hapd->iface->num_hw_features; i++) {
+				if (hapd->iface->hw_features[i].mode ==
+				    HOSTAPD_MODE_IEEE80211A) {
+					mode = &hapd->iface->hw_features[i];
+					break;
+				}
+			}
+		}
+
+		err = memcpy_s(our_mcs_set, sizeof(our_mcs_set), mode->vht_mcs_set, sizeof(mode->vht_mcs_set));
+		if (EOK != err) {
+			wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
+			return;
+		}
+
+		/* RX highest vs our TX highest*/
+		neg_vht_cap->vht_supported_mcs_set.rx_highest =
+			limit_rx_tx_highest(neg_vht_cap->vht_supported_mcs_set.rx_highest, our_mcs_set[3]);
+
+		/* TX highest vs our RX highest*/
+		neg_vht_cap->vht_supported_mcs_set.tx_highest =
+			limit_rx_tx_highest(neg_vht_cap->vht_supported_mcs_set.tx_highest, our_mcs_set[1]);
+
+		/* RX map vs our TX map */
+		neg_vht_cap->vht_supported_mcs_set.rx_map =
+			limit_rx_tx_map(neg_vht_cap->vht_supported_mcs_set.rx_map, our_mcs_set[2]);
+
+		/* TX map vs our RX map */
+		neg_vht_cap->vht_supported_mcs_set.tx_map =
+			limit_rx_tx_map(neg_vht_cap->vht_supported_mcs_set.tx_map, our_mcs_set[0]);
+	}
 }
diff --git a/wpa_supplicant/mesh_mpm.c b/wpa_supplicant/mesh_mpm.c
index 138c01399..a8c6352af 100644
--- a/wpa_supplicant/mesh_mpm.c
+++ b/wpa_supplicant/mesh_mpm.c
@@ -367,7 +367,7 @@ static void mesh_mpm_send_plink_action(struct wpa_supplicant *wpa_s,
 	if (type != PLINK_CLOSE && wpa_s->mesh_ht_enabled) {
 		u8 ht_capa_oper[2 + 26 + 2 + 22];
 
-		pos = hostapd_eid_ht_capabilities(bss, ht_capa_oper);
+		pos = hostapd_eid_ht_capabilities(bss, ht_capa_oper, NULL);
 		pos = hostapd_eid_ht_operation(bss, pos);
 		wpabuf_put_data(buf, ht_capa_oper, pos - ht_capa_oper);
 	}
-- 
2.43.0

