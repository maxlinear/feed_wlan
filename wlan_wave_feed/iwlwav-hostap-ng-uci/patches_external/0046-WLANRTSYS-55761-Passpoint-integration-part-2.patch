From 91a37466493b339fd35fbfa5ce093409292fc09f Mon Sep 17 00:00:00 2001
From: Dmitrijs Martinovs <dmartinovs@maxlinear.com>
Date: Tue, 30 May 2023 15:47:20 +0300
Subject: [PATCH] WLANRTSYS-55761: Passpoint integration part 2

---
 hostapd/config_file.c      | 18 +++++++++++++++
 hostapd/ctrl_iface.c       | 44 +++++++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c      | 47 +++++++++++++++++++-------------------
 hostapd/mxl_config.c       |  2 ++
 src/ap/ap_config.h         |  8 +++++++
 src/ap/beacon.c            |  1 -
 src/ap/gas_serv.c          | 12 ++++++++++
 src/ap/ieee802_11.c        | 29 +++++++++++++++++++++++
 src/ap/ieee802_11.h        |  2 ++
 src/ap/ieee802_11_shared.c |  2 +-
 src/common/wpa_ctrl.h      |  2 ++
 11 files changed, 142 insertions(+), 25 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index f0df44170..9f17d7a9e 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -3735,6 +3735,8 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		}
 	} else if (os_strcmp(buf, "use_driver_iface_addr") == 0) {
 		conf->use_driver_iface_addr = atoi(pos);
+	} else if (os_strcmp(buf, "notify_action_frame") == 0) {
+		conf->notify_action_frame = atoi(pos);
 	} else if (os_strcmp(buf, "ieee80211w") == 0) {
 		bss->ieee80211w = atoi(pos);
 	} else if (os_strcmp(buf, "group_mgmt_cipher") == 0) {
@@ -4527,6 +4529,15 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 			return 1;
 		}
 		bss->hs20_release = val;
+	} else if (os_strcmp(buf, "offload_gas") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_BOOL_RANGE(val)) {
+			wpa_printf(MSG_ERROR,
+				   "Line %d: invalid offload_gas value: %s",
+				   line, pos);
+			return 1;
+		}
+		bss->offload_gas = val;
 	} else if (os_strcmp(buf, "disable_dgaf") == 0) {
 		bss->disable_dgaf = atoi(pos);
 	} else if (os_strcmp(buf, "na_mcast_to_ucast") == 0) {
@@ -5425,6 +5436,13 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 			return 1;
 		}
 		conf->override_6g_mbssid_default_mode = val;
+	} else if (os_strcmp(buf, "adv_proto_query_resp_len") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_RANGE(val, ADV_PROTO_QUERY_RESP_LEN_MIN, ADV_PROTO_QUERY_RESP_LEN_MAX)) {
+			wpa_printf(MSG_ERROR, "line %d: invalid adv_proto_query_resp_len %d", line, val);
+			return 1;
+		}
+		conf->adv_proto_query_resp_len = (unsigned)val;
 	} else if (os_strcmp(buf, "owl") == 0) {
 		int val = atoi(pos);
 		if (!IS_VALID_BOOL_RANGE(val)) {
diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 8f1a071ff..50d308ab2 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -626,6 +626,17 @@ static int hostapd_ctrl_iface_hs20_wnm_notif(struct hostapd_data *hapd,
 	u8 addr[ETH_ALEN];
 	const char *url;
 
+	hapd = mxl_get_bss_index(cmd, hapd->iface);
+	if (NULL == hapd) {
+		return -1;
+	}
+
+	cmd = os_strchr(cmd, ' ');
+	if (NULL == cmd) {
+		return -1;
+	}
+	cmd++;
+
 	if (hwaddr_aton(cmd, addr))
 		return -1;
 	url = cmd + 17;
@@ -652,6 +663,17 @@ static int hostapd_ctrl_iface_hs20_deauth_req(struct hostapd_data *hapd,
 	size_t url_len;
 	struct wpabuf *req;
 
+	hapd = mxl_get_bss_index(cmd, hapd->iface);
+	if (NULL == hapd) {
+		return -1;
+	}
+
+	cmd = os_strchr(cmd, ' ');
+	if (NULL == cmd) {
+		return -1;
+	}
+	cmd++;
+
 	/* <STA MAC Addr> <Code(0/1)> <Re-auth-Delay(sec)> [URL] */
 	if (hwaddr_aton(cmd, addr))
 		return -1;
@@ -704,6 +726,17 @@ static int hostapd_ctrl_iface_set_qos_map_set(struct hostapd_data *hapd,
 	const char *pos = cmd;
 	int val, ret;
 
+	hapd = mxl_get_bss_index(pos, hapd->iface);
+	if (NULL == hapd) {
+		return -1;
+	}
+
+	pos = os_strchr(pos, ' ');
+	if (NULL == pos) {
+		return -1;
+	}
+	pos++;
+
 	for (;;) {
 		if (count == sizeof(qos_map_set)) {
 			wpa_printf(MSG_ERROR, "Too many qos_map_set parameters");
@@ -751,6 +784,17 @@ static int hostapd_ctrl_iface_send_qos_map_conf(struct hostapd_data *hapd,
 	u8 qos_map_set_len = hapd->conf->qos_map_set_len;
 	int ret;
 
+	hapd = mxl_get_bss_index(cmd, hapd->iface);
+	if (NULL == hapd) {
+		return -1;
+	}
+
+	cmd = os_strchr(cmd, ' ');
+	if (NULL == cmd) {
+		return -1;
+	}
+	cmd++;
+
 	if (!qos_map_set_len) {
 		wpa_printf(MSG_INFO, "QoS Map Set is not set");
 		return -1;
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index e08187d26..e4968223c 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -877,14 +877,14 @@ static int hostapd_cli_cmd_set_qos_map_set(struct wpa_ctrl *ctrl,
 	char buf[200];
 	int res;
 
-	if (argc != 1) {
+	if (argc != 2) {
 		printf("Invalid 'set_qos_map_set' command - "
-		       "one argument (comma delimited QoS map set) "
-		       "is needed\n");
+		       "two arguments (BSS name and comma delimited QoS map set) "
+		       "are needed\n");
 		return -1;
 	}
 
-	res = os_snprintf(buf, sizeof(buf), "SET_QOS_MAP_SET %s", argv[0]);
+	res = os_snprintf(buf, sizeof(buf), "SET_QOS_MAP_SET %s %s", argv[0], argv[1]);
 	if (os_snprintf_error(sizeof(buf), res))
 		return -1;
 	return wpa_ctrl_command(ctrl, buf);
@@ -897,13 +897,13 @@ static int hostapd_cli_cmd_send_qos_map_conf(struct wpa_ctrl *ctrl,
 	char buf[50];
 	int res;
 
-	if (argc != 1) {
+	if (argc != 2) {
 		printf("Invalid 'send_qos_map_conf' command - "
-		       "one argument (STA addr) is needed\n");
+		       "two arguments (BSS name and STA addr) are needed\n");
 		return -1;
 	}
 
-	res = os_snprintf(buf, sizeof(buf), "SEND_QOS_MAP_CONF %s", argv[0]);
+	res = os_snprintf(buf, sizeof(buf), "SEND_QOS_MAP_CONF %s %s", argv[0], argv[1]);
 	if (os_snprintf_error(sizeof(buf), res))
 		return -1;
 	return wpa_ctrl_command(ctrl, buf);
@@ -916,14 +916,14 @@ static int hostapd_cli_cmd_hs20_wnm_notif(struct wpa_ctrl *ctrl, int argc,
 	char buf[300];
 	int res;
 
-	if (argc < 2) {
-		printf("Invalid 'hs20_wnm_notif' command - two arguments (STA "
-		       "addr and URL) are needed\n");
+	if (argc < 3) {
+		printf("Invalid 'hs20_wnm_notif' command - three arguments ("
+		       "BSS name, STA addr and URL) are needed\n");
 		return -1;
 	}
 
-	res = os_snprintf(buf, sizeof(buf), "HS20_WNM_NOTIF %s %s",
-			  argv[0], argv[1]);
+	res = os_snprintf(buf, sizeof(buf), "HS20_WNM_NOTIF %s %s %s",
+			  argv[0], argv[1], argv[2]);
 	if (os_snprintf_error(sizeof(buf), res))
 		return -1;
 	return wpa_ctrl_command(ctrl, buf);
@@ -936,19 +936,20 @@ static int hostapd_cli_cmd_hs20_deauth_req(struct wpa_ctrl *ctrl, int argc,
 	char buf[300];
 	int res;
 
-	if (argc < 3) {
-		printf("Invalid 'hs20_deauth_req' command - at least three arguments (STA addr, Code, Re-auth Delay) are needed\n");
+	if (argc < 4) {
+		printf("Invalid 'hs20_deauth_req' command - at least four arguments ("
+		       "BSS name STA addr, Code, Re-auth Delay) are needed\n");
 		return -1;
 	}
 
-	if (argc > 3)
+	if (argc > 4)
 		res = os_snprintf(buf, sizeof(buf),
-				  "HS20_DEAUTH_REQ %s %s %s %s",
-				  argv[0], argv[1], argv[2], argv[3]);
+				  "HS20_DEAUTH_REQ %s %s %s %s %s",
+				  argv[0], argv[1], argv[2], argv[3], argv[4]);
 	else
 		res = os_snprintf(buf, sizeof(buf),
-				  "HS20_DEAUTH_REQ %s %s %s",
-				  argv[0], argv[1], argv[2]);
+				  "HS20_DEAUTH_REQ %s %s %s %s",
+				  argv[0], argv[1], argv[2], argv[3]);
 	if (os_snprintf_error(sizeof(buf), res))
 		return -1;
 	return wpa_ctrl_command(ctrl, buf);
@@ -2311,7 +2312,7 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	  "<arg,arg,...> = set QoS Map set element" },
 	{ "send_qos_map_conf", hostapd_cli_cmd_send_qos_map_conf,
 	  hostapd_complete_stations,
-	  "<addr> = send QoS Map Configure frame" },
+	  "<BSS name> <addr> = send QoS Map Configure frame" },
 	{ "chan_switch", hostapd_cli_cmd_chan_switch, NULL,
 	  "<cs_count> <freq> [sec_channel_offset=] [center_freq1=]\n"
 	  "  [center_freq2=] [bandwidth=] [blocktx] [ht|vht]\n"
@@ -2319,10 +2320,10 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	{ "notify_cw_change", hostapd_cli_cmd_notify_cw_change, NULL,
 	  "<channel_width> = 0 - 20 MHz, 1 - 40 MHz, 2 - 80 MHz, 3 - 160 MHz" },
 	{ "hs20_wnm_notif", hostapd_cli_cmd_hs20_wnm_notif, NULL,
-	  "<addr> <url>\n"
+	  "<BSS name> <addr> <url>\n"
 	  "  = send WNM-Notification Subscription Remediation Request" },
 	{ "hs20_deauth_req", hostapd_cli_cmd_hs20_deauth_req, NULL,
-	  "<addr> <code (0/1)> <Re-auth-Delay(sec)> [url]\n"
+	  "<BSS name> <addr> <code (0/1)> <Re-auth-Delay(sec)> [url]\n"
 	  "  = send WNM-Notification imminent deauthentication indication" },
 	{ "vendor", hostapd_cli_cmd_vendor, NULL,
 	  "<vendor id> <sub command id> [<hex formatted data>]\n"
@@ -2493,7 +2494,7 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	{ "send_action_frame", hostapd_cli_cmd_send_action_frame, NULL,
 	  "<bss> <mac_addr> <freq> frame=<frame_buf>" },
 	{ "update_wan_metrics", hostapd_cli_cmd_update_wan_metrics, NULL,
-	  "<WAN Info>:<DL Speed>:<UL Speed>:<DL Load>:<UL Load>:<LMD> = update_wan_metrics" },
+	  "<BSS name> <WAN Info>:<DL Speed>:<UL Speed>:<DL Load>:<UL Load>:<LMD> = update_wan_metrics" },
 #ifdef CONFIG_MBO
 	{ "mbo_bss_assoc_disallow", hostapd_cli_cmd_mbo_bss_assoc_disallow, NULL,
 	  " = set mbo bss assoc disallow"},
diff --git a/hostapd/mxl_config.c b/hostapd/mxl_config.c
index 131923c01..39401500d 100644
--- a/hostapd/mxl_config.c
+++ b/hostapd/mxl_config.c
@@ -232,6 +232,8 @@ void mxl_hostapd_config_defaults(struct hostapd_config *conf)
 	mxl_conf->scan_activity_threshold = SCAN_ACTIVITY_THRESHOLD_DEFAULT;
 	mxl_conf->obss_beacon_rssi_threshold = -60;
 
+	/* Advertisement protocol IE */
+	conf->adv_proto_query_resp_len = ADV_PROTO_QUERY_RESP_LEN_DEFAULT;
 	mxl_conf->event_cache_interval = 1;
 
 }
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 29efea15a..ba50bbcf4 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -685,6 +685,7 @@ struct hostapd_bss_config {
 #ifdef CONFIG_HS20
 	int hs20;
 	int hs20_release;
+	int offload_gas;
 	int disable_dgaf;
 	u16 anqp_domain_id;
 	unsigned int hs20_oper_friendly_name_count;
@@ -1375,10 +1376,12 @@ struct hostapd_config {
 		ENHANCED_MBSSID_ENABLED = 2,
 	} mbssid;
 
+	u8 notify_action_frame; /* Forwarding incoming action frames to upper layers */
 #define DEFAULT_MU_OPERATION	1
 	int sMuOperation;
 	int override_6g_mbssid_default_mode;
 	int whm_cfg_flag;	/* WHM configuration bitfields */
+	unsigned adv_proto_query_resp_len;	/* Advertisement protocol IE */
 
 	u8 owl; /* Forwarding incoming probe reqests to upper layers */
 #ifdef CONFIG_IEEE80211AX
@@ -1488,6 +1491,11 @@ hostapd_set_oper_centr_freq_seg1_idx(struct hostapd_config *conf,
 	conf->vht_oper_centr_freq_seg1_idx = oper_centr_freq_seg1_idx;
 }
 
+/* Advertisement protocol IE*/
+#define ADV_PROTO_QUERY_RESP_LEN_MIN		1u
+#define ADV_PROTO_QUERY_RESP_LEN_MAX		0x7fu
+#define ADV_PROTO_QUERY_RESP_LEN_DEFAULT	0x7fu
+#define ADV_PROTO_QUERY_RESP_LEN_MASK		ADV_PROTO_QUERY_RESP_LEN_MAX
 
 int hostapd_mac_comp(const void *a, const void *b);
 struct hostapd_config * hostapd_config_defaults(void);
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index 64af2ce2f..0e42acb28 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -2379,7 +2379,6 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 	tailpos = hostapd_eid_ext_supp_rates(hapd, tailpos);
 
 	tailpos = hostapd_get_rsne(hapd, tailpos, tailend - tailpos);
-	tailpos = hostapd_eid_bss_load(hapd, tailpos, tailend - tailpos);
 	tailpos = hostapd_eid_rm_enabled_capab(hapd, tailpos,
 					       tailend - tailpos);
 
diff --git a/src/ap/gas_serv.c b/src/ap/gas_serv.c
index b3b92ba81..3355e6c96 100644
--- a/src/ap/gas_serv.c
+++ b/src/ap/gas_serv.c
@@ -19,6 +19,7 @@
 #include "dpp_hostapd.h"
 #include "sta_info.h"
 #include "gas_serv.h"
+#include "ieee802_11.h"
 
 
 #ifdef CONFIG_DPP
@@ -1860,6 +1861,12 @@ send_resp:
 	wpabuf_free(tx_buf);
 }
 
+static void _notify_gas_msg(struct hostapd_data *hapd, const u8 *action_frame,
+			      size_t length)
+{
+	if (!hapd->iconf->notify_action_frame)
+		notify_action_frame(hapd, action_frame, length);
+}
 
 static void gas_serv_rx_public_action(void *ctx, const u8 *buf, size_t len,
 				      int freq)
@@ -1868,6 +1875,7 @@ static void gas_serv_rx_public_action(void *ctx, const u8 *buf, size_t len,
 	const struct ieee80211_mgmt *mgmt;
 	const u8 *sa, *data;
 	int prot, std_addr3;
+	int orig_len = len;
 
 	mgmt = (const struct ieee80211_mgmt *) buf;
 	if (len < IEEE80211_HDRLEN + 2)
@@ -1892,10 +1900,14 @@ static void gas_serv_rx_public_action(void *ctx, const u8 *buf, size_t len,
 	data = buf + IEEE80211_HDRLEN + 1;
 	switch (data[0]) {
 	case WLAN_PA_GAS_INITIAL_REQ:
+		if (hapd->conf->offload_gas)
+			return _notify_gas_msg(hapd, buf, orig_len);
 		gas_serv_rx_gas_initial_req(hapd, sa, data + 1, len - 1, prot,
 					    std_addr3, freq);
 		break;
 	case WLAN_PA_GAS_COMEBACK_REQ:
+		if (hapd->conf->offload_gas)
+			return _notify_gas_msg(hapd, buf, orig_len);
 		gas_serv_rx_gas_comeback_req(hapd, sa, data + 1, len - 1, prot,
 					     std_addr3);
 		break;
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 618b10e11..2081910cb 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -6034,6 +6034,32 @@ static int robust_action_frame(u8 category)
 }
 
 
+void notify_action_frame(struct hostapd_data *hapd, const u8 *action_frame,
+			      size_t length)
+{
+	int ret, str_len = length * 2 + 1;
+	char *buf = os_malloc(str_len);
+
+	if (buf == NULL) {
+		wpa_printf(MSG_ERROR, "Malloc for action frame failed");
+		return;
+	}
+
+	ret = wpa_snprintf_hex_uppercase(buf, str_len, action_frame, length);
+
+	if (ret != (str_len - 1)) {
+		wpa_printf(MSG_ERROR,
+			   "Failed to copy all action frame bytes: copied %d, expected %d",
+			   ret, str_len);
+		os_free(buf);
+		return;
+	}
+
+	wpa_msg_ctrl(hapd->msg_ctx, MSG_INFO, AP_ACTION_FRAME_RECEIVED "%s", buf);
+	os_free(buf);
+}
+
+
 static int handle_action(struct hostapd_data *hapd,
 			 const struct ieee80211_mgmt *mgmt, size_t len,
 			 unsigned int freq)
@@ -6095,6 +6121,9 @@ static int handle_action(struct hostapd_data *hapd,
 		sta->last_subtype = WLAN_FC_STYPE_ACTION;
 	}
 
+	if (hapd->iconf->notify_action_frame)
+		notify_action_frame(hapd, (const u8 *)mgmt, len);
+
 	switch (mgmt->u.action.category) {
 #ifdef CONFIG_IEEE80211R_AP
 	case WLAN_ACTION_FT:
diff --git a/src/ap/ieee802_11.h b/src/ap/ieee802_11.h
index 8dc13b327..3448cf737 100644
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -258,6 +258,8 @@ const char * sae_get_password(struct hostapd_data *hapd,
 			      struct sae_pt **s_pt, const struct sae_pk **s_pk);
 
 u8 round_pow2_up(u8 x);
+void notify_action_frame(struct hostapd_data *hapd, const u8 *action_frame,
+			      size_t length);
 int multiple_bssid_ie_get_len(struct hostapd_data *hapd, bool is_beacon);
 u8 * hostapd_eid_multiple_bssid(struct hostapd_data *hapd, u8 *eid, bool is_beacon);
 u8 * hostapd_eid_ssid(struct hostapd_data *hapd, u8 *eid);
diff --git a/src/ap/ieee802_11_shared.c b/src/ap/ieee802_11_shared.c
index a2295c389..4edfb187b 100644
--- a/src/ap/ieee802_11_shared.c
+++ b/src/ap/ieee802_11_shared.c
@@ -588,7 +588,7 @@ u8 * hostapd_eid_adv_proto(struct hostapd_data *hapd, u8 *eid)
 
 	*pos++ = WLAN_EID_ADV_PROTO;
 	*pos++ = 2;
-	*pos++ = 0x7F; /* Query Response Length Limit | PAME-BI */
+	*pos++ = (hapd->iconf->adv_proto_query_resp_len & ADV_PROTO_QUERY_RESP_LEN_MASK); /* Query Response Length Limit | PAME-BI */
 	*pos++ = ACCESS_NETWORK_QUERY_PROTOCOL;
 #endif /* CONFIG_INTERWORKING */
 
diff --git a/src/common/wpa_ctrl.h b/src/common/wpa_ctrl.h
index 11c21c066..b63a7eb2d 100644
--- a/src/common/wpa_ctrl.h
+++ b/src/common/wpa_ctrl.h
@@ -383,6 +383,8 @@ extern "C" {
 /* BSS Transition Management Query frame received */
 #define BSS_TM_QUERY "BSS-TM-QUERY "
 
+#define AP_ACTION_FRAME_RECEIVED "AP-ACTION-FRAME-RECEIVED "
+
 /* BSS Transition Management Response frame received */
 #define BSS_TM_RESP "BSS-TM-RESP "
 
-- 
2.43.0

