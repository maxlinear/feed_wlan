From f2e36d05c8d17db03a14e2195a46fa205b0e8913 Mon Sep 17 00:00:00 2001
From: Nikita Chernikov <nchernikov@maxlinear.com>
Date: Thu, 21 Mar 2024 17:35:45 +0200
Subject: [PATCH] WLANRTSYS-62534 Add support to configure PSD subfield in NR
 DB

Signed-off-by: Nikita Chernikov <nchernikov@maxlinear.com>
---
 hostapd/mxl_ctrl_iface.c  | 33 ++++++++++++++++++++++++++++++++-
 hostapd/mxl_hostapd_cli.c | 14 ++++++++++++++
 hostapd/mxl_hostapd_cli.h |  3 +++
 src/ap/hostapd.h          |  3 +++
 src/ap/ieee802_11.c       |  4 ++++
 src/ap/neighbor_db.c      | 25 ++++++++++++++++++++++++-
 src/ap/neighbor_db.h      |  3 +++
 7 files changed, 83 insertions(+), 2 deletions(-)

diff --git a/hostapd/mxl_ctrl_iface.c b/hostapd/mxl_ctrl_iface.c
index cd68c338d..b95793c46 100644
--- a/hostapd/mxl_ctrl_iface.c
+++ b/hostapd/mxl_ctrl_iface.c
@@ -29,7 +29,7 @@
 #include "ap/mxl_softblock.h"
 #include "ap/mxl_rrm.h"
 #include "ap/ctrl_iface_ap.h"
-
+#include "ap/neighbor_db.h"
 
 struct hostapd_data *mxl_get_bss_index(const char **cmd, struct hostapd_data *hapd, bool ctrl_iface, bool delim)
 {
@@ -2897,6 +2897,34 @@ static void mxl_mlo_hostapd_ctrl_disassociate(struct hostapd_data *hapd, char *b
 
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
 
+static int mxl_hostapd_ctrl_iface_set_neighbor_psd(struct hostapd_data *hapd, char *buf)
+{
+	char *tmp;
+	u8 bssid[ETH_ALEN];
+	int psd = 0;
+
+	if (hwaddr_aton(buf, bssid)) {
+		wpa_printf(MSG_ERROR, "CTRL: SET_NEIGHBOR_PSD: Bad BSSID");
+		return -1;
+	}
+
+	tmp = os_strstr(buf, "psd_subfield=");
+	if (tmp) {
+		psd = atoi(tmp + 13);
+		if (psd < 0 || psd > 0xff) {
+			wpa_printf(MSG_ERROR, "CTRL: SET_NEIGHBOR_PSD: Bad psd_subfield subelement");
+			return -1;
+		}
+	}
+
+	if (mxl_hostapd_neighbor_set_psd_subfield(hapd, bssid, psd)) {
+		wpa_printf(MSG_ERROR, "CTRL: SET_NEIGHBOR_PSD: Neighbor entry does not exist");
+		return -1;
+	}
+
+	return 0;
+}
+
 int mxl_hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 					      char *buf, char *reply,
 					      int reply_size,
@@ -2949,6 +2977,9 @@ int mxl_hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "REPORT_STA_STATISTICS ", 22) == 0) {
 		if (mxl_hostapd_ctrl_iface_report_sta_statistics(hapd, buf + 22))
 			*reply_len = -1;
+	} else if (os_strncmp(buf, "SET_NEIGHBOR_PSD ", 17) == 0) {
+		if (mxl_hostapd_ctrl_iface_set_neighbor_psd(hapd, buf + 17))
+			*reply_len = -1;
 	} else if (os_strncmp(buf, "ACCEPT_ACL ", sizeof("ACCEPT_ACL ") - 1 ) == 0) {
 		char *buf_start = buf + sizeof("ACCEPT_ACL ") - 1;
 		char *mac;
diff --git a/hostapd/mxl_hostapd_cli.c b/hostapd/mxl_hostapd_cli.c
index 21adccb69..6747db002 100644
--- a/hostapd/mxl_hostapd_cli.c
+++ b/hostapd/mxl_hostapd_cli.c
@@ -403,6 +403,20 @@ int mxl_hostapd_cli_cmd_set_power_mode(struct wpa_ctrl *ctrl, int argc,
 	}
 	return mxl_wpa_ctrl_command(ctrl, cmd);
 }
+
+int mxl_hostapd_cli_cmd_set_neighbor_psd(struct wpa_ctrl *ctrl, int argc,
+					char *argv[])
+{
+	char cmd[256];
+	int res;
+
+	res = sprintf_s(cmd, sizeof(cmd), "SET_NEIGHBOR_PSD %s %s", argv[0], argv[1]);
+	if (res <= 0) {
+		printf("%s: sprintf_s error %d", __func__, res);
+		return -1;
+	}
+	return mxl_wpa_ctrl_command(ctrl, cmd);
+}
 #ifdef CONFIG_EPCS_MXL
 int mxl_hostapd_cli_cmd_send_epcs_teardown_frame(struct wpa_ctrl *ctrl, int argc,
 				char *argv[])
diff --git a/hostapd/mxl_hostapd_cli.h b/hostapd/mxl_hostapd_cli.h
index 903a52e54..1b4482471 100644
--- a/hostapd/mxl_hostapd_cli.h
+++ b/hostapd/mxl_hostapd_cli.h
@@ -58,6 +58,8 @@ int mxl_wpa_ctrl_command(struct wpa_ctrl *ctrl, const char *cmd);
 	  " get power_mode" }, \
 	{ "set_power_mode", mxl_hostapd_cli_cmd_set_power_mode, NULL, \
 	  " set power_mode value" }, \
+	{ "set_neighbor_psd", mxl_hostapd_cli_cmd_set_neighbor_psd, NULL, \
+	  " <addr> <psd_subfield=>" }, \
 	{ "req_beacon", mxl_hostapd_cli_cmd_req_beacon, NULL, \
 	  "= send beacon request" }, \
 	{ "report_beacon", mxl_hostapd_cli_cmd_report_beacon, NULL, \
@@ -115,6 +117,7 @@ int mxl_hostapd_cli_cmd_get_sta_softblock(struct wpa_ctrl *ctrl, int argc, char
 int mxl_hostapd_cli_cmd_reset_acs_state(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_get_power_mode(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_set_power_mode(struct wpa_ctrl *ctrl, int argc, char *argv[]);
+int mxl_hostapd_cli_cmd_set_neighbor_psd(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_req_beacon(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_report_beacon(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_req_self_beacon(struct wpa_ctrl *ctrl, int argc, char *argv[]);
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 55b100869..3b39b1486 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -183,6 +183,9 @@ struct hostapd_neighbor_entry {
 	int stationary;
 	u32 short_ssid;
 	u8 bss_parameters;
+#ifdef CONFIG_VENDOR_MXL
+	u8 psd_subfield;
+#endif /* CONFIG_VENDOR_MXL */
 };
 
 struct hostapd_sae_commit_queue {
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 6fb7a442b..ddec1cc53 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -8123,7 +8123,11 @@ static u8 * hostapd_eid_nr_db(struct hostapd_data *hapd, u8 *eid,
 		/* BSS parameters */
 		*eid++ = nr->bss_parameters;
 		/* 20 MHz PSD */
+#ifdef CONFIG_VENDOR_MXL
+		*eid++ = nr->psd_subfield;
+#else
 		*eid++ = RNR_20_MHZ_PSD_MAX_TXPOWER - 1;
+#endif /* CONFIG_VENDOR_MXL */
 		len += RNR_TBTT_INFO_LEN;
 		*size_offset = (eid - size_offset) - 1;
 	}
diff --git a/src/ap/neighbor_db.c b/src/ap/neighbor_db.c
index aee2e3599..9bbc1f167 100644
--- a/src/ap/neighbor_db.c
+++ b/src/ap/neighbor_db.c
@@ -103,6 +103,9 @@ static void hostapd_neighbor_clear_entry(struct hostapd_neighbor_entry *nr)
 	nr->stationary = 0;
 	nr->short_ssid = 0;
 	nr->bss_parameters = 0;
+#ifdef CONFIG_VENDOR_MXL
+	nr->psd_subfield = 0;
+#endif /* CONFIG_VENDOR_MXL */
 }
 
 
@@ -159,7 +162,9 @@ int hostapd_neighbor_set(struct hostapd_data *hapd, const u8 *bssid,
 
 	entry->stationary = stationary;
 	entry->bss_parameters = bss_parameters;
-
+#ifdef CONFIG_VENDOR_MXL
+	entry->psd_subfield = RNR_20_MHZ_PSD_MAX_TXPOWER - 1;
+#endif /* CONFIG_VENDOR_MXL */
 	return 0;
 
 fail:
@@ -364,3 +369,21 @@ int hostapd_neighbor_sync_own_report(struct hostapd_data *hapd)
 
 	return 0;
 }
+
+#ifdef CONFIG_VENDOR_MXL
+int mxl_hostapd_neighbor_set_psd_subfield(struct hostapd_data *hapd, const u8 *bssid, u8 psd)
+{
+	struct hostapd_neighbor_entry *entry;
+
+	entry = hostapd_neighbor_get(hapd, bssid, NULL);
+	if (!entry) {
+		wpa_printf(MSG_DEBUG,
+			   "Unable to set neighbor PSD subfield - Neighbor entry does not exist");
+		return -1;
+	}
+
+	entry->psd_subfield = psd;
+
+	return 0;
+}
+#endif /* CONFIG_VENDOR_MXL */
diff --git a/src/ap/neighbor_db.h b/src/ap/neighbor_db.h
index 53f714203..72f0e089b 100644
--- a/src/ap/neighbor_db.h
+++ b/src/ap/neighbor_db.h
@@ -21,6 +21,9 @@ int hostapd_neighbor_set(struct hostapd_data *hapd, const u8 *bssid,
 			 u8 bss_parameters);
 void hostapd_neighbor_set_own_report(struct hostapd_data *hapd);
 int hostapd_neighbor_sync_own_report(struct hostapd_data *hapd);
+#ifdef CONFIG_VENDOR_MXL
+int mxl_hostapd_neighbor_set_psd_subfield(struct hostapd_data *hapd, const u8 *bssid, u8 psd);
+#endif /* CONFIG_VENDOR_MXL */
 int hostapd_neighbor_remove(struct hostapd_data *hapd, const u8 *bssid,
 			    const struct wpa_ssid_value *ssid);
 void hostapd_free_neighbor_db(struct hostapd_data *hapd);
-- 
2.43.0

