From 4d632ca56ea94d6d80991d7fa13c30fa7411f6d5 Mon Sep 17 00:00:00 2001
From: "Maneendra,Pokuri Naga" <pnmaneendra@maxlinear.com>
Date: Thu, 7 Mar 2024 19:14:07 +0530
Subject: [PATCH] WLANRTSYS-63677 ML WDS configuration and association

---
 hostapd/mxl_config.c |  18 +++++
 src/ap/mxl_config.h  |   2 +
 src/ap/mxl_hostapd.h |   1 +
 src/ap/mxl_mld.c     |  52 +++++++++++++-
 src/ap/mxl_mld.h     |   2 +
 src/ap/mxl_wds.c     | 157 ++++++++++++++++++++++++++++++++++++++++++-
 6 files changed, 228 insertions(+), 4 deletions(-)

diff --git a/hostapd/mxl_config.c b/hostapd/mxl_config.c
index 329a08ce3..4a0319d04 100644
--- a/hostapd/mxl_config.c
+++ b/hostapd/mxl_config.c
@@ -1442,6 +1442,22 @@ static int mxl_hostapd_config_fill_mlo(struct hostapd_config *conf, const char *
 			return 0;
 		}
 		bss->mxl_bss_conf.mlo_enable = val;
+	} else if (os_strcmp(buf, "wds_single_ml_assoc") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_BOOL_RANGE(val)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid wds_single_ml_assoc %d",
+					line, val);
+			return 0;
+		}
+		bss->mxl_bss_conf.wds_single_ml_assoc = val;
+	} else if (os_strcmp(buf, "wds_primary_link") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_BOOL_RANGE(val)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid wds_primary_link %d",
+					line, val);
+			return 0;
+		}
+		bss->mxl_bss_conf.wds_primary_link = val;
 	} else if (os_strcmp(buf, "switch_initial_active_link") == 0) {
 		int val = atoi(pos);
 		if (!IS_VALID_BOOL_RANGE(val)) {
@@ -1881,6 +1897,8 @@ void mxl_hostapd_config_defaults_bss(struct hostapd_bss_config *bss)
 
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
 	bss->mxl_bss_conf.mlo_enable = false;
+	bss->mxl_bss_conf.wds_single_ml_assoc = false;
+	bss->mxl_bss_conf.wds_primary_link = false;
 	bss->mxl_bss_conf.switch_initial_active_link = false;
 	bss->mxl_bss_conf.ml_ie_add = false;
 	bss->mld_id = INVALID_MLD_ID;
diff --git a/src/ap/mxl_config.h b/src/ap/mxl_config.h
index 9f9280a11..8d3cc2cbf 100644
--- a/src/ap/mxl_config.h
+++ b/src/ap/mxl_config.h
@@ -366,6 +366,8 @@ struct mxl_hostapd_bss_config {
 	int num_sAddPeerAP;
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
 	bool mlo_enable;
+	bool wds_single_ml_assoc;
+	bool wds_primary_link;
 	bool switch_initial_active_link;
 	bool ml_ie_add;
 	u8 link_id;
diff --git a/src/ap/mxl_hostapd.h b/src/ap/mxl_hostapd.h
index 64c283999..e4723f379 100644
--- a/src/ap/mxl_hostapd.h
+++ b/src/ap/mxl_hostapd.h
@@ -121,6 +121,7 @@ struct mxl_hostapd_data {
 	u8 noise_histogram_token;
 	u8 sta_statistics_token;
 	struct hostapd_data *sibling_hapd;
+	u8 sibling_peer_addr[ETH_ALEN];
 };
 
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
diff --git a/src/ap/mxl_mld.c b/src/ap/mxl_mld.c
index fd9366af4..26e0ee572 100644
--- a/src/ap/mxl_mld.c
+++ b/src/ap/mxl_mld.c
@@ -1107,6 +1107,51 @@ u16 mxl_multilink_ie_validate(struct hostapd_data *hapd, struct sta_info *sta,
 	return WLAN_STATUS_SUCCESS;
 }
 
+u16 mxl_ml_ie_wds_validate(struct hostapd_data *hapd, struct sta_info *sta,
+				const u8 *ies, size_t ies_len)
+{
+	const u8 *common_info_ie = NULL;
+
+	if (!hapd || !hapd->mxl_data.sibling_hapd)
+		return WLAN_STATUS_UNSPECIFIED_FAILURE;
+
+	if (!ies || ies_len < MIN_BASIC_MULTILINK_IE_LEN) {
+		wpa_printf(MSG_ERROR, "invalid ML IE in (Re)Assoc request of length %d",(int) ies_len);
+		return WLAN_STATUS_UNSPECIFIED_FAILURE;
+	}
+	wpa_hexdump(MSG_DEBUG, "multilink_ie_wds_validate", ies, ies_len);
+	sta->mxl_sta_info.sta_ml_capab.ml_control_field = *(u16 *)ies;
+	common_info_ie = (ies + MULTILINK_CTRL_LEN) + 1; /* Control + Length */
+	memcpy_s(sta->mxl_sta_info.non_ap_mld_mac, ETH_ALEN, common_info_ie, ETH_ALEN);
+	sta->mxl_sta_info.ext_flags |= WLAN_STA_MULTILINK;
+	common_info_ie += ETH_ALEN;
+	if (sta->mxl_sta_info.sta_ml_capab.ml_control_field & MLO_LINK_ID_INFO_PRESENT) {
+		common_info_ie++;
+	}
+	if (sta->mxl_sta_info.sta_ml_capab.ml_control_field & MLO_BSS_PARAM_CHANGE_COUNT_PRESENT) {
+		common_info_ie++;
+	}
+	if (sta->mxl_sta_info.sta_ml_capab.ml_control_field & MLO_MSDI_PRESENT) {
+		common_info_ie += MULTILINK_MSDI_LEN;
+	}
+	if (sta->mxl_sta_info.sta_ml_capab.ml_control_field & MLO_EML_CAPAB_PRESENT) {
+		sta->mxl_sta_info.sta_ml_capab.eml_capab = *common_info_ie;
+		common_info_ie += MULTILINK_EML_CAPAB_LEN;
+	}
+	if (sta->mxl_sta_info.sta_ml_capab.ml_control_field & MLO_MLD_CAPAB_PRESENT) {
+		sta->mxl_sta_info.sta_ml_capab.mld_capab_oper = *common_info_ie;
+		common_info_ie += MULTILINK_MLD_CAPAB_OPER_LEN;
+	}
+	if (sta->mxl_sta_info.sta_ml_capab.ml_control_field & MLO_MLD_ID_PRESENT) {
+		sta->mxl_sta_info.sta_ml_capab.mld_id = *common_info_ie;
+	}
+
+	if (hapd->conf->mxl_bss_conf.wds_single_ml_assoc)
+		sta->mxl_sta_info.ext_flags |= WLAN_STA_SINGLE_LINK_ML_ASSOC;
+
+	return WLAN_STATUS_SUCCESS;
+}
+
 int mxl_get_ml_probe_type_mld_id(const u8 * ml_ie, size_t ml_ie_len)
 {
 	const u8 *ie;
@@ -1252,8 +1297,11 @@ int mxl_ml_sta_add(struct hostapd_data *hapd, struct sta_info *sta)
 	if (sta->mxl_sta_info.ext_flags & WLAN_STA_SINGLE_LINK_ML_ASSOC)
 		ml_sta_params->aid = sta->aid;
 
-	if (hapd->conf->mxl_bss_conf.switch_initial_active_link || hapd->mxl_data.sibling_hapd->conf->mxl_bss_conf.switch_initial_active_link) {
-		/* This is to switch the initial active link
+	if (sta->mxl_sta_info.ext_flags & WLAN_STA_MLD_WDS_STR_STA) {
+		if (hapd->mxl_data.sibling_hapd->conf->mxl_bss_conf.wds_primary_link)
+			switch_initial_active_link = true;
+	} else if (hapd->conf->mxl_bss_conf.switch_initial_active_link || hapd->mxl_data.sibling_hapd->conf->mxl_bss_conf.switch_initial_active_link) {
+	/* This is to switch the initial active link
 		 * Testing purpose only */
 		switch_initial_active_link = true;
 	}
diff --git a/src/ap/mxl_mld.h b/src/ap/mxl_mld.h
index 2435fe0ca..de1d71879 100644
--- a/src/ap/mxl_mld.h
+++ b/src/ap/mxl_mld.h
@@ -168,6 +168,8 @@ int mxl_mld_setup_interfaces(struct hapd_interfaces *interfaces);
 void mxl_hostapd_set_eml_capab(struct hostapd_iface *iface);
 u16 mxl_multilink_ie_validate(struct hostapd_data *hapd, struct sta_info *sta,
 				const u8 *ies, size_t ies_len);
+u16 mxl_ml_ie_wds_validate (struct hostapd_data *hapd, struct sta_info *sta,
+				const u8 *ies, size_t ies_len);
 int mxl_ml_set_sid(struct hostapd_data *hapd, struct mxl_ml_sta_info *ml_sta_info);
 int mxl_ml_sta_add(struct hostapd_data *hapd, struct sta_info *sta);
 int mxl_ml_remove_sta(struct hostapd_data *hapd, u8 *sa, u8 sendto_fw);
diff --git a/src/ap/mxl_wds.c b/src/ap/mxl_wds.c
index 3787d592e..940225aeb 100644
--- a/src/ap/mxl_wds.c
+++ b/src/ap/mxl_wds.c
@@ -218,6 +218,13 @@ static u16 mxl_wds_check_assoc_ies(struct hostapd_data *hapd, struct sta_info *s
 		if (resp != WLAN_STATUS_SUCCESS)
 			return resp;
 	}
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+	if (hapd->conf->mxl_bss_conf.mlo_enable) {
+		resp = mxl_ml_ie_wds_validate(hapd, sta, elems.multilink_ie, elems.multilink_ie_len);
+		if (resp != WLAN_STATUS_SUCCESS)
+			return resp;
+	}
+#endif /* CONFIG_IEEE80211BE_MXL_MLO */
 #endif /* CONFIG_IEEE80211BE */
 
 	wpa_auth_sta_no_wpa(sta->wpa_sm);
@@ -235,6 +242,9 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 	struct ieee80211_he_capabilities he_cap[2] = {0};
 	struct ieee80211_eht_capabilities eht_cap[2] = {0};
 
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+	struct ieee80211_ml_sta_info ml_sta_info;
+#endif /* CONFIG_IEEE80211BE_MXL_MLO */
 	u16 resp, i, capab_info = 0;
 	int new_assoc = 1;
 	u8 *ext_capab = NULL;
@@ -312,6 +322,44 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 	}
 #endif /* CONFIG_IEEE80211BE */
 
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+	/* As part of EHT open source kernel sync, EHT-MCS map for BW<=80 is sent
+	 * in EHT capability IE for VHT20 in AP mode. This is inline with the standard as
+	 * EHT-MCS map for 20 MHz only is applicable for station mode. Hence for VHT20 mode,
+	 * derive MCS0-7 and MCS8-9 from MCS0-9 information of peer beacons.
+	 */
+	if (!(sta->he_capab->he_phy_capab_info[0] & (HE_PHY_CAP0_CHANNEL_WIDTH_SET_B0 |
+					HE_PHY_CAP0_CHANNEL_WIDTH_SET_B1 |
+					HE_PHY_CAP0_CHANNEL_WIDTH_SET_B2 |
+					HE_PHY_CAP0_CHANNEL_WIDTH_SET_B3))) {
+		if (sta->eht_capab_len) {
+			sta->eht_capab->optional[3] = sta->eht_capab->optional[2];
+			sta->eht_capab->optional[2] = sta->eht_capab->optional[1];
+			sta->eht_capab->optional[1] = sta->eht_capab->optional[0];
+			sta->eht_capab_len++;
+		}
+	}
+
+	if (hapd->conf->mxl_bss_conf.mlo_enable && (sta->mxl_sta_info.ext_flags & (WLAN_STA_MULTILINK))) {
+		is_both_ml_sta_assoc_received = false;
+		memcpy_s(hapd->mxl_data.sibling_peer_addr, ETH_ALEN, wds_sta->mac_addr, ETH_ALEN);
+		if (hapd->mxl_data.sibling_hapd) {
+			struct hostapd_data *hapd1 = hapd->mxl_data.sibling_hapd;
+			struct sta_info *sta1 = ap_get_sta(hapd1, hapd1->mxl_data.sibling_peer_addr);
+			if (sta1 && !hostapd_mac_comp(sta1->mxl_sta_info.non_ap_mld_mac, sta->mxl_sta_info.non_ap_mld_mac)) {
+				sta->mxl_sta_info.linked_sta = sta1;
+				sta1->mxl_sta_info.linked_sta = sta;
+				is_both_ml_sta_assoc_received = true;
+				if ((sta->mxl_sta_info.sta_ml_capab.mld_capab_oper & MLO_MAX_NUM_SIMUL_LINKS)) { /* WDS STR STA */
+					sta->mxl_sta_info.ext_flags |= WLAN_STA_MLD_WDS_STR_STA;
+					sta1->mxl_sta_info.ext_flags |= WLAN_STA_MLD_WDS_STR_STA;
+				}
+			}
+			if (sta->mxl_sta_info.ext_flags & WLAN_STA_SINGLE_LINK_ML_ASSOC)
+				is_both_ml_sta_assoc_received = true;
+		}
+	}
+#endif /* CONFIG_IEEE80211BE_MXL_MLO */
 	if (is_both_ml_sta_assoc_received && hostapd_get_aid(hapd, sta) < 0) {
 		hostapd_logger(hapd, wds_sta->mac_addr, HOSTAPD_MODULE_IEEE80211,
 				HOSTAPD_LEVEL_INFO, "No room for more AIDs");
@@ -392,21 +440,38 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 #endif
 	if ((sta->flags & WLAN_STA_HT) && is_both_ml_sta_assoc_received) {
 		hostapd_get_ht_capab(hapd, sta->ht_capabilities, &ht_cap[1]);
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+		if (sta->mxl_sta_info.linked_sta)
+			hostapd_get_ht_capab(hapd->mxl_data.sibling_hapd, sta->mxl_sta_info.linked_sta->ht_capabilities, &ht_cap[0]);
+#endif /* CONFIG_IEEE80211BE_MXL_MLO */
 	}
 #ifdef CONFIG_IEEE80211AC
 	if ((sta->flags & WLAN_STA_VHT) && is_both_ml_sta_assoc_received) {
 		hostapd_get_vht_capab(hapd, sta->vht_capabilities, &vht_cap[1]);
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+		if (sta->mxl_sta_info.linked_sta)
+			hostapd_get_vht_capab(hapd->mxl_data.sibling_hapd, sta->mxl_sta_info.linked_sta->vht_capabilities, &vht_cap[0]);
+#endif /* CONFIG_IEEE80211BE_MXL_MLO */
 	}
 #endif /* CONFIG_IEEE80211AC */
 
 #ifdef CONFIG_IEEE80211AX
 	if ((sta->flags & WLAN_STA_HE) && is_both_ml_sta_assoc_received) {
 		hostapd_get_he_capab(hapd, sta->he_capab, &he_cap[1], sta->he_capab_len);
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+		if (sta->mxl_sta_info.linked_sta)
+			hostapd_get_he_capab(hapd->mxl_data.sibling_hapd, sta->mxl_sta_info.linked_sta->he_capab, &he_cap[0], sta->mxl_sta_info.linked_sta->he_capab_len);
+#endif /* CONFIG_IEEE80211BE_MXL_MLO */
 	}
 #endif /* CONFIG_IEEE80211AX */
 #ifdef CONFIG_IEEE80211BE
-	if ((sta->flags & WLAN_STA_EHT) && is_both_ml_sta_assoc_received)
+	if ((sta->flags & WLAN_STA_EHT) && is_both_ml_sta_assoc_received) {
 		hostapd_get_eht_capab(hapd, sta->eht_capab, &eht_cap[1], sta->eht_capab_len);
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+		if (sta->mxl_sta_info.linked_sta)
+			hostapd_get_eht_capab(hapd->mxl_data.sibling_hapd, sta->mxl_sta_info.linked_sta->eht_capab, &eht_cap[0], sta->mxl_sta_info.linked_sta->eht_capab_len);
+#endif /* CONFIG_IEEE80211BE_MXL_MLO */
+	}
 #endif /* CONFIG_IEEE80211BE */
 
 	if (is_both_ml_sta_assoc_received && sta->ext_capability) {
@@ -421,7 +486,28 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 			}
 		}
 	}
-
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+	if (hapd->conf->mxl_bss_conf.mlo_enable && (sta->mxl_sta_info.ext_flags & (WLAN_STA_MULTILINK))) {
+		os_memset(&ml_sta_info, 0, sizeof(ml_sta_info));
+		memcpy_s(ml_sta_info.mld_mac, ETH_ALEN, sta->mxl_sta_info.non_ap_mld_mac, ETH_ALEN);
+		if (sta->mxl_sta_info.linked_sta)
+			memcpy_s(ml_sta_info.linked_sta_mac, ETH_ALEN, sta->mxl_sta_info.linked_sta->addr, ETH_ALEN);
+		ml_sta_info.is_ml = true;
+		mxl_hostapd_ml_sta_info_set(sta, ml_sta_info);
+		if (is_both_ml_sta_assoc_received && sta->mxl_sta_info.linked_sta && sta->mxl_sta_info.linked_sta->ext_capability) {
+			ext_capab1 = os_malloc(1 + sta->mxl_sta_info.linked_sta->ext_capability[0]);
+			if (ext_capab1) {
+				err = memcpy_s(ext_capab1, 1 + sta->mxl_sta_info.linked_sta->ext_capability[0],
+				sta->mxl_sta_info.linked_sta->ext_capability, 1 + sta->mxl_sta_info.linked_sta->ext_capability[0]);
+				if (EOK != err) {
+					wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
+					os_free(ext_capab1);
+					return;
+				}
+			}
+		}
+	}
+#endif /* CONFIG_IEEE80211BE_MXL_MLO */
 	if (is_both_ml_sta_assoc_received && hostapd_sta_add(hapd, sta->addr, sta->aid, sta->capability,
 			sta->supported_rates, sta->supported_rates_len,
 			sta->listen_interval,
@@ -444,6 +530,59 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 		os_free(ext_capab1);
 		return;
 	}
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+		if (hapd->conf->mxl_bss_conf.mlo_enable && (sta->mxl_sta_info.ext_flags & WLAN_STA_MULTILINK) && sta->mxl_sta_info.linked_sta
+					&& is_both_ml_sta_assoc_received) {
+				struct hostapd_data *hapd1 = hapd->mxl_data.sibling_hapd;
+				struct sta_info *sta1 = sta->mxl_sta_info.linked_sta;
+				os_memset(&ml_sta_info, 0, sizeof(ml_sta_info));
+				memcpy_s(ml_sta_info.mld_mac, ETH_ALEN, sta1->mxl_sta_info.non_ap_mld_mac, ETH_ALEN);
+				memcpy_s(ml_sta_info.linked_sta_mac, ETH_ALEN, sta1->mxl_sta_info.linked_sta->addr, ETH_ALEN);
+				ml_sta_info.is_ml = true;
+				mxl_hostapd_ml_sta_info_set(sta1, ml_sta_info);
+				if (hostapd_sta_add(hapd1, sta1->addr, sta1->aid, sta1->capability,
+					sta1->supported_rates, sta1->supported_rates_len,
+					sta1->listen_interval,
+					sta1->flags & WLAN_STA_HT ? &ht_cap[0] : NULL,
+					sta1->flags & WLAN_STA_VHT ? &vht_cap[0] : NULL,
+					sta1->flags & WLAN_STA_HE ? &he_cap[0] : NULL,
+					sta1->flags & WLAN_STA_HE ? sta1->he_capab_len : 0,
+					sta1->flags & WLAN_STA_EHT ? &eht_cap[0] : NULL,
+					sta1->flags & WLAN_STA_EHT ? sta1->eht_capab_len : 0,
+					sta1->he_6ghz_capab,
+					sta1->flags , sta->qosinfo,
+					sta1->vht_opmode,
+					sta1->p2p_ie ? 1 : 0,
+					sta->added_unassoc, sta1->last_assoc_req,
+					sta1->last_assoc_req_len, sta1->ssi_signal, NULL, false)) {
+						hostapd_logger(hapd1, sta1->addr, HOSTAPD_MODULE_IEEE80211,
+							HOSTAPD_LEVEL_NOTICE,
+							"Could not add STA1 to kernel driver");
+						ap_free_sta(hapd, sta);
+						ap_free_sta(hapd1, sta1);
+						os_free(ext_capab);
+						os_free(ext_capab1);
+						return;
+					}
+					if (mxl_ml_sta_add(hapd, sta) < 0) {
+						wpa_printf(MSG_ERROR,"ML STA ADD vendor cmd failed!!!");
+						ap_free_sta(hapd, sta);
+						ap_free_sta(hapd1, sta1);
+						os_free(ext_capab);
+						os_free(ext_capab1);
+						return;
+					}
+		}
+		if (sta->mxl_sta_info.ext_flags & WLAN_STA_SINGLE_LINK_ML_ASSOC) {
+			if (mxl_ml_sta_add(hapd, sta) < 0) {
+				wpa_printf(MSG_ERROR,"ML STA ADD vendor cmd failed!!!");
+				ap_free_sta(hapd, sta);
+				os_free(ext_capab);
+				os_free(ext_capab1);
+				return;
+			}
+		}
+#endif /* CONFIG_IEEE80211BE_MXL_MLO */
 
 	if (is_both_ml_sta_assoc_received) {
 		sta->flags |= WLAN_STA_AUTHORIZED;
@@ -451,9 +590,23 @@ void mxl_wds_event_connect(struct hostapd_data *hapd,
 		hapd->new_assoc_sta_cb(hapd, sta, !new_assoc);
 		ieee802_1x_notify_port_enabled(sta->eapol_sm, 1);
 	}
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+	if (is_both_ml_sta_assoc_received && sta->mxl_sta_info.linked_sta) {
+		struct hostapd_data *hapd1 = hapd->mxl_data.sibling_hapd;
+		sta->mxl_sta_info.linked_sta->flags |= WLAN_STA_AUTHORIZED;
+		hostapd_set_authorized(hapd1, sta->mxl_sta_info.linked_sta, 1);
+		hapd->new_assoc_sta_cb(hapd1, sta->mxl_sta_info.linked_sta, !new_assoc);
+		ieee802_1x_notify_port_enabled(sta->mxl_sta_info.linked_sta->eapol_sm, 1);
+	}
+#endif /* CONFIG_IEEE80211BE_MXL_MLO */
 
 	hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
 			HOSTAPD_LEVEL_INFO, "hostapd_wds_sta_connect: WDS STA connected");
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+	if (sta->mxl_sta_info.linked_sta)
+		hostapd_logger(hapd->mxl_data.sibling_hapd, sta->mxl_sta_info.linked_sta->addr, HOSTAPD_MODULE_IEEE80211,
+			HOSTAPD_LEVEL_INFO, "hostapd_wds_sta_connect: WDS STA connected");
+#endif /* CONFIG_IEEE80211BE_MXL_MLO */
 
 	os_free(ext_capab);
 	os_free(ext_capab1);
-- 
2.43.0

