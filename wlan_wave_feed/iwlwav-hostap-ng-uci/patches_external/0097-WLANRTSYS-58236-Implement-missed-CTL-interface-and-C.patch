From b87b5d39804a23d75574d764f35a0d1fb8832faf Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Wed, 30 Aug 2023 10:43:53 +0200
Subject: [PATCH] WLANRTSYS-58236: Implement missed CTL interface and CLI APIs

---
 hostapd/ctrl_iface.c         | 152 +++++++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c        |  39 +++++++++
 hostapd/mxl_hostapd_cli.c    |  16 ++++
 hostapd/mxl_hostapd_cli.h    |   9 +++
 src/common/ieee802_11_defs.h |   4 +
 5 files changed, 220 insertions(+)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index f2aec2b55..b79e1403f 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -6029,6 +6029,153 @@ static int hostapd_ctrl_iface_get_he_phy_channel_width_set(struct hostapd_data *
 	return len;
 }
 
+static int hostapd_ctrl_iface_get_sta_he_caps(struct hostapd_data *hapd, const char *cmd, char *reply, size_t reply_len)
+{
+	int i, ret, len = 0;
+	struct sta_info *sta = NULL;
+	u8 sta_mac[ETH_ALEN];
+
+	if (hwaddr_aton(cmd, sta_mac)) {
+		ret = sprintf_s(reply, reply_len, "CTRL: GET_STA_HE_CAPS - Incorrect MAC address passed\n");
+		if (ret <= 0) {
+			wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+			return 0;
+		}
+		return ret;
+	}
+
+	for (i = 0; i < hapd->iface->num_bss; i++) {
+		sta = ap_get_sta(hapd->iface->bss[i], sta_mac);
+
+		if (sta)
+			 break;
+	}
+
+	if (!sta) {
+		ret = sprintf_s(reply, reply_len, "CTRL: GET_STA_HE_CAPS - STA doesn't exist\n");
+		if (ret <= 0) {
+			wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+			return 0;
+		}
+		return ret;
+	}
+
+	if (!sta->last_assoc_req || !sta->last_assoc_req_len) {
+		ret = sprintf_s(reply, reply_len, "CTRL: GET_STA_HE_CAPS - STA doesn't have last assoc req\n");
+		if (ret <= 0) {
+			wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+			return 0;
+		}
+		return ret;
+	}
+
+	if ((NULL == sta->he_capab) || (sta->he_capab_len < 1)) {
+		ret = sprintf_s(reply, reply_len, "CTRL: GET_STA_HE_CAPS - STA doesn't have HE elements in assoc req\n");
+		if (ret <= 0) {
+			wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+			return 0;
+		}
+		return ret;
+	}
+
+	struct ieee80211_he_capabilities *he_caps = (struct ieee80211_he_capabilities *)sta->he_capab;
+
+	ret = sprintf_s(reply + len, reply_len - len, "he_phy_chanwidth_set=");
+	if (os_snprintf_error(reply_len - len, ret))
+		return len;
+	len += ret;
+
+	if(he_caps->he_phy_capab_info[HE_PHYCAP_CAP0_IDX] & HE_PHY_CAP0_CHANNEL_WIDTH_SET_B0) {
+			ret = sprintf_s(reply + len, reply_len - len, "B0");
+			if (ret <= 0)
+				return len;
+			len += ret;
+	}
+
+	if(he_caps->he_phy_capab_info[HE_PHYCAP_CAP0_IDX] & HE_PHY_CAP0_CHANNEL_WIDTH_SET_B1) {
+			ret = sprintf_s(reply + len, reply_len - len, ",B1");
+			if (ret <= 0)
+				return len;
+			len += ret;
+	}
+
+	if(he_caps->he_phy_capab_info[HE_PHYCAP_CAP0_IDX] & HE_PHY_CAP0_CHANNEL_WIDTH_SET_B2) {
+			ret = sprintf_s(reply + len, reply_len - len, ",B2");
+			if (ret <= 0)
+				return len;
+			len += ret;
+	}
+
+	if(he_caps->he_phy_capab_info[HE_PHYCAP_CAP0_IDX] & HE_PHY_CAP0_CHANNEL_WIDTH_SET_B3) {
+			ret = sprintf_s(reply + len, reply_len - len, ",B3");
+			if (ret <= 0)
+				return len;
+			len += ret;
+	}
+
+	if(he_caps->he_phy_capab_info[HE_PHYCAP_CAP0_IDX] & HE_PHY_CAP0_CHANNEL_WIDTH_SET_B4) {
+			ret = sprintf_s(reply + len, reply_len - len, ",B4");
+			if (ret <= 0)
+				return len;
+			len += ret;
+	}
+
+	if(he_caps->he_phy_capab_info[HE_PHYCAP_CAP0_IDX] & HE_PHY_CAP0_CHANNEL_WIDTH_SET_B5) {
+			ret = sprintf_s(reply + len, reply_len - len, ",B5");
+			if (ret <= 0)
+				return len;
+			len += ret;
+	}
+
+	if(he_caps->he_phy_capab_info[HE_PHYCAP_CAP0_IDX] & HE_PHY_CAP0_CHANNEL_WIDTH_SET_B6) {
+			ret = sprintf_s(reply + len, reply_len - len, ",B6(reserved)");
+			if (ret <= 0)
+				return len;
+			len += ret;
+	}
+
+	ret = sprintf_s(reply + len, reply_len - len, "\n");
+	if (ret <= 0)
+		return len;
+	len += ret;
+
+	ret = sprintf_s(reply + len, reply_len - len, "he_phy_he_er_su_ppdu_with_4x_he_ltf_and_08_us_gi=%d\n",
+		(he_caps->he_phy_capab_info[HE_PHYCAP_CAP7_IDX] & HE_PHY_CAP7_SU_PPDU_AND_HE_MU_WITH_4X_HE_LTF_0_8US_GI)>>2);
+	if (ret <= 0)
+		return len;
+	len += ret;
+
+	ret = sprintf_s(reply + len, reply_len - len, "he_phy_20_mhz_in_40_mhz_he_ppdu_in_24_ghz_band=%d\n",
+		(he_caps->he_phy_capab_info[HE_PHYCAP_CAP8_IDX] & HE_PHY_CAP8_20MHZ_IN_40MHZ_HE_PPDU_2_4_GHZ_BAND)>>1);
+	if (ret <= 0)
+		return len;
+	len += ret;
+
+	ret = sprintf_s(reply + len, reply_len - len, "he_phy_20_mhz_in_160_slash_80_plus_80_mhz_he_ppdu=%d\n",
+		(he_caps->he_phy_capab_info[HE_PHYCAP_CAP8_IDX] & HE_PHY_CAP8_20MHZ_IN_160MHZ_HE_PPDU)>>2);
+	if (ret <= 0)
+		return len;
+	len += ret;
+
+	/* Add next fields here */
+
+	return len;
+}
+
+static int hostapd_ctrl_iface_get_max_tx_power(struct hostapd_data *hapd, char *reply, size_t reply_size)
+{
+	int ret = 0;
+	struct hostapd_channel_data *ch = NULL;
+	if (!(ch = hostapd_hw_get_channel_data_from_ch(hapd->iface, hapd->iconf->channel)))
+		return -1;
+	ret = sprintf_s(reply, reply_size, "%u", ch->max_tx_power);
+	if (ret <= 0) {
+		wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+		return -1;
+	}
+	return ret;
+}
+
 static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 					      char *buf, char *reply,
 					      int reply_size,
@@ -6703,6 +6850,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "GET_HE_PHY_CHANNEL_WIDTH_SET ", sizeof("GET_HE_PHY_CHANNEL_WIDTH_SET ") - 1) == 0) {
 		reply_len = hostapd_ctrl_iface_get_he_phy_channel_width_set(hapd,
 				buf + sizeof("GET_HE_PHY_CHANNEL_WIDTH_SET ") - 1, reply, reply_size);
+	} else if (os_strncmp(buf, "GET_STA_HE_CAPS ", sizeof("GET_STA_HE_CAPS ") - 1) == 0) {
+		reply_len = hostapd_ctrl_iface_get_sta_he_caps(hapd,
+				buf + sizeof("GET_STA_HE_CAPS ") - 1, reply, reply_size);
 	} else if (os_strncmp(buf, "UPDATE_RELOAD ", 14) == 0) {
 		if (hostapd_ctrl_iface_update_reload(hapd, buf + 14))
 			reply_len = -1;
@@ -6729,6 +6879,8 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 		if (hostapd_ctrl_set_ptk_rekey_timer(hapd, buf + 20) < 0)
 			reply_len = -1;
 #endif /*CONFIG_WIFI_CERTIFICATION */
+	} else if (os_strncmp(buf, "GET_MAX_TX_POWER", 16) == 0) {
+		reply_len = hostapd_ctrl_iface_get_max_tx_power(hapd, reply, reply_size);
 	} else {
 		os_memcpy(reply, "UNKNOWN COMMAND\n", 16);
 		reply_len = 16;
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 24aefc04b..81112c6ed 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -2272,6 +2272,26 @@ static int hostapd_cli_cmd_get_he_phy_channel_width_set (struct wpa_ctrl *ctrl,
 	return wpa_ctrl_command(ctrl, cmd);
 }
 
+static int hostapd_cli_cmd_get_sta_he_caps (struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	char cmd[64];
+	int res;
+
+	if (argc != 1) {
+		printf("Invalid 'get_sta_he_caps' command: needs one argument:\n"
+				"- STA MAC address from which to get STA HE capabilities\n");
+		return -1;
+	}
+
+	res = sprintf_s(cmd, sizeof(cmd), "GET_STA_HE_CAPS %s", argv[0]);
+	if (res <= 0) {
+		printf("%s: sprintf_s error %d", __func__, res);
+		return -1;
+	}
+
+	return wpa_ctrl_command(ctrl, cmd);
+}
+
 #ifdef CONFIG_WIFI_CERTIFICATION
 static int hostapd_cli_cmd_set_incorrect_pn(struct wpa_ctrl *ctrl, int argc, char *argv[])
 {
@@ -2335,6 +2355,21 @@ static int hostapd_cli_cmd_set_ptk_rekey_timer(struct wpa_ctrl *ctrl, int argc,
 
 #endif /* CONFIG_WIFI_CERTIFICATION */
 
+static int hostapd_cli_cmd_get_max_tx_power(struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	char cmd[20];
+	int res = 0;
+
+	res = sprintf_s(cmd, sizeof(cmd), "GET_MAX_TX_POWER");
+
+	if (res <= 0) {
+		printf("%s: get_max_tx_power cmd, sprintf_s error %d\n", __func__, res);
+		return -1;
+	}
+
+	return wpa_ctrl_command(ctrl, cmd);
+}
+
 struct hostapd_cli_cmd {
 	const char *cmd;
 	int (*handler)(struct wpa_ctrl *ctrl, int argc, char *argv[]);
@@ -2630,6 +2665,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 #endif /* CONFIG_MBO */
 	{ "get_he_phy_channel_width_set", hostapd_cli_cmd_get_he_phy_channel_width_set, NULL,
 	  "<MAC addr> = get HE PHY Channel Width Set field for specified STA" },
+	{ "get_sta_he_caps", hostapd_cli_cmd_get_sta_he_caps, NULL,
+	  "<MAC addr> = get STA HE capabilities" },
 	{ "stop_ap", hostapd_cli_cmd_stop_ap, NULL,
 	  "= stop hostapd AP on current interface" },
 #ifdef CONFIG_WIFI_CERTIFICATION
@@ -2648,6 +2685,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	{ "set_ptk_rekey_timer", hostapd_cli_cmd_set_ptk_rekey_timer, NULL,
 	  " = set ptk rekey timer" },
 #endif /* CONFIG_WIFI_CERTIFICATION */
+	{ "get_max_tx_power", hostapd_cli_cmd_get_max_tx_power, NULL,
+	  " = get max_tx_power  value"},
 	{ NULL, NULL, NULL, NULL }
 };
 
diff --git a/hostapd/mxl_hostapd_cli.c b/hostapd/mxl_hostapd_cli.c
index 595f223fc..913e1765e 100644
--- a/hostapd/mxl_hostapd_cli.c
+++ b/hostapd/mxl_hostapd_cli.c
@@ -27,6 +27,22 @@ int mxl_hostapd_cli_cmd_deny_macacl(struct wpa_ctrl *ctrl, int argc,
 	return mxl_hostapd_cli_cmd(ctrl, "DENY_ACL", 2, argc, argv);
 }
 
+#ifdef CONFIG_ACS
+int mxl_hostapd_cli_cmd_reset_acs_state(struct wpa_ctrl *ctrl, int argc,
+                char *argv[])
+{
+	char cmd[64];
+	int res;
+
+	res = sprintf_s(cmd, sizeof(cmd), "RESET_ACS_STATE");
+	if (res <= 0) {
+		printf("%s: sprintf_s error %d", __func__, res);
+		return -1;
+	}
+	return mxl_wpa_ctrl_command(ctrl, cmd);
+}
+#endif /* CONFIG_ACS */
+
 int mxl_hostapd_cli_cmd_get_hw_features(struct wpa_ctrl *ctrl, int argc, char *argv[])
 {
 	char cmd[256];
diff --git a/hostapd/mxl_hostapd_cli.h b/hostapd/mxl_hostapd_cli.h
index 7978adf9e..1bc1e0bf8 100644
--- a/hostapd/mxl_hostapd_cli.h
+++ b/hostapd/mxl_hostapd_cli.h
@@ -67,6 +67,14 @@ int mxl_wpa_ctrl_command(struct wpa_ctrl *ctrl, const char *cmd);
 	{ "report_sta_statistics", mxl_hostapd_cli_cmd_report_sta_statistics, NULL, \
 	  " = report sta statistics" }, \
 
+#ifdef CONFIG_ACS
+#define MXL_CLI_COMMANDS_ACS \
+	{ "reset_acs_state", mxl_hostapd_cli_cmd_reset_acs_state, NULL,           \
+	  " = reset acs state" },                                                 \
+
+#else /* CONFIG_ACS */
+#define MXL_CLI_COMMANDS_ACS
+#endif /* CONFIG_ACS */
 
 int mxl_hostapd_cli_cmd_get_hw_features(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_set_failsafe_chan(struct wpa_ctrl *ctrl, int argc, char *argv[]);
@@ -76,6 +84,7 @@ int mxl_hostapd_cli_cmd_set_zwdfs_antenna(struct wpa_ctrl *ctrl, int argc, char
 int mxl_hostapd_cli_cmd_get_zwdfs_antenna(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_sta_softblock(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_get_sta_softblock(struct wpa_ctrl *ctrl, int argc, char *argv[]);
+int mxl_hostapd_cli_cmd_reset_acs_state(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_req_beacon(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_report_beacon(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_req_self_beacon(struct wpa_ctrl *ctrl, int argc, char *argv[]);
diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index 6e4cb27c7..63e5bc97f 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -2483,6 +2483,7 @@ struct ieee80211_spatial_reuse {
 #define HE_PHY_CAP0_CHANNEL_WIDTH_SET_B3 ((u8) BIT(4))
 #define HE_PHY_CAP0_CHANNEL_WIDTH_SET_B4 ((u8) BIT(5))
 #define HE_PHY_CAP0_CHANNEL_WIDTH_SET_B5 ((u8) BIT(6))
+#define HE_PHY_CAP0_CHANNEL_WIDTH_SET_B6 ((u8) BIT(7))
 
 #define HE_PHYCAP_CAP2_IDX 2
 #define HE_PHY_CAP2_FULL_BANDWIDTH_UL_MU_MIMO    ((u8) BIT(6))
@@ -2491,6 +2492,9 @@ struct ieee80211_spatial_reuse {
 #define HE_PHYCAP_CAP6_IDX 6
 #define HE_PHY_CAP6_PARTIAL_BANDWIDTH_DL_MU_MIMO ((u8) BIT(6))
 
+#define HE_PHYCAP_CAP7_IDX 7
+#define HE_PHY_CAP7_SU_PPDU_AND_HE_MU_WITH_4X_HE_LTF_0_8US_GI ((u8) BIT(2))
+
 #define HE_PHYCAP_CAP8_IDX 8
 #define HE_PHY_CAP8_20MHZ_IN_40MHZ_HE_PPDU_2_4_GHZ_BAND	((u8) BIT(1))
 #define HE_PHY_CAP8_20MHZ_IN_160MHZ_HE_PPDU		((u8) BIT(2))
-- 
2.43.0

