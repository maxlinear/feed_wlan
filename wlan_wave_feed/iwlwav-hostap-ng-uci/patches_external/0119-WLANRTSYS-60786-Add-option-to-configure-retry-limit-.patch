From 3c9734cbf38c78ce27d7f05118d091eb1bd393a5 Mon Sep 17 00:00:00 2001
From: nchernikov <nchernikov@maxlinear.com>
Date: Mon, 1 Jan 2024 13:09:10 +0200
Subject: [PATCH] WLANRTSYS-60786 Add option to configure retry limit of probe
 response and move retry limit to mxl config

---
 hostapd/config_file.c | 17 -----------------
 hostapd/mxl_config.c  | 27 +++++++++++++++++++++++++++
 src/ap/ap_config.c    |  2 --
 src/ap/ap_config.h    |  6 ------
 src/ap/hostapd.c      | 19 -------------------
 src/ap/mxl_config.h   |  9 ++++++++-
 src/ap/mxl_hostapd.c  | 24 +++++++++++++++++++++++-
 7 files changed, 58 insertions(+), 46 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index c191e0ed8..708dec013 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -5531,23 +5531,6 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 			return 1;
 		}
 		bss->s11nProtection = val;
-
-	} else if (os_strcmp(buf, "ap_retry_limit") == 0) {
-		uint32_t ap_retry_limit = atoi(pos);
-		if (ap_retry_limit > AP_TX_RETRY_LIMIT_MAX) {
-			wpa_printf(MSG_ERROR, "Invalid AP retry limit value %d",
-				ap_retry_limit);
-			return 1;
-		}
-		conf->ap_retry_limit = ap_retry_limit;
-	} else if (os_strcmp(buf, "ap_retry_limit_data") == 0) {
-		uint32_t ap_retry_limit_data = atoi(pos);
-		if (ap_retry_limit_data > AP_TX_RETRY_LIMIT_MAX) {
-			wpa_printf(MSG_ERROR, "Invalid AP retry limit data value %d",
-					ap_retry_limit_data);
-			return 1;
-		}
-		conf->ap_retry_limit_data = ap_retry_limit_data;
 	} else if (os_strcmp(buf, "ap_retry_limit_exce") == 0) {
 		u8 ap_retry_limit_exce = atoi(pos);
 		if (ap_retry_limit_exce > AP_TX_EXCE_RETRY_LIMIT_DEFAULT) {
diff --git a/hostapd/mxl_config.c b/hostapd/mxl_config.c
index af5654da4..a057b11ea 100644
--- a/hostapd/mxl_config.c
+++ b/hostapd/mxl_config.c
@@ -1334,6 +1334,30 @@ int mxl_hostapd_config_fill (struct hostapd_config *conf,
 			return 0;
 		}
 		mxl_conf->background_cac = val;
+	} else if (os_strcmp(buf, "ap_retry_limit") == 0) {
+		uint32_t ap_retry_limit = atoi(pos);
+		if (ap_retry_limit > AP_TX_RETRY_LIMIT_MAX) {
+			wpa_printf(MSG_ERROR, "Invalid AP retry limit value %d",
+				ap_retry_limit);
+			return 0;
+		}
+		mxl_conf->ap_retry_limit = ap_retry_limit;
+	} else if (os_strcmp(buf, "ap_retry_limit_data") == 0) {
+		uint32_t ap_retry_limit_data = atoi(pos);
+		if (ap_retry_limit_data > AP_TX_RETRY_LIMIT_MAX) {
+			wpa_printf(MSG_ERROR, "Invalid AP retry limit data value %d",
+					ap_retry_limit_data);
+			return 0;
+		}
+		mxl_conf->ap_retry_limit_data = ap_retry_limit_data;
+	} else if (os_strcmp(buf, "ap_retry_limit_probe_resp") == 0) {
+		uint32_t ap_retry_limit_probe_resp = atoi(pos);
+		if (ap_retry_limit_probe_resp > AP_TX_RETRY_LIMIT_MAX) {
+			wpa_printf(MSG_ERROR, "Invalid AP retry limit probe response value %d",
+					ap_retry_limit_probe_resp);
+			return 0;
+		}
+		mxl_conf->ap_retry_limit_probe_resp = ap_retry_limit_probe_resp;
 	} else if (os_strcmp(buf, "soft_block_acl_enable") == 0) {
 		int val = atoi(pos);
 		if (!IS_VALID_BOOL_RANGE(val)) {
@@ -1487,6 +1511,9 @@ void mxl_hostapd_config_defaults(struct hostapd_config *conf)
 	mxl_conf->scan_activity_threshold = SCAN_ACTIVITY_THRESHOLD_DEFAULT;
 	mxl_conf->obss_beacon_rssi_threshold = -60;
 
+	mxl_conf->ap_retry_limit = AP_RETRY_INVALID;
+	mxl_conf->ap_retry_limit_data = AP_RETRY_INVALID;
+	mxl_conf->ap_retry_limit_probe_resp = AP_RETRY_INVALID;
 	/* Advertisement protocol IE */
 	conf->adv_proto_query_resp_len = ADV_PROTO_QUERY_RESP_LEN_DEFAULT;
 	mxl_conf->event_cache_interval = 1;
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 74a4a5394..71cd5c562 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -264,8 +264,6 @@ struct hostapd_config * hostapd_config_defaults(void)
 
 	conf->num_bss = 1;
 
-	conf->ap_retry_limit = AP_RETRY_INVALID;	/* init with invalid value. */
-	conf->ap_retry_limit_data = AP_RETRY_INVALID;	/* init with invalid value. */
 	conf->beacon_int = 100;
 	conf->sStationsStat = 1;
 	conf->rts_threshold = -2; /* use driver default: 2347 */
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index d3623fc5e..d37576f07 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1379,12 +1379,6 @@ struct hostapd_config {
 	int sDynamicMuCdbConfig;
 	int sFixedLtfGi;
 #define AP_TX_EXCE_RETRY_LIMIT_DEFAULT  50
-#define AP_TX_RETRY_LIMIT_MAX  15
-#define AP_TX_RETRY_LIMIT_DEFAULT  3
-#define AP_TX_RETRY_LIMIT_DEFAULT_DATA  7
-#define AP_RETRY_INVALID	0xff
-	u8 ap_retry_limit;
-	u8 ap_retry_limit_data;
 #ifdef CONFIG_IEEE80211AX
 	struct he_phy_capabilities_info he_phy_capab;
 	struct he_operation he_op;
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index ebfe71ef9..94a021a9d 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -2999,7 +2999,6 @@ static void hostapd_post_up_vendor_cmd_guard_interval(struct hostapd_data *hapd,
 static void hostapd_post_up_vendor_radio_cmd(struct hostapd_iface *iface)
 {
 	struct hostapd_data *hapd = iface->bss[0];
-	int ap_retry_limit_cfg[2];
 
 	if (iface->conf->sErpSet) {
 		if (hostapd_drv_vendor_cmd(hapd, OUI_LTQ, LTQ_NL80211_VENDOR_SUBCMD_SET_ERP,
@@ -3047,24 +3046,6 @@ static void hostapd_post_up_vendor_radio_cmd(struct hostapd_iface *iface)
 			wpa_printf(MSG_WARNING, "set sFWRecovery failed");
 	}
 
-	/* Set AP retry limit only if user configured this */
-	ap_retry_limit_cfg[0] = iface->conf->ap_retry_limit;
-	ap_retry_limit_cfg[1] = iface->conf->ap_retry_limit_data;
-	if ((ap_retry_limit_cfg[0] != AP_RETRY_INVALID) ||
-			(ap_retry_limit_cfg[1] != AP_RETRY_INVALID)) {
-
-		if (ap_retry_limit_cfg[0] == AP_RETRY_INVALID)
-			ap_retry_limit_cfg[0] = AP_TX_RETRY_LIMIT_DEFAULT;
-
-		if (ap_retry_limit_cfg[1] == AP_RETRY_INVALID)
-			ap_retry_limit_cfg[1] = AP_TX_RETRY_LIMIT_DEFAULT_DATA;
-
-		if (hostapd_drv_vendor_cmd(hapd, OUI_LTQ, LTQ_NL80211_VENDOR_SUBCMD_SET_AP_RETRY_LIMIT,
-					(u8*)ap_retry_limit_cfg, sizeof(ap_retry_limit_cfg),
-					NESTED_ATTR_NOT_USED, NULL))
-			wpa_printf(MSG_WARNING, "set ap_retry_limit %d failed", iface->conf->ap_retry_limit);
-	}
-
 	hostapd_post_up_vendor_cmd_mu_type(hapd, iface->conf);
 	hostapd_post_up_vendor_cmd_guard_interval(hapd, iface->conf->sFixedLtfGi, iface->conf->ieee80211ax, iface->conf->ieee80211ac);
 }
diff --git a/src/ap/mxl_config.h b/src/ap/mxl_config.h
index a6bfb5abe..cbc7a5130 100644
--- a/src/ap/mxl_config.h
+++ b/src/ap/mxl_config.h
@@ -264,6 +264,9 @@ struct mxl_hostapd_config {
 	u16 scan_activity_threshold;
 	int obss_beacon_rssi_threshold;
 	int ignore_40_mhz_intolerant;
+	u8 ap_retry_limit;
+	u8 ap_retry_limit_data;
+	u8 ap_retry_limit_probe_resp;
 
 	int allow_scan_during_cac;
 	int sub_band_dfs;
@@ -342,7 +345,11 @@ void mxl_hostapd_config_free_bss(struct hostapd_bss_config *bss);
 #define SCAN_ACTIVITY_THRESHOLD_MAX 100
 #define OBSS_BEACON_RSSI_TH_MIN (-100)
 #define OBSS_BEACON_RSSI_TH_MAX 0
-
+#define AP_TX_RETRY_LIMIT_MAX 15
+#define AP_TX_RETRY_LIMIT_DEFAULT 4
+#define AP_TX_RETRY_LIMIT_DEFAULT_DATA 7
+#define AP_TX_RETRY_LIMIT_DEFAULT_PROBE_RESP 2
+#define AP_RETRY_INVALID 255
 
 #define MAX_EVENT_CACHE_INTERVAL 3600
 
diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index c25964d32..686ba3e50 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -1487,7 +1487,29 @@ int mxl_hostapd_setup_bss_post(struct hostapd_data *hapd)
 void mxl_hostapd_setup_interface_post(struct hostapd_iface *iface)
 {
 	struct hostapd_data *hapd = iface->bss[0];
-	(void)hapd;
+	struct mxl_hostapd_config *mxl_conf = &hapd->iconf->mxl_conf;
+	int ap_retry_limit_cfg[3];
+
+	/* Set AP retry limit only if user configured this */
+	ap_retry_limit_cfg[0] = mxl_conf->ap_retry_limit;
+	ap_retry_limit_cfg[1] = mxl_conf->ap_retry_limit_data;
+	ap_retry_limit_cfg[2] = mxl_conf->ap_retry_limit_probe_resp;
+	if ((ap_retry_limit_cfg[0] != AP_RETRY_INVALID) ||
+		(ap_retry_limit_cfg[1] != AP_RETRY_INVALID) ||
+		(ap_retry_limit_cfg[2] != AP_RETRY_INVALID)) {
+
+		if (ap_retry_limit_cfg[0] == AP_RETRY_INVALID)
+			ap_retry_limit_cfg[0] = AP_TX_RETRY_LIMIT_DEFAULT;
+
+		if (ap_retry_limit_cfg[1] == AP_RETRY_INVALID)
+			ap_retry_limit_cfg[1] = AP_TX_RETRY_LIMIT_DEFAULT_DATA;
+
+		if (ap_retry_limit_cfg[2] == AP_RETRY_INVALID)
+			ap_retry_limit_cfg[2] = AP_TX_RETRY_LIMIT_DEFAULT_PROBE_RESP;
+			
+		if (MXL_DRV_VENDOR_SET(LTQ_NL80211_VENDOR_SUBCMD_SET_AP_RETRY_LIMIT, ap_retry_limit_cfg, sizeof(ap_retry_limit_cfg)))
+			wpa_printf(MSG_WARNING, "set sTxRetryLimit failed");
+	}
 }
 
 int mxl_hostapd_drv_get_vendor_data(struct hostapd_data *hapd,
-- 
2.43.0

