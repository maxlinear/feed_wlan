From df2352a000baa4fccc0d920c4c40280439801530 Mon Sep 17 00:00:00 2001
From: Dmitrijs Martinovs <dmartinovs@maxlinear.com>
Date: Wed, 12 Jul 2023 16:40:36 +0200
Subject: [PATCH] WLANRTSYS-56901: Send initial data to the driver via vendor
 command

---
 hostapd/config_file.c         |  8 ++++++++
 src/ap/ap_config.c            |  1 +
 src/ap/ap_config.h            |  1 +
 src/ap/beacon.c               |  8 ++++++--
 src/ap/hostapd.c              | 27 +++++++++++++++++++++++++++
 src/ap/ieee802_11.c           |  7 ++++---
 src/common/vendor_cmds_copy.h | 11 +++++++++++
 7 files changed, 58 insertions(+), 5 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index d82857c77..627866a24 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4038,6 +4038,14 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		conf->ht_cap_ampdu_parameters &= ~HT_CAP_AMPDU_MINIMUM_MPDU_START_SPACING;
 		conf->ht_cap_ampdu_parameters |= (atoi(pos) << 2) & HT_CAP_AMPDU_MINIMUM_MPDU_START_SPACING;
 		conf->ht_cap_ampdu_parameters_override_mask |= 0x2;
+	} else if (os_strcmp(buf, "ieee80211n_acax_compat") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_BOOL_RANGE(val)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid ieee80211n_acax_compat %d",
+				line, val);
+			return 1;
+		}
+		conf->ieee80211n_acax_compat = val;
 #ifdef CONFIG_IEEE80211AC
 	} else if (os_strcmp(buf, "ieee80211ac") == 0) {
 		conf->ieee80211ac = atoi(pos);
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 90c90a472..1c0c67762 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -297,6 +297,7 @@ struct hostapd_config * hostapd_config_defaults(void)
 	conf->ap_table_expiration_time = 60;
 	conf->track_sta_max_age = 180;
 	conf->assoc_rsp_rx_mcs_mask = 1;
+	conf->ieee80211n_acax_compat = 0;
 	conf->sPowerSelection = 0; /* 100% */
 	conf->sInterferDetThresh = INTERFERENCE_DET_THRESH_DEFAULT;
 	conf->sDynamicMuTypeDownLink = 3;
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 13617c87b..aab58cf00 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1278,6 +1278,7 @@ struct hostapd_config {
 	u8  ht_cap_ampdu_parameters;
 	u8  ht_cap_ampdu_parameters_override_mask;
 	int ieee80211n;
+	int ieee80211n_acax_compat;
 	int secondary_channel;
 	bool secondary_channel_set;
 	int no_pri_sec_switch;
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index a85a0f83c..a2d77d2f1 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -611,6 +611,7 @@ struct probe_resp_params {
 	u8 *ecsa_pos;
 	const u8 *known_bss;
 	u8 known_bss_len;
+	int is_he_in_req;
 
 #ifdef CONFIG_IEEE80211AX
 	u8 *cca_pos;
@@ -652,7 +653,7 @@ static size_t hostapd_probe_resp_elems_len(struct hostapd_data *hapd,
 	}
 
 #ifdef CONFIG_IEEE80211AX
-	if (hapd->iconf->ieee80211ax && !hapd->conf->disable_11ax) {
+	if ((hapd->iconf->ieee80211ax && !hapd->conf->disable_11ax) && (params->is_he_in_req || !hapd->iconf->ieee80211n_acax_compat)) {
 		buflen += 3 + sizeof(struct ieee80211_he_capabilities) +
 			3 + sizeof(struct ieee80211_he_operation) +
 			3 + sizeof(struct ieee80211_he_mu_edca_parameter_set) +
@@ -867,7 +868,7 @@ static u8 * hostapd_probe_resp_fill_elems(struct hostapd_data *hapd,
 	pos = hostapd_get_rsnxe(hapd, pos, epos - pos);
 
 #ifdef CONFIG_IEEE80211AX
-	if (hapd->iconf->ieee80211ax && !hapd->conf->disable_11ax) {
+	if ((hapd->iconf->ieee80211ax && !hapd->conf->disable_11ax) && (params->is_he_in_req || !hapd->iconf->ieee80211n_acax_compat)) {
 		u8 *cca_pos;
 
 		pos = hostapd_eid_he_capab(hapd, pos, IEEE80211_MODE_AP);
@@ -1730,6 +1731,7 @@ void handle_probe_req(struct hostapd_data *hapd,
 	params.known_bss = elems.mbssid_known_bss;
 	params.known_bss_len = elems.mbssid_known_bss_len;
 	params.is_ml_sta_info = false;
+	params.is_he_in_req = (elems.he_capabilities != NULL);
 
 	hostapd_gen_probe_resp(hapd, &params);
 
@@ -1825,6 +1827,7 @@ static u8 * hostapd_probe_resp_offloads(struct hostapd_data *hapd,
 	params.is_ml_sta_info = false;
 	params.mld_ap = NULL;
 	params.mld_info = NULL;
+	params.is_he_in_req = 1;
 
 	hostapd_gen_probe_resp(hapd, &params);
 	*resp_len = params.resp_len;
@@ -1872,6 +1875,7 @@ static u8 * hostapd_unsol_bcast_probe_resp(struct hostapd_data *hapd,
 	probe_params.is_ml_sta_info = false;
 	probe_params.mld_ap = NULL;
 	probe_params.mld_info = NULL;
+	probe_params.is_he_in_req = 1;
 
 	hostapd_gen_probe_resp(hapd, &probe_params);
 	params->unsol_bcast_probe_resp_tmpl_len = probe_params.resp_len;
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 15734d5a7..2a73cb46a 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -2170,6 +2170,30 @@ static void channel_list_update_timeout(void *eloop_ctx, void *timeout_ctx)
 	setup_interface2(iface);
 }
 
+static int send_initial_params_to_driver (struct hostapd_data *hapd, const char *country)
+{
+	errno_t err;
+	struct intel_vendor_initial_data_cfg data;
+
+	os_memset(&data, 0, sizeof(data));
+	err = memcpy_s(data.alpha2, sizeof(data.alpha2), country, 2); /* third char will not be sent */
+	if (EOK != err) {
+		wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
+		return -1;
+	}
+	data.is_11b = (HOSTAPD_MODE_IEEE80211B == hapd->iconf->hw_mode);
+	data.radar_detection = hapd->iconf->ieee80211h;
+	data.ieee80211n_acax_compat = hapd->iconf->ieee80211n_acax_compat;
+
+	if (hostapd_drv_vendor_cmd(hapd, OUI_LTQ, LTQ_NL80211_VENDOR_SUBCMD_INITIAL_DATA,
+						(const u8*)&data, sizeof(data), NESTED_ATTR_NOT_USED, NULL)) {
+		wpa_printf(MSG_ERROR, "Failed to send driver vendor command LTQ_NL80211_VENDOR_SUBCMD_INITIAL_DATA");
+		return -1;
+	}
+
+	return 0;
+}
+
 static void
 hostapd_conf_update_country_code (struct hostapd_iface *iface, const char *new_country)
 {
@@ -2351,6 +2375,9 @@ static int setup_interface(struct hostapd_iface *iface)
 				previous_country, country);
 		}
 
+		if (send_initial_params_to_driver(hapd, country))
+			return -1;
+
 		if (os_strncmp(previous_country, country, 2) != 0) {
 			wpa_printf(MSG_DEBUG, "Continue interface setup after channel list update");
 			iface->wait_channel_update = 1;
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 4620b667c..7a61c07e2 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -5013,9 +5013,10 @@ static u16 send_assoc_resp(struct hostapd_data *hapd, struct sta_info *sta,
 	p = hostapd_eid_ht_operation(hapd, p);
 
 #ifdef CONFIG_IEEE80211AC
-	if ((hapd->iconf->ieee80211ac && !hapd->conf->disable_11ac &&
+	if (((hapd->iconf->ieee80211ac && !hapd->conf->disable_11ac &&
 	    !is_6ghz_op_class(hapd->iconf->op_class)) ||
-	    (hapd->conf->vendor_vht && (sta && (sta->flags & (WLAN_STA_VENDOR2_VHT | WLAN_STA_VENDOR_VHT))))) {
+	    (hapd->conf->vendor_vht && (sta && (sta->flags & (WLAN_STA_VENDOR2_VHT | WLAN_STA_VENDOR_VHT))))) &&
+		(!hapd->iconf->ieee80211n_acax_compat || (sta && (sta->flags & WLAN_STA_VHT)))) {
 		u32 nsts = 0, sta_nsts;
 
 		if (sta && hapd->conf->use_sta_nsts && sta->vht_capabilities) {
@@ -5039,7 +5040,7 @@ static u16 send_assoc_resp(struct hostapd_data *hapd, struct sta_info *sta,
 
 #ifdef CONFIG_IEEE80211AX
 	if ((hapd->iconf->ieee80211ax && !hapd->conf->disable_11ax) &&
-		(sta && (sta->flags & WLAN_STA_HE))) {
+		(!hapd->iconf->ieee80211n_acax_compat || (sta && (sta->flags & WLAN_STA_HE)))) {
 		u8 *cca_pos;
 		p = hostapd_eid_he_capab(hapd, p, IEEE80211_MODE_AP);
 		p = hostapd_eid_he_operation(hapd, p);
diff --git a/src/common/vendor_cmds_copy.h b/src/common/vendor_cmds_copy.h
index aaea09eb2..b435e1e5b 100644
--- a/src/common/vendor_cmds_copy.h
+++ b/src/common/vendor_cmds_copy.h
@@ -446,6 +446,9 @@ struct mxl_ml_sta_info {
   u16 aid;
 } __attribute__ ((packed));
 
+
+#define COUNTRY_CODE_MAX_LEN                  3
+
 /* Maximum possible number of antennas for statistics in driver */
 #define WAVE_STAT_MAX_ANTENNAS                5
 #define INTEL_CSA_DEAUTH_TX_TIME_ARR_SIZE     2
@@ -460,6 +463,14 @@ enum {
   CSA_DEAUTH_MODE_BROADCAST
 };
 
+struct intel_vendor_initial_data_cfg
+{
+  char  alpha2[COUNTRY_CODE_MAX_LEN];
+  u8  is_11b;
+  u8  radar_detection;
+  u8  ieee80211n_acax_compat;
+} __attribute__ ((packed));
+
 /* SoftBlock Timer ACL configuration */
 struct intel_vendor_sb_timer_acl_cfg {
   int timer_acl_on;
-- 
2.43.0

