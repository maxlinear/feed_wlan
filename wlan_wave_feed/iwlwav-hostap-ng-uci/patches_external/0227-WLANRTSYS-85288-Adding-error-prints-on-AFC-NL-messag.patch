From 1219a4fe1a6bd4aa8a9696fa695bb3ed94df7d48 Mon Sep 17 00:00:00 2001
From: rmunjewar <rmunjewar@maxlinear.com>
Date: Thu, 17 Oct 2024 11:27:47 +0530
Subject: [PATCH] WLANRTSYS-85288 Adding error prints on AFC NL message failure

FIXUP to WLANRTSYS-83162 Ported afcd and composite mode changes from legacy hostapd

Signed-Off-By : William <washikyan@maxlinear.com>
---
 src/ap/mxl_afc.c | 36 +++++++++++++++++++++++++++++-------
 1 file changed, 29 insertions(+), 7 deletions(-)

diff --git a/src/ap/mxl_afc.c b/src/ap/mxl_afc.c
index 4f2329f01..e68f97bbf 100644
--- a/src/ap/mxl_afc.c
+++ b/src/ap/mxl_afc.c
@@ -23,7 +23,7 @@
 #define FREQ_MHZ_TO_KHZ(freq)		((freq) * 1000)
 #define FREQ_KHZ_TO_MHZ(freq)		((freq) / 1000)
 
-static void mxl_hostap_afc_add_regulatory_rule(struct ieee80211_regdomain *regd, uint32_t idx, uint32_t start_freq_mhz,
+static void mxl_hostap_afc_set_regulatory_rule(struct ieee80211_regdomain *regd, uint32_t idx, uint32_t start_freq_mhz,
 					   uint32_t end_freq_mhz, uint32_t bw_mhz, uint32_t eirp)
 {
 	if (start_freq_mhz && end_freq_mhz && bw_mhz && eirp) {
@@ -35,6 +35,18 @@ static void mxl_hostap_afc_add_regulatory_rule(struct ieee80211_regdomain *regd,
 	}
 }
 
+static void mxl_hostap_afc_get_regulatory_rule(struct ieee80211_regdomain *regd, uint32_t idx, uint32_t *start_freq_mhz,
+					   uint32_t *end_freq_mhz, uint32_t *bw_mhz, uint32_t *eirp)
+{
+	if (start_freq_mhz && end_freq_mhz && bw_mhz && eirp) {
+		/* Revert the driver's KHz to hostapd's native MHz */
+		*start_freq_mhz = FREQ_KHZ_TO_MHZ(regd->reg_rules[idx].freq_range.start_freq_khz);
+		*end_freq_mhz = FREQ_KHZ_TO_MHZ(regd->reg_rules[idx].freq_range.end_freq_khz);
+		*bw_mhz = FREQ_KHZ_TO_MHZ(regd->reg_rules[idx].freq_range.max_bandwidth_khz);
+		*eirp = regd->reg_rules[idx].power_rule.max_eirp / EIRP_UNIT_CONVERSION;
+	}
+}
+
 uint32_t mxl_afc_calculate_psd_to_eirp(int psd, uint32_t bw_mhz)
 {
 	return (uint32_t)(psd + (10 * (log10(bw_mhz))));
@@ -57,7 +69,7 @@ static void mxl_hostap_afc_parse_chan_regrule(struct hostapd_iface *iface, struc
 		end_freq_mhz = center_freq_mhz + (bw_mhz / 2);
 		max_eirp = (uint32_t)iface->afc.chan_info_list[chan_idx].power;
 
-		mxl_hostap_afc_add_regulatory_rule(regd, chan_idx, start_freq_mhz,
+		mxl_hostap_afc_set_regulatory_rule(regd, chan_idx, start_freq_mhz,
 					       end_freq_mhz, bw_mhz, max_eirp);
 	}
 }
@@ -73,7 +85,7 @@ static void mxl_hostap_afc_parse_freq_regrule(struct hostapd_iface *iface, struc
 			continue;
 
 		eirp = mxl_afc_calculate_psd_to_eirp(iface->afc.freq_range[freq_idx].max_psd, bw_mhz);
-		mxl_hostap_afc_add_regulatory_rule(regd, freq_idx, iface->afc.freq_range[freq_idx].low_freq,
+		mxl_hostap_afc_set_regulatory_rule(regd, freq_idx, iface->afc.freq_range[freq_idx].low_freq,
 					       iface->afc.freq_range[freq_idx].high_freq, bw_mhz, eirp);
 	}
 }
@@ -115,7 +127,7 @@ static int mxl_hostap_afc_parse_chan_and_freq_regrule(struct hostapd_iface *ifac
 			}
 		}
 		if (!rule_exist) {
-			mxl_hostap_afc_add_regulatory_rule(regd, num_next_idx, start_freq_mhz, end_freq_mhz, bw_mhz, eirp);
+			mxl_hostap_afc_set_regulatory_rule(regd, num_next_idx, start_freq_mhz, end_freq_mhz, bw_mhz, eirp);
 			num_next_idx++;
 		}
 	}
@@ -156,10 +168,20 @@ int mxl_hostap_afc_construct_regrule_from_afc_data(struct hostapd_iface *iface)
 		regd->n_reg_rules = 0;
 	}
 
-	if(MXL_DRV_VENDOR_SET(LTQ_NL80211_VENDOR_SUBCMD_UPDATE_AFC_INFO,
+	if (MXL_DRV_VENDOR_SET(LTQ_NL80211_VENDOR_SUBCMD_UPDATE_AFC_INFO,
 			      (u8*)regd,
-			      reg_size)){
-		wpa_printf(MSG_ERROR, "AFC : failed to send NL msg to driver");
+			      reg_size)) {
+		uint32_t err_start_freq_mhz, err_end_freq_mhz, err_bw_mhz, err_eirp;
+		wpa_printf(MSG_ERROR, "AFC : failed to send NL msg of size %zu to driver", reg_size);
+		wpa_printf(MSG_ERROR, "AFC : failed to send %d frequencies and %d channels as condensed list of %d reg_rules",
+			iface->afc.num_freq_range, iface->afc.num_freq_range, regd->n_reg_rules);
+		wpa_printf(MSG_ERROR, "AFC : failed NL msg was for afc with %s data with a %d second timeout",
+			(iface->afc.data_valid ? "valid" : "invalid"), iface->afc.timeout);
+		for(int reg_i = 0; reg_i < regd->n_reg_rules; reg_i++) {
+			mxl_hostap_afc_get_regulatory_rule(regd, reg_i, &err_start_freq_mhz, &err_end_freq_mhz, &err_bw_mhz, &err_eirp);
+			wpa_printf(MSG_ERROR, "AFC : regd rule:%d start_mhz:%d end_mhz:%d bw_mhz:%d eirp:%d",
+				reg_i, err_start_freq_mhz, err_end_freq_mhz, err_bw_mhz, err_eirp);
+		}
 		goto fail;
 	}
 	os_free(regd);
-- 
2.43.0

