From 28e4be511dd98c3c053fbf46c019c6a79b5f6ef8 Mon Sep 17 00:00:00 2001
From: Vignesh Lal T D <vdesikachary@maxlinear.com>
Date: Mon, 7 Oct 2024 10:33:01 +0530
Subject: [PATCH] WLANRTSYS-85381 Validate all sibling link available on that
 radio before CSA

Issue:
CSA is triggered on 6GHz band, set beacon template gets called with critical
flag as 1 and sync with csa as 1 for vapid id #32 and #17 and tries for
another mlo on 6GHz and 5GHz, csa fails as sibling pointer is NULL. Before csa,
hostapd was crashed and restarted, radio 2.4GHz and 6GHz are up and 5GHz radio
yet to come up, in mean time csa gets triggered for 6GHz and cause this issue.

Fix:
Verify all mld sibling link is available on that radio before pushing beacon
template during csa operation.

Unit test:
Validated csa with MLD configuration.

FIXUP to WLANRTSYS-63318 MLO changes in iwlwav-hostap-ng: ML CSA with puncturing and BSS critical update
---
 src/ap/mxl_hostapd.c |  7 +++++++
 src/ap/mxl_mld.c     | 17 +++++++++++++++++
 src/ap/mxl_mld.h     |  1 +
 3 files changed, 25 insertions(+)

diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index de3617402..48100bd72 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -2815,6 +2815,13 @@ int mxl_switch_channel(struct hostapd_data *hapd, struct csa_settings *settings)
 	struct hostapd_iface *iface = hapd->iface;
 	struct hostapd_data *hapd_csa;
 
+#ifdef CONFIG_IEEE80211BE_MXL_MLO
+	if (!mxl_is_sibling_hapd_init_completed(iface)) {
+		wpa_printf(MSG_ERROR, "Sibiling hapd init is not completed");
+		return -1;
+	}
+#endif
+
 	/* memset autococ chan_restore to zero, whenever new channel switch happens except during
 	 * BW_SWITCH_DOWN,since during BW_SWITCH_DOWN coc_chan_restore contains original chan def. */
 	if (iface->mxl_iface.coc_BW != BW_MOVE_DOWN && (iface->coc_chan_restore.primary)) {
diff --git a/src/ap/mxl_mld.c b/src/ap/mxl_mld.c
index 112afc705..7946280c5 100644
--- a/src/ap/mxl_mld.c
+++ b/src/ap/mxl_mld.c
@@ -1785,3 +1785,20 @@ void mxl_hostapd_eid_ml_critical_update(struct hostapd_data *hapd, u16 *capab_in
 		*capab_info |= WLAN_CAPABILITY_ML_CRITICAL_UPDATE;
 	}
 }
+
+bool mxl_is_sibling_hapd_init_completed(struct hostapd_iface *iface)
+{
+	struct hostapd_data *hapd;
+	int i;
+
+	for (i = 1; i < iface->num_bss; i++) {
+		hapd = iface->bss[i];
+		if (hapd && hapd->iconf->ieee80211be &&
+		    mxl_is_mlo_enabled(hapd->conf) &&
+		    !hapd->mxl_data.sibling_hapd) {
+			/* The sibling hapd is not ready */
+			return false;
+		}
+	}
+	return true;
+}
diff --git a/src/ap/mxl_mld.h b/src/ap/mxl_mld.h
index 9053aa2b6..3bd806333 100644
--- a/src/ap/mxl_mld.h
+++ b/src/ap/mxl_mld.h
@@ -203,6 +203,7 @@ int mxl_ml_send_bss_critical_update_info(struct hostapd_data *hapd,
 					 u8 flags, u8 op_class, u32 max_chan_switch_time);
 int mxl_ml_handle_critical_update(struct hostapd_data *hapd);
 int mxl_ml_handle_csa_critical_update(struct hostapd_data *hapd, struct csa_settings *settings);
+bool mxl_is_sibling_hapd_init_completed(struct hostapd_iface *iface);
 #else
 static inline bool mxl_is_ml_vap_configured(struct hostapd_iface *iface)
 {
-- 
2.43.0

