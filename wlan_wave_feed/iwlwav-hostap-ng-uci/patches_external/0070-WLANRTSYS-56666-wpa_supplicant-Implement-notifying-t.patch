From 3a1d5fa495c603f36def4f7cdbcd089c1f06ba5f Mon Sep 17 00:00:00 2001
From: mvulsx <mvuls@maxlinear.com>
Date: Mon, 3 Jul 2023 13:34:25 +0000
Subject: [PATCH] WLANRTSYS-56666: wpa_supplicant: Implement notifying to upper
 layers mgmt frames with specified VS IEs

Signed-off-by: mvulsx <mvuls@maxlinear.com>
---
 src/common/ieee802_11_common.h     |  2 +
 src/common/wpa_ctrl.h              |  6 ++
 src/drivers/driver.h               |  4 +-
 src/drivers/driver_bsd.c           |  2 +-
 src/drivers/driver_nl80211.c       | 38 +++++++++++-
 src/drivers/driver_nl80211.h       |  2 +
 src/drivers/driver_nl80211_event.c |  5 +-
 wpa_supplicant/driver_i.h          |  4 +-
 wpa_supplicant/events.c            | 99 ++++++++++++++++++++++++++++++
 wpa_supplicant/wpa_cli.c           | 10 +++
 wpa_supplicant/wpa_priv.c          |  2 +-
 wpa_supplicant/wpa_supplicant.c    | 17 ++++-
 wpa_supplicant/wpa_supplicant_i.h  |  3 +
 13 files changed, 184 insertions(+), 10 deletions(-)

diff --git a/src/common/ieee802_11_common.h b/src/common/ieee802_11_common.h
index 5c4a9ec5e..1792f5a4a 100644
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -58,6 +58,7 @@ struct ieee802_11_elems {
 	const u8 *opmode_notif;
 	const u8 *vendor_ht_cap;
 	const u8 *vendor_vht;
+	const u8 *vendor_ie_to_notify;
 	const u8 *p2p;
 	const u8 *wfd;
 	const u8 *link_id;
@@ -129,6 +130,7 @@ struct ieee802_11_elems {
 	u8 peer_mgmt_len;
 	u8 vendor_ht_cap_len;
 	u8 vendor_vht_len;
+	u8 vendor_ie_to_notify_len;
 	u8 p2p_len;
 	u8 wfd_len;
 	u8 interworking_len;
diff --git a/src/common/wpa_ctrl.h b/src/common/wpa_ctrl.h
index 5ff02dcaa..80b0c6bb2 100644
--- a/src/common/wpa_ctrl.h
+++ b/src/common/wpa_ctrl.h
@@ -104,6 +104,12 @@ extern "C" {
 /** SAE authentication failed due to unknown password identifier */
 #define WPA_EVENT_SAE_UNKNOWN_PASSWORD_IDENTIFIER \
 	"CTRL-EVENT-SAE-UNKNOWN-PASSWORD-IDENTIFIER "
+
+#define WPA_EVENT_BEACON	"CTRL-EVENT-BEACON "
+#define WPA_EVENT_PROBE_RSP	"CTRL-EVENT-PROBE-RSP "
+#define WPA_EVENT_AUTH_RSP	"CTRL-EVENT-AUTH-RSP "
+#define WPA_EVENT_ASSOC_RSP	"CTRL-EVENT-ASSOC-RSP "
+#define WPA_EVENT_REASSOC_RSP	"CTRL-EVENT-REASSOC-RSP "
 /** Unprotected Beacon frame dropped */
 #define WPA_EVENT_UNPROT_BEACON "CTRL-EVENT-UNPROT-BEACON "
 /** Decision made to do a within-ESS roam */
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 31e1321e1..1767fff24 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -3456,12 +3456,14 @@ struct wpa_driver_ops {
 	 * e.g., wpa_supplicant_event()
 	 * @ifname: interface name, e.g., wlan0
 	 * @global_priv: private driver global data from global_init()
+	 * @param: driver specific configuration parameters
 	 * Returns: Pointer to private data, %NULL on failure
 	 *
 	 * This function can be used instead of init() if the driver wrapper
 	 * uses global data.
 	 */
-	void * (*init2)(void *ctx, const char *ifname, void *global_priv);
+	void * (*init2)(void *ctx, const char *ifname, void *global_priv,
+			const char *param);
 
 	/**
 	 * get_interfaces - Get information about available interfaces
diff --git a/src/drivers/driver_bsd.c b/src/drivers/driver_bsd.c
index 850637f0d..2df625650 100644
--- a/src/drivers/driver_bsd.c
+++ b/src/drivers/driver_bsd.c
@@ -1558,7 +1558,7 @@ get80211opmode(struct bsd_driver_data *drv)
 }
 
 static void *
-wpa_driver_bsd_init(void *ctx, const char *ifname, void *priv)
+wpa_driver_bsd_init(void *ctx, const char *ifname, void *priv, const char *param)
 {
 #define	GETPARAM(drv, param, v) \
 	(((v) = get80211param(drv, param)) != -1)
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 2f8a1d94e..cfe62796b 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -2533,10 +2533,10 @@ failed:
  * Returns: Pointer to private data, %NULL on failure
  */
 static void * wpa_driver_nl80211_init(void *ctx, const char *ifname,
-				      void *global_priv)
+				      void *global_priv, const char *param)
 {
-	return wpa_driver_nl80211_drv_init(ctx, ifname, global_priv, 0, NULL,
-					   NULL);
+	return wpa_driver_nl80211_drv_init(ctx, ifname, global_priv, 0,
+					   NULL, param);
 }
 
 
@@ -2610,6 +2610,15 @@ static int nl80211_register_action_frame(struct i802_bss *bss,
 }
 
 
+static int nl80211_register_mgmt_frame(struct i802_bss *bss, u16 stype,
+				       const u8 *match, size_t match_len)
+{
+	u16 type = (WLAN_FC_TYPE_MGMT << 2) | (stype << 4);
+	return nl80211_register_frame(bss, bss->nl_mgmt,
+				      type, match, match_len, false);
+}
+
+
 static int nl80211_mgmt_subscribe_non_ap(struct i802_bss *bss)
 {
 	struct wpa_driver_nl80211_data *drv = bss->drv;
@@ -2766,6 +2775,16 @@ static int nl80211_mgmt_subscribe_non_ap(struct i802_bss *bss)
 	    (nl80211_register_action_frame(bss, (u8 *) "\x05\x02", 2) < 0))
 		ret = -1;
 
+	if (drv->vendor_events_filter_len &&
+		nl80211_register_mgmt_frame(bss, WLAN_FC_STYPE_BEACON,
+		(u8 *) drv->vendor_events_filter, drv->vendor_events_filter_len) < 0)
+		ret = -1;
+
+	if (drv->vendor_events_filter_len &&
+		nl80211_register_mgmt_frame(bss, WLAN_FC_STYPE_PROBE_RESP,
+		(u8 *) drv->vendor_events_filter, drv->vendor_events_filter_len) < 0)
+		ret = -1;
+
 	/* Robust AV SCS Response */
 	if (nl80211_register_action_frame(bss, (u8 *) "\x13\x01", 2) < 0)
 		ret = -1;
@@ -9975,6 +9994,7 @@ static int nl80211_set_param(void *priv, const char *param)
 {
 	struct i802_bss *bss = priv;
 	struct wpa_driver_nl80211_data *drv = bss->drv;
+	char *pos;
 
 	if (param == NULL)
 		return 0;
@@ -10005,6 +10025,18 @@ static int nl80211_set_param(void *priv, const char *param)
 		drv->test_use_roc_tx = 1;
 	}
 
+	pos = os_strstr(param, "vendor_events_filter=");
+	if (pos) {
+		pos += 21;
+		drv->vendor_events_filter_len = strnlen_s(pos, sizeof(drv->vendor_events_filter));
+		if (!IS_VALID_RANGE(drv->vendor_events_filter_len, AP_MIN_VALID_CHAR, sizeof(drv->vendor_events_filter) - 1)) {
+			wpa_printf(MSG_DEBUG, "nl80211_set_param - wrong len");
+			return -1;
+		}
+		if (drv->vendor_events_filter_len)
+			hexstr2bin(pos, drv->vendor_events_filter, drv->vendor_events_filter_len);
+	}
+
 	if (os_strstr(param, "control_port=0")) {
 		drv->capa.flags &= ~WPA_DRIVER_FLAGS_CONTROL_PORT;
 		drv->capa.flags2 &= ~(WPA_DRIVER_FLAGS2_CONTROL_PORT_RX |
diff --git a/src/drivers/driver_nl80211.h b/src/drivers/driver_nl80211.h
index 55e01b4b9..17d90b952 100644
--- a/src/drivers/driver_nl80211.h
+++ b/src/drivers/driver_nl80211.h
@@ -247,6 +247,8 @@ struct wpa_driver_nl80211_data {
 	int auth_wep_tx_keyidx;
 	int auth_local_state_change;
 	int auth_p2p;
+	u8 vendor_events_filter[32];
+	u8 vendor_events_filter_len;
 	bool auth_mld;
 	u8 auth_mld_link_id;
 	u8 auth_ap_mld_addr[ETH_ALEN];
diff --git a/src/drivers/driver_nl80211_event.c b/src/drivers/driver_nl80211_event.c
index a30aef5a6..cad60acc6 100644
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -272,7 +272,7 @@ static void mlme_event_assoc(struct wpa_driver_nl80211_data *drv,
 {
 	const struct ieee80211_mgmt *mgmt;
 	union wpa_event_data event;
-	u16 status;
+	u16 status, fc, stype;
 	int ssid_len;
 
 	if (!(drv->capa.flags & WPA_DRIVER_FLAGS_SME) &&
@@ -318,6 +318,9 @@ static void mlme_event_assoc(struct wpa_driver_nl80211_data *drv,
 	event.assoc_info.resp_frame = frame;
 	event.assoc_info.resp_frame_len = len;
 	if (len > 24 + sizeof(mgmt->u.assoc_resp)) {
+		fc = le_to_host16(mgmt->frame_control);
+		stype = WLAN_FC_GET_STYPE(fc);
+		event.assoc_info.reassoc = stype == WLAN_FC_STYPE_REASSOC_RESP;
 		event.assoc_info.resp_ies = (u8 *) mgmt->u.assoc_resp.variable;
 		event.assoc_info.resp_ies_len =
 			len - 24 - sizeof(mgmt->u.assoc_resp);
diff --git a/wpa_supplicant/driver_i.h b/wpa_supplicant/driver_i.h
index 9a4c23537..1778afa7e 100644
--- a/wpa_supplicant/driver_i.h
+++ b/wpa_supplicant/driver_i.h
@@ -13,11 +13,11 @@
 
 /* driver_ops */
 static inline void * wpa_drv_init(struct wpa_supplicant *wpa_s,
-				  const char *ifname)
+				  const char *ifname, const char *param)
 {
 	if (wpa_s->driver->init2)
 		return wpa_s->driver->init2(wpa_s, ifname,
-					    wpa_s->global_drv_priv);
+					    wpa_s->global_drv_priv, param);
 	if (wpa_s->driver->init) {
 		return wpa_s->driver->init(wpa_s, ifname);
 	}
diff --git a/wpa_supplicant/events.c b/wpa_supplicant/events.c
index b33e5da1e..a72ece681 100644
--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -3296,12 +3296,82 @@ static int wpa_supplicant_use_own_rsne_params(struct wpa_supplicant *wpa_s,
 	return 0;
 }
 
+static ParseRes ieee802_11_parse_configurable_vendor(const u8 *start, size_t len,
+				struct ieee802_11_elems *elems,
+				u8 *vendor_events_filter, u8 vendor_events_filter_len)
+{
+	size_t left = len;
+	const u8 *pos = start;
+
+	os_memset(elems, 0, sizeof(*elems));
+
+	while (left >= 2) {
+		u8 id, elen;
+
+		id = *pos++;
+		elen = *pos++;
+		left -= 2;
+
+		if (elen > left)
+			return ParseFailed;
+
+		switch (id) {
+		case WLAN_EID_VENDOR_SPECIFIC:
+			if (elen >= 4 && vendor_events_filter && vendor_events_filter_len >= 3) {
+				int i = 0, found = 1;
+				for (i = 0; i < vendor_events_filter_len; i++) {
+					if (pos[i] != vendor_events_filter[i]) {
+						found = 0;
+						break;
+					}
+				}
+				if (found) {
+					elems->vendor_ie_to_notify = pos;
+					elems->vendor_ie_to_notify_len = elen;
+				}
+			}
+			break;
+		default:
+			break;
+		}
+
+		left -= elen;
+		pos += elen;
+	}
+
+	if (left)
+		return ParseFailed;
+
+	return ParseOK;
+}
+
+static void process_configurable_vendor_specific(struct wpa_supplicant *wpa_s,
+				   const u8 *ies, size_t ies_len,
+				   const u8 *addr, const char *event)
+{
+	struct ieee802_11_elems elems;
+
+	if (!ies)
+		return;
+
+	if (ieee802_11_parse_configurable_vendor(ies, ies_len, &elems,
+			wpa_s->vendor_events_filter, wpa_s->vendor_events_filter_len) == ParseFailed)
+		return;
+
+	if (elems.vendor_ie_to_notify) {
+		char str_vs_ie[128];
+		wpa_snprintf_hex(str_vs_ie, 128, elems.vendor_ie_to_notify, elems.vendor_ie_to_notify_len);
+		wpa_msg_ctrl(wpa_s, MSG_INFO, "%s" MACSTR " %s",
+				event, MAC2STR(addr), str_vs_ie);
+	}
+}
 
 static int wpa_supplicant_event_associnfo(struct wpa_supplicant *wpa_s,
 					  union wpa_event_data *data)
 {
 	int l, len, found = 0, found_x = 0, wpa_found, rsn_found;
 	const u8 *p;
+	u8 addr[ETH_ALEN];
 	u8 bssid[ETH_ALEN];
 	bool bssid_known;
 
@@ -3332,6 +3402,15 @@ static int wpa_supplicant_event_associnfo(struct wpa_supplicant *wpa_s,
 
 		multi_ap_process_assoc_resp(wpa_s, data->assoc_info.resp_ies,
 					    data->assoc_info.resp_ies_len);
+
+		if (wpa_drv_get_bssid(wpa_s, addr) < 0)
+			wpa_dbg(wpa_s, MSG_ERROR, "Failed to get BSSID");
+		else if (data->assoc_info.reassoc)
+			process_configurable_vendor_specific(wpa_s, data->assoc_info.resp_ies,
+					data->assoc_info.resp_ies_len, addr, WPA_EVENT_REASSOC_RSP);
+		else
+			process_configurable_vendor_specific(wpa_s, data->assoc_info.resp_ies,
+					data->assoc_info.resp_ies_len, addr, WPA_EVENT_ASSOC_RSP);
 	}
 	if (data->assoc_info.beacon_ies)
 		wpa_hexdump(MSG_DEBUG, "beacon_ies",
@@ -5904,6 +5983,8 @@ void wpa_supplicant_event(void *ctx, enum wpa_event_type event,
 			wpa_printf(MSG_DEBUG,
 				   "FST: MB IEs updated from auth IE");
 #endif /* CONFIG_FST */
+		process_configurable_vendor_specific(wpa_s, data->auth.ies,
+				data->auth.ies_len, data->auth.peer, WPA_EVENT_AUTH_RSP);
 		sme_event_auth(wpa_s, data);
 		wpa_s->auth_status_code = data->auth.status_code;
 		wpas_notify_auth_status_code(wpa_s);
@@ -6364,6 +6445,24 @@ void wpa_supplicant_event(void *ctx, enum wpa_event_type event,
 				break;
 #endif /* CONFIG_PASN */
 
+			if ((stype == WLAN_FC_STYPE_BEACON || stype == WLAN_FC_STYPE_PROBE_RESP ) &&
+					data->rx_mgmt.frame_len > IEEE80211_HDRLEN) {
+				const u8 *src = mgmt->sa;
+				const u8 *ie;
+				size_t ie_len;
+
+				ie = data->rx_mgmt.frame + IEEE80211_HDRLEN;
+				ie_len = data->rx_mgmt.frame_len - IEEE80211_HDRLEN;
+
+				if (stype == WLAN_FC_STYPE_BEACON)
+					process_configurable_vendor_specific(wpa_s, ie, ie_len, src,
+							WPA_EVENT_BEACON);
+				else
+					process_configurable_vendor_specific(wpa_s, ie, ie_len, src,
+							WPA_EVENT_PROBE_RSP);
+				break;
+			}
+
 #ifdef CONFIG_SAE
 			if (stype == WLAN_FC_STYPE_AUTH &&
 			    !(wpa_s->drv_flags & WPA_DRIVER_FLAGS_SME) &&
diff --git a/wpa_supplicant/wpa_cli.c b/wpa_supplicant/wpa_cli.c
index 65078edf1..6438966f9 100644
--- a/wpa_supplicant/wpa_cli.c
+++ b/wpa_supplicant/wpa_cli.c
@@ -4422,6 +4422,16 @@ static void wpa_cli_action_process(const char *msg)
 		wpa_cli_exec(action_file, ifname, pos);
 	} else if (str_starts(pos, HS20_T_C_ACCEPTANCE)) {
 		wpa_cli_exec(action_file, ifname, pos);
+	} else if (str_starts(pos, WPA_EVENT_BEACON)) {
+		wpa_cli_exec(action_file, ifname, pos);
+	} else if (str_starts(pos, WPA_EVENT_PROBE_RSP)) {
+		wpa_cli_exec(action_file, ifname, pos);
+	} else if (str_starts(pos, WPA_EVENT_AUTH_RSP)) {
+		wpa_cli_exec(action_file, ifname, pos);
+	} else if (str_starts(pos, WPA_EVENT_ASSOC_RSP)) {
+		wpa_cli_exec(action_file, ifname, pos);
+	} else if (str_starts(pos, WPA_EVENT_REASSOC_RSP)) {
+		wpa_cli_exec(action_file, ifname, pos);
 	} else if (str_starts(pos, DPP_EVENT_CONF_RECEIVED)) {
 		wpa_cli_exec(action_file, ifname, pos);
 	} else if (str_starts(pos, DPP_EVENT_CONFOBJ_AKM)) {
diff --git a/wpa_supplicant/wpa_priv.c b/wpa_supplicant/wpa_priv.c
index 31a9af650..74db48525 100644
--- a/wpa_supplicant/wpa_priv.c
+++ b/wpa_supplicant/wpa_priv.c
@@ -92,7 +92,7 @@ static void wpa_priv_cmd_register(struct wpa_priv_interface *iface,
 			iface->drv_global_priv = NULL;
 		}
 		iface->drv_priv = iface->driver->init2(iface, iface->ifname,
-						       iface->drv_global_priv);
+						       iface->drv_global_priv, NULL);
 	} else if (iface->driver->init) {
 		iface->drv_priv = iface->driver->init(iface, iface->ifname);
 	} else {
diff --git a/wpa_supplicant/wpa_supplicant.c b/wpa_supplicant/wpa_supplicant.c
index 3e86a8d0e..f033f24ff 100644
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -6923,7 +6923,7 @@ next_driver:
 	if (wpa_supplicant_set_driver(wpa_s, driver) < 0)
 		return -1;
 
-	wpa_s->drv_priv = wpa_drv_init(wpa_s, wpa_s->ifname);
+	wpa_s->drv_priv = wpa_drv_init(wpa_s, wpa_s->ifname, wpa_s->conf->driver_param);
 	if (wpa_s->drv_priv == NULL) {
 		const char *pos;
 		int level = MSG_ERROR;
@@ -6967,6 +6967,19 @@ next_driver:
 	return 0;
 }
 
+void wpas_set_vendor_events_filter(struct wpa_supplicant *wpa_s)
+{
+	if (wpa_s->conf->driver_param) {
+		char *pos = os_strstr(wpa_s->conf->driver_param, "vendor_events_filter=");
+		if (pos) {
+			pos += 21;
+			wpa_s->vendor_events_filter_len = strnlen_s(pos, sizeof(wpa_s->vendor_events_filter));
+			if (IS_VALID_RANGE(wpa_s->vendor_events_filter_len, AP_MIN_VALID_CHAR, sizeof(wpa_s->vendor_events_filter) - 1)) {
+				hexstr2bin(pos, wpa_s->vendor_events_filter, wpa_s->vendor_events_filter_len);
+			}
+		}
+	}
+}
 
 #ifdef CONFIG_GAS_SERVER
 
@@ -7392,6 +7405,8 @@ static int wpa_supplicant_init_iface(struct wpa_supplicant *wpa_s,
 
 	wpa_supplicant_set_default_scan_ies(wpa_s);
 
+	wpas_set_vendor_events_filter(wpa_s);
+
 	return 0;
 }
 
diff --git a/wpa_supplicant/wpa_supplicant_i.h b/wpa_supplicant/wpa_supplicant_i.h
index 2668c10fa..c626781d6 100644
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -1413,6 +1413,9 @@ struct wpa_supplicant {
 	struct wpabuf *lci;
 	struct os_reltime lci_time;
 
+	u8 vendor_events_filter[32];
+	u8 vendor_events_filter_len;
+
 	struct os_reltime beacon_rep_scan;
 
 	/* FILS HLP requests (struct fils_hlp_req) */
-- 
2.43.0

