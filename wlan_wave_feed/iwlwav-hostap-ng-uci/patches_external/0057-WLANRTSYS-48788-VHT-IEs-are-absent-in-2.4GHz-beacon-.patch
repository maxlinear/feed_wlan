From e24cc1f6e79678996390f8a65bf66b8bffa015ff Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Tue, 13 Jun 2023 13:23:09 +0200
Subject: [PATCH] WLANRTSYS-48788: VHT IEs are absent in 2.4GHz beacon from
 opensource hostapd

---
 hostapd/config_file.c          |  3 +++
 src/ap/ap_config.c             |  4 ++--
 src/ap/beacon.c                | 12 ++++++------
 src/ap/hw_features.c           | 19 +++++++++++++++++++
 src/ap/ieee802_11.c            | 13 ++++++++++---
 src/ap/ieee802_11.h            |  2 ++
 src/ap/ieee802_11_vht.c        | 30 ++++++++++++++++++++++++++++++
 src/ap/mxl_config.h            |  1 +
 src/ap/sta_info.h              |  1 +
 src/common/ieee802_11_common.c |  3 ++-
 src/common/ieee802_11_defs.h   |  1 +
 11 files changed, 77 insertions(+), 12 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 2b3c2298f..0878a7415 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4019,6 +4019,9 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 				   line);
 			return 1;
 		}
+#ifdef CONFIG_VENDOR_MXL
+	conf->mxl_conf.vht_capab_set = 1;
+#endif /* CONFIG_VENDOR_MXL */
 	} else if (os_strcmp(buf, "require_vht") == 0) {
 		conf->require_vht = atoi(pos);
 	} else if (os_strcmp(buf, "vht_oper_chwidth") == 0) {
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 71a71cc8f..d64ed4252 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -1444,7 +1444,7 @@ static int hostapd_config_check_bss(struct hostapd_bss_config *bss,
 
 #ifdef CONFIG_IEEE80211AC
 #ifdef CONFIG_WEP
-	if (full_config && conf->ieee80211ac &&
+	if (full_config && (conf->ieee80211ac || bss->vendor_vht) &&
 	    bss->ssid.security_policy == SECURITY_STATIC_WEP) {
 		bss->disable_11ac = true;
 		wpa_printf(MSG_ERROR,
@@ -1452,7 +1452,7 @@ static int hostapd_config_check_bss(struct hostapd_bss_config *bss,
 	}
 #endif /* CONFIG_WEP */
 
-	if (full_config && conf->ieee80211ac && bss->wpa &&
+	if (full_config && (conf->ieee80211ac || bss->vendor_vht) && bss->wpa &&
 	    !(bss->wpa_pairwise & WPA_CIPHER_CCMP) &&
 	    !(bss->rsn_pairwise & (WPA_CIPHER_CCMP | WPA_CIPHER_GCMP |
 				   WPA_CIPHER_CCMP_256 | WPA_CIPHER_GCMP_256)))
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index 0e42acb28..1ddefe72e 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -646,7 +646,7 @@ static size_t hostapd_probe_resp_elems_len(struct hostapd_data *hapd,
 #endif /* CONFIG_FST */
 	if (hapd->conf->vendor_elements)
 		buflen += wpabuf_len(hapd->conf->vendor_elements);
-	if (hapd->conf->vendor_vht) {
+	if (hapd->conf->vendor_vht && !hapd->conf->disable_11ac) {
 		buflen += 5 + 2 + sizeof(struct ieee80211_vht_capabilities) +
 			2 + sizeof(struct ieee80211_vht_operation);
 	}
@@ -835,7 +835,7 @@ static u8 * hostapd_probe_resp_fill_elems(struct hostapd_data *hapd,
 #endif /* CONFIG_FST */
 
 #ifdef CONFIG_IEEE80211AC
-	if (hapd->iconf->ieee80211ac && !hapd->conf->disable_11ac &&
+	if ((hapd->conf->vendor_vht || hapd->iconf->ieee80211ac) && !hapd->conf->disable_11ac &&
 	    !is_6ghz_op_class(hapd->iconf->op_class)) {
 		pos = hostapd_eid_vht_capabilities(hapd, pos, 0);
 		pos = hostapd_eid_vht_operation(hapd, pos);
@@ -908,7 +908,7 @@ static u8 * hostapd_probe_resp_fill_elems(struct hostapd_data *hapd,
 #endif /* CONFIG_IEEE80211BE */
 
 #ifdef CONFIG_IEEE80211AC
-	if (hapd->conf->vendor_vht)
+	if (hapd->conf->vendor_vht && !hapd->conf->disable_11ac)
 		pos = hostapd_eid_vendor_vht(hapd, pos);
 #endif /* CONFIG_IEEE80211AC */
 
@@ -2257,7 +2257,7 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 		tail_len += wpabuf_len(hapd->conf->vendor_elements);
 
 #ifdef CONFIG_IEEE80211AC
-	if (hapd->conf->vendor_vht) {
+	if (hapd->conf->vendor_vht && !hapd->conf->disable_11ac) {
 		tail_len += 5 + 2 + sizeof(struct ieee80211_vht_capabilities) +
 			2 + sizeof(struct ieee80211_vht_operation);
 	}
@@ -2442,7 +2442,7 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 #endif /* CONFIG_FST */
 
 #ifdef CONFIG_IEEE80211AC
-	if (hapd->iconf->ieee80211ac && !hapd->conf->disable_11ac &&
+	if ((hapd->conf->vendor_vht || hapd->iconf->ieee80211ac) && !hapd->conf->disable_11ac &&
 	    !is_6ghz_op_class(hapd->iconf->op_class)) {
 		tailpos = hostapd_eid_vht_capabilities(hapd, tailpos, 0);
 		tailpos = hostapd_eid_vht_operation(hapd, tailpos);
@@ -2519,7 +2519,7 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 #endif /* CONFIG_IEEE80211BE */
 
 #ifdef CONFIG_IEEE80211AC
-	if (hapd->conf->vendor_vht)
+	if (hapd->conf->vendor_vht && !hapd->conf->disable_11ac)
 		tailpos = hostapd_eid_vendor_vht(hapd, tailpos);
 #endif /* CONFIG_IEEE80211AC */
 
diff --git a/src/ap/hw_features.c b/src/ap/hw_features.c
index 21039486c..b1d47cdad 100644
--- a/src/ap/hw_features.c
+++ b/src/ap/hw_features.c
@@ -810,6 +810,19 @@ static int ieee80211ax_supported_he_capab(struct hostapd_iface *iface)
 }
 #endif /* CONFIG_IEEE80211AX */
 
+#ifdef CONFIG_VENDOR_MXL
+static int hostapd_override_capab_vendor_mxl(struct hostapd_iface *iface)
+{
+#ifdef CONFIG_IEEE80211AC
+	/* If VHT Capabs explicitly not set for 2.4GHz, take from HW capabilities for vendor_vht usecase */
+	if (!iface->conf->mxl_conf.vht_capab_set && (iface->current_mode->mode == HOSTAPD_MODE_IEEE80211G))
+		iface->conf->vht_capab = iface->current_mode->vht_capab;
+
+#endif /* CONFIG_IEEE80211AC */
+
+	return 0;
+}
+#endif /* CONFIG_VENDOR_MXL */
 
 int hostapd_check_ht_capab(struct hostapd_iface *iface)
 {
@@ -842,6 +855,12 @@ int hostapd_check_ht_capab(struct hostapd_iface *iface)
 	    !ieee80211ac_supported_vht_capab(iface))
 		return -1;
 #endif /* CONFIG_IEEE80211AC */
+
+#ifdef CONFIG_VENDOR_MXL
+	if (0 < hostapd_override_capab_vendor_mxl(iface))
+		return -1;
+#endif /* CONFIG_VENDOR_MXL */
+
 	ret = ieee80211n_check_40mhz(iface);
 	if (ret)
 		return ret;
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 40b69d9d2..c8a2b7217 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -3946,6 +3946,11 @@ static int __check_assoc_ies(struct hostapd_data *hapd, struct sta_info *sta,
 		if (resp != WLAN_STATUS_SUCCESS)
 			return resp;
 	}
+	if (hapd->conf->vendor_vht && elems->vht_capabilities && !hapd->iconf->ieee80211ac) {
+		resp = copy_sta_vendor2_vht(hapd, sta, elems->vht_capabilities);
+		if (resp != WLAN_STATUS_SUCCESS)
+			return resp;
+	}
 #endif /* CONFIG_IEEE80211AC */
 #ifdef CONFIG_IEEE80211AX
 	if (hapd->iconf->ieee80211ax && !hapd->conf->disable_11ax) {
@@ -4919,8 +4924,9 @@ static u16 send_assoc_resp(struct hostapd_data *hapd, struct sta_info *sta,
 	p = hostapd_eid_ht_operation(hapd, p);
 
 #ifdef CONFIG_IEEE80211AC
-	if (hapd->iconf->ieee80211ac && !hapd->conf->disable_11ac &&
-	    !is_6ghz_op_class(hapd->iconf->op_class)) {
+	if ((hapd->iconf->ieee80211ac && !hapd->conf->disable_11ac &&
+	    !is_6ghz_op_class(hapd->iconf->op_class)) ||
+	    (hapd->conf->vendor_vht && (sta && (sta->flags & (WLAN_STA_VENDOR2_VHT | WLAN_STA_VENDOR_VHT))))) {
 		u32 nsts = 0, sta_nsts;
 
 		if (sta && hapd->conf->use_sta_nsts && sta->vht_capabilities) {
@@ -4943,7 +4949,8 @@ static u16 send_assoc_resp(struct hostapd_data *hapd, struct sta_info *sta,
 #endif /* CONFIG_IEEE80211AC */
 
 #ifdef CONFIG_IEEE80211AX
-	if (hapd->iconf->ieee80211ax && !hapd->conf->disable_11ax) {
+	if ((hapd->iconf->ieee80211ax && !hapd->conf->disable_11ax) &&
+		(sta && (sta->flags & WLAN_STA_HE))) {
 		u8 *cca_pos;
 		p = hostapd_eid_he_capab(hapd, p, IEEE80211_MODE_AP);
 		p = hostapd_eid_he_operation(hapd, p);
diff --git a/src/ap/ieee802_11.h b/src/ap/ieee802_11.h
index 3448cf737..dadd8e030 100644
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -112,6 +112,8 @@ u16 copy_sta_ht_capab(struct hostapd_data *hapd, struct sta_info *sta,
 		      const u8 *ht_capab);
 u16 copy_sta_vendor_vht(struct hostapd_data *hapd, struct sta_info *sta,
 			const u8 *ie, size_t len);
+u16 copy_sta_vendor2_vht(struct hostapd_data *hapd, struct sta_info *sta,
+			const u8 *vht_capab);
 
 int update_ht_state(struct hostapd_data *hapd, struct sta_info *sta);
 void ht40_intolerant_add(struct hostapd_iface *iface, struct sta_info *sta);
diff --git a/src/ap/ieee802_11_vht.c b/src/ap/ieee802_11_vht.c
index db615a38b..e61e136c4 100644
--- a/src/ap/ieee802_11_vht.c
+++ b/src/ap/ieee802_11_vht.c
@@ -265,6 +265,36 @@ no_capab:
 	return WLAN_STATUS_SUCCESS;
 }
 
+u16 copy_sta_vendor2_vht(struct hostapd_data *hapd, struct sta_info *sta,
+			const u8 *vht_capab)
+{
+	errno_t err;
+	/* Disable VHT caps for STAs associated to no-VHT BSSes. */
+	if (!vht_capab) {
+		sta->flags &= ~WLAN_STA_VHT;
+		os_free(sta->vht_capabilities);
+		sta->vht_capabilities = NULL;
+		return WLAN_STATUS_SUCCESS;
+	}
+
+	if (sta->vht_capabilities == NULL) {
+		sta->vht_capabilities =
+			os_zalloc(sizeof(struct ieee80211_vht_capabilities));
+		if (sta->vht_capabilities == NULL)
+			return WLAN_STATUS_UNSPECIFIED_FAILURE;
+	}
+
+	sta->flags |= WLAN_STA_VHT | WLAN_STA_VENDOR2_VHT;
+	err = memcpy_s(sta->vht_capabilities, sizeof(struct ieee80211_vht_capabilities),
+		 vht_capab, sizeof(struct ieee80211_vht_capabilities));
+	if (EOK != err) {
+		wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
+		os_free(sta->vht_capabilities);
+		return WLAN_STATUS_UNSPECIFIED_FAILURE;
+	}
+
+	return WLAN_STATUS_SUCCESS;
+}
 
 u8 * hostapd_eid_vendor_vht(struct hostapd_data *hapd, u8 *eid)
 {
diff --git a/src/ap/mxl_config.h b/src/ap/mxl_config.h
index 94417505e..1ed72f1a3 100644
--- a/src/ap/mxl_config.h
+++ b/src/ap/mxl_config.h
@@ -35,6 +35,7 @@ struct mxl_hostapd_config {
 	int process_radar_slave_events;
 	int background_cac;
 
+	int vht_capab_set;
 	u32 event_cache_interval;
 };
 
diff --git a/src/ap/sta_info.h b/src/ap/sta_info.h
index 1f7142371..3f69c3c4e 100644
--- a/src/ap/sta_info.h
+++ b/src/ap/sta_info.h
@@ -44,6 +44,7 @@
 #define WLAN_STA_6GHZ BIT(25)
 #define WLAN_STA_PENDING_PASN_FILS_ERP BIT(26)
 #define WLAN_STA_EHT BIT(27)
+#define WLAN_STA_VENDOR2_VHT BIT(28)
 #define WLAN_STA_PENDING_DISASSOC_CB BIT(29)
 #define WLAN_STA_PENDING_DEAUTH_CB BIT(30)
 #define WLAN_STA_NONERP BIT(31)
diff --git a/src/common/ieee802_11_common.c b/src/common/ieee802_11_common.c
index d4ebb747b..6067457df 100644
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -158,7 +158,8 @@ static int ieee802_11_parse_vendor_specific(const u8 *pos, size_t elen,
 		case VENDOR_VHT_TYPE:
 			if (elen > 4 &&
 			    (pos[4] == VENDOR_VHT_SUBTYPE ||
-			     pos[4] == VENDOR_VHT_SUBTYPE2)) {
+			     pos[4] == VENDOR_VHT_SUBTYPE2 ||
+			     pos[4] == VENDOR_VHT_SUBTYPE3)) {
 				elems->vendor_vht = pos;
 				elems->vendor_vht_len = elen;
 			} else
diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index 3e5e5646c..ee2c92e0f 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -1884,6 +1884,7 @@ enum plink_action_field {
 #define VENDOR_VHT_TYPE		0x04
 #define VENDOR_VHT_SUBTYPE	0x08
 #define VENDOR_VHT_SUBTYPE2	0x00
+#define VENDOR_VHT_SUBTYPE3	0x18
 
 #define VENDOR_HT_CAPAB_OUI_TYPE 0x33 /* 00-90-4c:0x33 */
 
-- 
2.43.0

