From 30bcef8c03f1bafb2f88a47a284d10093b9c943c Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Mon, 3 Jul 2023 16:24:12 +0200
Subject: [PATCH] WLANRTSYS-56402: HE Spatial reuse parameters

- todo: review and rework this commit in order to use opensource configuration only.
---
 hostapd/config_file.c        |  55 +++++++++
 hostapd/ctrl_iface.c         | 217 +++++++++++++++++++++++++++++++++++
 src/ap/ap_config.c           |   3 +
 src/ap/ap_config.h           |   3 +
 src/ap/ap_drv_ops.h          |  11 ++
 src/ap/beacon.c              |   6 +-
 src/ap/ieee802_11.c          |   3 +-
 src/ap/ieee802_11_he.c       |   3 +
 src/drivers/driver.h         |  10 ++
 src/drivers/driver_nl80211.c |  38 ++++++
 src/utils/common.c           |  23 ++++
 src/utils/common.h           |   4 +
 12 files changed, 373 insertions(+), 3 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 94afd50f4..ad85f9bd7 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4291,6 +4291,61 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		}
 	} else if (os_strcmp(buf, "he_6ghz_reg_pwr_type") == 0) {
 		conf->he_6ghz_reg_pwr_type = atoi(pos);
+	// ToDo: remove this and keep opensource configuration for SRPS IE
+	} else if (os_strcmp(buf, "he_spatial_reuse_ie_present_in_beacon") == 0) {
+		conf->he_spatial_reuse_ie_present_in_beacon = atoi(pos);
+	} else if (os_strcmp(buf, "he_spatial_reuse_ie_present_in_assoc_response") == 0) {
+		conf->he_spatial_reuse_ie_present_in_assoc_response = atoi(pos);
+	} else if (os_strcmp(buf, "he_spatial_reuse_ie_present_in_probe_response") == 0) {
+		conf->he_spatial_reuse_ie_present_in_probe_response = atoi(pos);
+	} else if (os_strcmp(buf, "sr_control_field_srp_disallowed") == 0) {
+		clr_set_he_cap(&conf->spr.sr_control, atoi(pos), SPATIAL_REUSE_SRP_DISALLOWED);
+	} else if (os_strcmp(buf, "sr_control_field_non_srg_obss_pd_sr_disallowed") == 0) {
+		clr_set_he_cap(&conf->spr.sr_control, atoi(pos), SPATIAL_REUSE_NON_SRG_OBSS_PD_SR_DISALLOWED);
+	} else if (os_strcmp(buf, "sr_control_field_non_srg_offset_present") == 0) {
+		clr_set_he_cap(&conf->spr.sr_control, atoi(pos), SPATIAL_REUSE_NON_SRG_OFFSET_PRESENT);
+	} else if (os_strcmp(buf, "sr_control_field_srg_information_present") == 0) {
+		clr_set_he_cap(&conf->spr.sr_control, atoi(pos), SPATIAL_REUSE_SRG_INFORMATION_PRESENT);
+	} else if (os_strcmp(buf, "sr_control_field_hesiga_spatial_reuse_value15_allowed") == 0) {
+		clr_set_he_cap(&conf->spr.sr_control, atoi(pos), SPATIAL_REUSE_HESIGA_SR_VAL15_ALLOWED);
+	} else if (os_strcmp(buf, "non_srg_obss_pd_max_offset") == 0) {
+		conf->spr.non_srg_obss_pd_max_offset = atoi(pos);
+	} else if (os_strcmp(buf, "srg_obss_pd_min_offset") == 0) {
+		conf->spr.srg_obss_pd_min_offset = atoi(pos);
+	} else if (os_strcmp(buf, "srg_obss_pd_max_offset") == 0) {
+		conf->spr.srg_obss_pd_max_offset = atoi(pos);
+	} else if (os_strcmp(buf, "srg_bss_color_bitmap_part1") == 0) {
+		conf->spr.srg_bss_color_bitmap[0] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_bss_color_bitmap_part2") == 0) {
+		conf->spr.srg_bss_color_bitmap[1] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_bss_color_bitmap_part3") == 0) {
+		conf->spr.srg_bss_color_bitmap[2] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_bss_color_bitmap_part4") == 0) {
+		conf->spr.srg_bss_color_bitmap[3] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_bss_color_bitmap_part5") == 0) {
+		conf->spr.srg_bss_color_bitmap[4] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_bss_color_bitmap_part6") == 0) {
+		conf->spr.srg_bss_color_bitmap[5] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_bss_color_bitmap_part7") == 0) {
+		conf->spr.srg_bss_color_bitmap[6] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_bss_color_bitmap_part8") == 0) {
+		conf->spr.srg_bss_color_bitmap[7] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_partial_bssid_bitmap_part1") == 0) {
+		conf->spr.srg_partial_bssid_bitmap[0] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_partial_bssid_bitmap_part2") == 0) {
+		conf->spr.srg_partial_bssid_bitmap[1] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_partial_bssid_bitmap_part3") == 0) {
+		conf->spr.srg_partial_bssid_bitmap[2] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_partial_bssid_bitmap_part4") == 0) {
+		conf->spr.srg_partial_bssid_bitmap[3] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_partial_bssid_bitmap_part5") == 0) {
+		conf->spr.srg_partial_bssid_bitmap[4] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_partial_bssid_bitmap_part6") == 0) {
+		conf->spr.srg_partial_bssid_bitmap[5] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_partial_bssid_bitmap_part7") == 0) {
+		conf->spr.srg_partial_bssid_bitmap[6] = atoi(pos);
+	} else if (os_strcmp(buf, "srg_partial_bssid_bitmap_part8") == 0) {
+		conf->spr.srg_partial_bssid_bitmap[7] = atoi(pos);
 	} else if (os_strcmp(buf, "he_oper_chwidth") == 0) {
 		conf->he_oper_chwidth = atoi(pos);
 	} else if (os_strcmp(buf, "he_oper_centr_freq_seg0_idx") == 0) {
diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index cabe4de54..d4690279b 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2961,6 +2961,219 @@ static int hostapd_ctrl_iface_get_color_table(struct hostapd_iface *iface,
 	return pos - buf;
 }
 
+static int hostapd_ctrl_iface_set_he_spatial_reuse_parameter(struct hostapd_iface *iface, char *buf)
+{
+	#define SR_INVALID_PARAMS "spatial reuse: invalid %s provided"
+	#define SR_INVALID_BITMAP_MSG "spatial reuse: invalid %s[%zu] provided"
+	struct spatial_reuse sr_params = iface->conf->spr;
+	char *str, *pos = buf;
+	int bitmap_size, tmp;
+
+	str = os_strstr(pos, "sr_control_field_srp_disallowed=");
+	if (str) {
+		str += sizeof("sr_control_field_srp_disallowed=") - 1;
+		tmp = atoi(str);
+		if (!IS_VALID_BOOL_RANGE(tmp)) {
+			wpa_printf(MSG_ERROR, SR_INVALID_PARAMS, "sr_control_field_srp_disallowed");
+			return -1;
+		}
+		clr_set_he_cap(&sr_params.sr_control, tmp, SPATIAL_REUSE_SRP_DISALLOWED);
+	}
+
+	str = os_strstr(pos, "sr_control_field_non_srg_obss_pd_sr_disallowed=");
+	if (str) {
+		str += sizeof("sr_control_field_non_srg_obss_pd_sr_disallowed=") - 1;
+		tmp = atoi(str);
+		if (!IS_VALID_BOOL_RANGE(tmp)) {
+			wpa_printf(MSG_ERROR, SR_INVALID_PARAMS, "sr_control_field_non_srg_obss_pd_sr_disallowed");
+			return -1;
+		}
+		clr_set_he_cap(&sr_params.sr_control, tmp, SPATIAL_REUSE_NON_SRG_OBSS_PD_SR_DISALLOWED);
+	}
+
+	str = os_strstr(pos, "sr_control_field_non_srg_offset_present=");
+	if (str) {
+		str += sizeof("sr_control_field_non_srg_offset_present=") - 1;
+		tmp = atoi(str);
+		if (!IS_VALID_BOOL_RANGE(tmp)) {
+			wpa_printf(MSG_ERROR, SR_INVALID_PARAMS, "sr_control_field_non_srg_offset_present");
+			return -1;
+		}
+		clr_set_he_cap(&sr_params.sr_control, tmp, SPATIAL_REUSE_NON_SRG_OFFSET_PRESENT);
+	}
+
+	str = os_strstr(pos, "sr_control_field_srg_information_present=");
+	if (str) {
+		str += sizeof("sr_control_field_srg_information_present=") - 1;
+		tmp = atoi(str);
+		if (!IS_VALID_BOOL_RANGE(tmp)) {
+			wpa_printf(MSG_ERROR, SR_INVALID_PARAMS, "sr_control_field_srg_information_present");
+			return -1;
+		}
+		clr_set_he_cap(&sr_params.sr_control, tmp, SPATIAL_REUSE_SRG_INFORMATION_PRESENT);
+	}
+
+	str = os_strstr(pos, "sr_control_field_hesiga_spatial_reuse_value15_allowed=");
+	if (str) {
+		str += sizeof("sr_control_field_hesiga_spatial_reuse_value15_allowed=") - 1;
+		tmp = atoi(str);
+		if (!IS_VALID_BOOL_RANGE(tmp)) {
+			wpa_printf(MSG_ERROR, SR_INVALID_PARAMS, "sr_control_field_hesiga_spatial_reuse_value15_allowed");
+			return -1;
+		}
+		clr_set_he_cap(&sr_params.sr_control, tmp, SPATIAL_REUSE_HESIGA_SR_VAL15_ALLOWED);
+	}
+
+	str = os_strstr(pos, "non_srg_obss_pd_max_offset=");
+	if (str) {
+		str += sizeof("non_srg_obss_pd_max_offset=") - 1;
+		tmp = atoi(str);
+		if (!IS_VALID_U8_RANGE(tmp)) {
+			wpa_printf(MSG_ERROR, SR_INVALID_PARAMS, "non_srg_obss_pd_max_offset");
+			return -1;
+		}
+		sr_params.non_srg_obss_pd_max_offset = tmp;
+	}
+
+	str = os_strstr(pos, "srg_obss_pd_min_offset=");
+	if (str) {
+		str += sizeof("srg_obss_pd_min_offset=") - 1;
+		tmp = atoi(str);
+		if (!IS_VALID_U8_RANGE(tmp)) {
+			wpa_printf(MSG_ERROR, SR_INVALID_PARAMS, "srg_obss_pd_min_offset");
+			return -1;
+		}
+		sr_params.srg_obss_pd_min_offset = tmp;
+	}
+
+	str = os_strstr(pos, "he_srg_obss_pd_max_offset=");
+	if (str) {
+		str += sizeof("he_srg_obss_pd_max_offset=") - 1;
+		tmp = atoi(str);
+		if (!IS_VALID_U8_RANGE(tmp)) {
+			wpa_printf(MSG_ERROR, SR_INVALID_PARAMS, "he_srg_obss_pd_max_offset");
+			return -1;
+		}
+		sr_params.srg_obss_pd_max_offset = tmp;
+	}
+
+	str = os_strstr(pos, "srg_bss_color_bitmap=");
+	if (str) {
+		bitmap_size = sizeof(sr_params.srg_bss_color_bitmap);
+		str += sizeof("srg_bss_color_bitmap=") - 1;
+		u64 tmp = strtoull(str, NULL, 16);
+		os_memset(sr_params.srg_bss_color_bitmap, 0, sizeof(sr_params.srg_bss_color_bitmap));
+		for (int i = 0; i < bitmap_size; i++) {
+			if (!IS_VALID_U8_RANGE((u8)((tmp >> (i * 8)) & 0xff))) {
+				wpa_printf(MSG_ERROR, SR_INVALID_PARAMS, "srg_bss_color_bitmap");
+				return -1;
+			}
+			sr_params.srg_bss_color_bitmap[i] = (u8)((tmp >> (i * 8)) & 0xff);
+		}
+	}
+
+	str = os_strstr(pos, "srg_partial_bssid_bitmap=");
+	if (str) {
+		bitmap_size = sizeof(sr_params.srg_partial_bssid_bitmap);
+		str += sizeof("srg_partial_bssid_bitmap=") - 1;
+		u64 tmp = strtoull(str, NULL, 16);
+		os_memset(sr_params.srg_partial_bssid_bitmap, 0, sizeof(sr_params.srg_partial_bssid_bitmap));
+		for (int i = 0; i < bitmap_size; i++) {
+			if (!IS_VALID_U8_RANGE((u8)((tmp >> (i * 8)) & 0xff))) {
+				wpa_printf(MSG_ERROR, SR_INVALID_PARAMS, "srg_partial_bssid_bitmap");
+				return -1;
+			}
+			sr_params.srg_partial_bssid_bitmap[i] = (u8)((tmp >> (i * 8)) & 0xff);
+		}
+	}
+
+	iface->conf->spr = sr_params;
+
+	if (ieee802_11_update_beacons(iface) < 0) {
+		wpa_printf(MSG_ERROR, "Failed to update beacons with HE Spatial Reuse Parameters");
+		return -1;
+	}
+
+	wpa_printf(MSG_DEBUG, "Updated beacons with HE Spatial Reuse Parameters");
+	return 0;
+}
+
+static int hostapd_ctrl_iface_get_he_spatial_reuse_parameter(struct hostapd_data *hapd,
+		char *buf, size_t buflen)
+{
+	struct hostapd_iface *iface = hapd->iface;
+	char *pos, *end;
+	int ret, ret1, i;
+	u64 obss_bsscolor_bitmap = 0;
+	unsigned bss_color_info = 0;
+
+	pos = buf;
+	end = buf + buflen;
+
+	ret = os_snprintf(pos, end - pos, "HE SR Control=%u\n",
+			iface->conf->spr.sr_control);
+	if (os_snprintf_error(end - pos, ret))
+		goto out;
+	pos += ret;
+
+	ret = os_snprintf(pos, end - pos, "Non-SRG OBSSPD Max Offset=%u\n",
+			iface->conf->spr.non_srg_obss_pd_max_offset);
+	if (os_snprintf_error(end - pos, ret))
+		goto out;
+	pos += ret;
+
+	ret = os_snprintf(pos, end - pos, "SRG OBSSPD Min Offset=%u\n",
+			iface->conf->spr.srg_obss_pd_min_offset);
+	if (os_snprintf_error(end - pos, ret))
+		goto out;
+	pos += ret;
+
+	ret = os_snprintf(pos, end - pos, "SRG OBSSPD Max Offset=%u\n",
+			iface->conf->spr.srg_obss_pd_max_offset );
+	if (os_snprintf_error(end - pos, ret))
+		goto out;
+	pos += ret;
+
+	for (i = 0; i < 8 ; i++) {
+		ret = os_snprintf(pos, end - pos, "SRG BSS Color Bitmap Part%d=%u\n",
+				i + 1, iface->conf->spr.srg_bss_color_bitmap[i]);
+		if (os_snprintf_error(end - pos, ret))
+			goto out;
+		pos += ret;
+	}
+
+	for (i = 0; i < 8 ; i++) {
+		ret = os_snprintf(pos, end - pos, "SRG Partial BSSID Bitmap Part%d=%u\n",
+				i + 1, iface->conf->spr.srg_partial_bssid_bitmap[i]);
+		if (os_snprintf_error(end - pos, ret))
+			goto out;
+		pos += ret;
+	}
+
+	bss_color_info = iface->conf->he_op.he_bss_color;
+	bss_color_info |= (iface->conf->he_op.he_bss_color_partial & 1) << 6u;
+	bss_color_info |= (iface->conf->he_op.he_bss_color_disabled & 1) << 7u;
+	ret = os_snprintf(pos, end - pos, "BssColor Info=%u\n",
+			bss_color_info);
+	if (os_snprintf_error(end - pos, ret))
+		goto out;
+	pos += ret;
+
+	ret1 = hostapd_drv_get_obss_bsscolor_info(hapd, &obss_bsscolor_bitmap);
+	if (!ret1) {
+		ret = os_snprintf(pos, end - pos, "OBSS BssColor Bitmap=%llx\n",
+				obss_bsscolor_bitmap);
+		if (os_snprintf_error(end-pos, ret))
+			goto out;
+		pos += ret;
+	}
+
+	return pos - buf;
+
+out :
+	wpa_printf(MSG_ERROR, "[%s] Too long data", __func__);
+	return -1;
+}
 #endif /* CONFIG_IEEE80211AX */
 
 static u8 hostapd_maxnss(struct hostapd_data *hapd, struct sta_info *sta)
@@ -6209,6 +6422,10 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "SET_BSS_LOAD ", 13) == 0) {
 		wpa_printf(MSG_EXCESSIVE, "%s; *** Received: 'SET_BSS_LOAD' (buf= '%s') ***\n", __FUNCTION__, buf);
 		reply_len = hostapd_ctrl_iface_set_bss_load(hapd, buf + 13, reply, reply_size);
+	} else if (os_strncmp(buf, "GET_HE_SR_PARAM", 15) == 0) {
+		reply_len = hostapd_ctrl_iface_get_he_spatial_reuse_parameter(hapd, reply, reply_size);
+	} else if (os_strncmp(buf, "SET_HE_SR_PARAM", 15) == 0) {
+		reply_len = hostapd_ctrl_iface_set_he_spatial_reuse_parameter(hapd->iface, buf + 15);
 #endif /* CONFIG_IEEE80211AX */
 	} else if (os_strncmp(buf, "GET_STA_WPA_PSK ", 16) == 0) {
 		reply_len = hostapd_ctrl_iface_get_sta_wpa_psk(hapd, buf + 16, reply, reply_size);
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index f4aa074de..f29cd1d9f 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -359,6 +359,9 @@ struct hostapd_config * hostapd_config_defaults(void)
 	/* TODO-COLOR: To make default value as true after FW CCA changes integrated */
 	conf->autonomous_color_change = true;
 	conf->color_coll_notify_interval = COLOR_COLL_NOTIFY_INTERVAL_DEFAULT;
+	conf->he_spatial_reuse_ie_present_in_beacon = 1;
+	conf->he_spatial_reuse_ie_present_in_probe_response = 1;
+	conf->he_spatial_reuse_ie_present_in_assoc_response = 1;
 #endif /* CONFIG_IEEE80211AX */
 
 	/* The third octet of the country string uses an ASCII space character
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index f7606a79c..1c5ad2434 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1379,6 +1379,9 @@ struct hostapd_config {
 	u32 used_color_table_ageing; /* in mins */
 	bool autonomous_color_change;
 	u32 color_coll_notify_interval;
+	u8 he_spatial_reuse_ie_present_in_beacon;
+	u8 he_spatial_reuse_ie_present_in_assoc_response;
+	u8 he_spatial_reuse_ie_present_in_probe_response;
 #endif /* CONFIG_IEEE80211AX */
 
 	/* VHT enable/disable config from CHAN_SWITCH */
diff --git a/src/ap/ap_drv_ops.h b/src/ap/ap_drv_ops.h
index 4393d482f..d642801ef 100644
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -525,6 +525,17 @@ static inline int hostapd_drv_get_tx_power_20mhz(struct hostapd_data *hapd,
 	return hapd->driver->get_tx_power_20mhz(hapd->drv_priv, tx_power_20mhz);
 }
 
+#ifdef CONFIG_IEEE80211AX
+static inline int hostapd_drv_get_obss_bsscolor_info(struct hostapd_data *hapd,
+							u64 *obss_bsscolor_bitmap)
+{
+	if (!hapd->driver|| !hapd->driver->get_obss_bsscolor_info || !hapd->drv_priv)
+		return -1;
+
+	return hapd->driver->get_obss_bsscolor_info(hapd->drv_priv, obss_bsscolor_bitmap);
+}
+#endif /* CONFIG_IEEE80211AX */
+
 static inline int hostapd_drv_set_bss_load(struct hostapd_data *hapd,
 					const u8 is_enable)
 {
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index 4e129450d..cc01a055e 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -881,7 +881,8 @@ static u8 * hostapd_probe_resp_fill_elems(struct hostapd_data *hapd,
 			params->cca_pos = NULL;
 		pos = cca_pos;
 
-		pos = hostapd_eid_spatial_reuse(hapd, pos);
+		if(hapd->iconf->he_spatial_reuse_ie_present_in_probe_response)
+			pos = hostapd_eid_spatial_reuse(hapd, pos);
 		pos = hostapd_eid_he_mu_edca_parameter_set(hapd, pos);
 		/* CCA IE */
 		cca_pos = hostapd_eid_cca(hapd, pos);
@@ -2496,7 +2497,8 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 			hapd->cca_c_off_beacon = cca_pos - tail - 2;
 		tailpos = cca_pos;
 
-		tailpos = hostapd_eid_spatial_reuse(hapd, tailpos);
+		if(hapd->iconf->he_spatial_reuse_ie_present_in_beacon)
+			tailpos = hostapd_eid_spatial_reuse(hapd, tailpos);
 		tailpos = hostapd_eid_he_mu_edca_parameter_set(hapd, tailpos);
 		/* CCA IE */
 		cca_pos = hostapd_eid_cca(hapd, tailpos);
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 258fad965..34457c53e 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -4982,7 +4982,8 @@ static u16 send_assoc_resp(struct hostapd_data *hapd, struct sta_info *sta,
 		p = hostapd_eid_he_capab(hapd, p, IEEE80211_MODE_AP);
 		p = hostapd_eid_he_operation(hapd, p);
 		p = hostapd_eid_cca(hapd, p);
-		p = hostapd_eid_spatial_reuse(hapd, p);
+		if(hapd->iconf->he_spatial_reuse_ie_present_in_assoc_response)
+			p = hostapd_eid_spatial_reuse(hapd, p);
 		p = hostapd_eid_he_mu_edca_parameter_set(hapd, p);
 		/* CCA IE */
 		cca_pos = hostapd_eid_cca(hapd, p);
diff --git a/src/ap/ieee802_11_he.c b/src/ap/ieee802_11_he.c
index c84e81af0..8e9540081 100644
--- a/src/ap/ieee802_11_he.c
+++ b/src/ap/ieee802_11_he.c
@@ -340,8 +340,11 @@ u8 * hostapd_eid_spatial_reuse(struct hostapd_data *hapd, u8 *eid)
 	u8 *pos = eid, *spr_param;
 	u8 sz = 1;
 
+// ToDo: return this check and use opensource approach
+#if 0
 	if (!hapd->iface->conf->spr.sr_control)
 		return eid;
+#endif
 
 	if (hapd->iface->conf->spr.sr_control &
 	    SPATIAL_REUSE_NON_SRG_OFFSET_PRESENT)
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index fda4dfa7d..31e1321e1 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -4532,6 +4532,16 @@ struct wpa_driver_ops {
 	 */
 	int (*switch_color)(void *priv, struct cca_settings *settings);
 
+	/**
+	 * get_obss_bsscolor_info - Get OBSS BssColor info from driver
+	 * @priv: Private driver interface data
+	 * @obss_bsscolor_bitmap: Bitmap representing the OBSS bsscolor
+	 * Returns: 0 on success, negative error code on failure
+	 *
+	 * This function is used to get the OBSS BSS color.
+	 */
+	int (*get_obss_bsscolor_info)(void *priv, u64 *obss_bsscolor_bitmap);
+
 	/**
 	 * add_tx_ts - Add traffic stream
 	 * @priv: Private driver interface data
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 86c9bcb6d..2f8a1d94e 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -11496,6 +11496,43 @@ error:
 	wpa_printf(MSG_DEBUG, "nl80211: Could not build color switch request");
 	return ret;
 }
+
+static int nl80211_get_obss_bsscolor_info(void *priv, u64 *obss_bsscolor_bitmap)
+{
+	int ret;
+	errno_t err;
+	struct wpabuf *rsp;
+
+	rsp = wpabuf_alloc(sizeof(*obss_bsscolor_bitmap));
+	if (!rsp)
+		return -ENOBUFS;
+
+	ret = nl80211_vendor_cmd(priv, OUI_LTQ, LTQ_NL80211_VENDOR_SUBCMD_GET_OBSS_BSSCOLOR_INFO,
+			NULL, 0, NESTED_ATTR_NOT_USED, rsp);
+	if (ret < 0) {
+		wpa_printf(MSG_ERROR, "nl80211: sending GET_OBSS_BSSCOLOR_INFO failed: %i (%s)",
+				ret, strerror(-ret));
+		goto out;
+	}
+
+	if (rsp->used != sizeof(*obss_bsscolor_bitmap)) {
+		wpa_printf(MSG_ERROR, "nl80211: driver returned %zu bytes instead of %zu",
+				rsp->used, sizeof(*obss_bsscolor_bitmap));
+		ret = -EMSGSIZE;
+		goto out;
+	}
+
+	err = memcpy_s(obss_bsscolor_bitmap, sizeof(*obss_bsscolor_bitmap), rsp->buf, sizeof(*obss_bsscolor_bitmap));
+	if (EOK != err) {
+		wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
+		ret = err;
+		goto out;
+	}
+
+out:
+	wpabuf_free(rsp);
+	return ret;
+}
 #endif /* CONFIG_IEEE80211AX */
 
 
@@ -14536,6 +14573,7 @@ const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.switch_channel = nl80211_switch_channel,
 #ifdef CONFIG_IEEE80211AX
 	.switch_color = nl80211_switch_color,
+	.get_obss_bsscolor_info = nl80211_get_obss_bsscolor_info,
 #endif /* CONFIG_IEEE80211AX */
 #ifdef ANDROID_P2P
 	.set_noa = wpa_driver_set_p2p_noa,
diff --git a/src/utils/common.c b/src/utils/common.c
index 6acfcbd89..3e6d6ad2b 100644
--- a/src/utils/common.c
+++ b/src/utils/common.c
@@ -1302,3 +1302,26 @@ void forced_memzero(void *ptr, size_t len)
 	if (len)
 		forced_memzero_val = ((u8 *) ptr)[0];
 }
+
+#ifdef CONFIG_IEEE80211AX
+
+u8 find_bit_offset(u8 val)
+{
+	u8 res = 0;
+
+	for (; val; val >>= 1) {
+		if (val & 1)
+			break;
+		res++;
+	}
+
+	return res;
+}
+
+void clr_set_he_cap(u8 *field, int val, u8 mask)
+{
+	*field &= ~mask;
+	*field |= (u8) (mask & (val << find_bit_offset(mask)));
+}
+
+#endif /* CONFIG_IEEE80211AX */
diff --git a/src/utils/common.h b/src/utils/common.h
index 1a9fd145b..fd748b52d 100644
--- a/src/utils/common.h
+++ b/src/utils/common.h
@@ -589,6 +589,10 @@ char * get_param(const char *cmd, const char *param);
 
 void forced_memzero(void *ptr, size_t len);
 
+#ifdef CONFIG_IEEE80211AX
+void clr_set_he_cap(u8 *field, int val, u8 mask);
+#endif /* CONFIG_IEEE80211AX */
+
 /*
  * gcc 4.4 ends up generating strict-aliasing warnings about some very common
  * networking socket uses that do not really result in a real problem and
-- 
2.43.0

