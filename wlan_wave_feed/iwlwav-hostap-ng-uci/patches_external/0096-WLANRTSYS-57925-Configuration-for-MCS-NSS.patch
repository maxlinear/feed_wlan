From d2356cc165211e3b34cea9cd3b7a6f1251b6fbf2 Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Mon, 28 Aug 2023 13:36:34 +0200
Subject: [PATCH] WLANRTSYS-57925: Configuration for MCS NSS

---
 hostapd/config_file.c | 44 +++++++++++++++++++++++++++++++++++--------
 src/ap/ap_config.h    |  2 ++
 src/ap/hw_features.c  | 19 +++++++++++++++++++
 3 files changed, 57 insertions(+), 8 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 54da6b4d0..5836dc6f1 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4156,6 +4156,14 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		conf->ht_cap_ampdu_parameters &= ~HT_CAP_AMPDU_MINIMUM_MPDU_START_SPACING;
 		conf->ht_cap_ampdu_parameters |= (atoi(pos) << 2) & HT_CAP_AMPDU_MINIMUM_MPDU_START_SPACING;
 		conf->ht_cap_ampdu_parameters_override_mask |= 0x2;
+	} else if (os_strcmp(buf, "ht_mcs_set_part0") == 0) {
+		conf->ht_mcs_set[0] = host_to_le32(atoi(pos));
+	} else if (os_strcmp(buf, "ht_mcs_set_part1") == 0) {
+		conf->ht_mcs_set[1] = host_to_le32(atoi(pos));
+	} else if (os_strcmp(buf, "ht_mcs_set_part2") == 0) {
+		conf->ht_mcs_set[2] = host_to_le32(atoi(pos));
+	} else if (os_strcmp(buf, "ht_mcs_set_part3") == 0) {
+		conf->ht_mcs_set[3] = host_to_le32(atoi(pos));
 	} else if (os_strcmp(buf, "ieee80211n_acax_compat") == 0) {
 		int val = atoi(pos);
 		if (!IS_VALID_BOOL_RANGE(val)) {
@@ -4188,6 +4196,10 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		bss->vendor_vht = atoi(pos);
 	} else if (os_strcmp(buf, "use_sta_nsts") == 0) {
 		bss->use_sta_nsts = atoi(pos);
+	} else if (os_strcmp(buf, "vht_mcs_set_part0") == 0) {
+		conf->vht_mcs_set[0] = host_to_le32(atoi(pos));
+	} else if (os_strcmp(buf, "vht_mcs_set_part1") == 0) {
+		conf->vht_mcs_set[1] = host_to_le32(atoi(pos));
 #endif /* CONFIG_IEEE80211AC */
 #ifdef CONFIG_IEEE80211AX
 	} else if (os_strcmp(buf, "ieee80211ax") == 0) {
@@ -4520,21 +4532,37 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 	} else if (os_strcmp(buf, "he_operation_cohosted_bss") == 0) {
 		conf->he_oper_cohosted_bss = atoi(pos);
 	} else if (os_strcmp(buf, "he_operation_max_mcs_for_1ss") == 0) {
-		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_1ss is not supported", line);
+		u8 byte = 0;
+		clr_set_he_cap(&byte, atoi(pos), HE_MCS_NSS_FOR_1SS);
+		conf->he_op.he_basic_mcs_nss_set |= byte;
 	} else if (os_strcmp(buf, "he_operation_max_mcs_for_2ss") == 0) {
-		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_2ss is not supported", line);
+		u8 byte = 0;
+		clr_set_he_cap(&byte, atoi(pos), HE_MCS_NSS_FOR_2SS);
+		conf->he_op.he_basic_mcs_nss_set |= byte;
 	} else if (os_strcmp(buf, "he_operation_max_mcs_for_3ss") == 0) {
-		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_3ss is not supported", line);
+		u8 byte = 0;
+		clr_set_he_cap(&byte, atoi(pos), HE_MCS_NSS_FOR_3SS);
+		conf->he_op.he_basic_mcs_nss_set |= byte;
 	} else if (os_strcmp(buf, "he_operation_max_mcs_for_4ss") == 0) {
-		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_4ss is not supported", line);
+		u8 byte = 0;
+		clr_set_he_cap(&byte, atoi(pos), HE_MCS_NSS_FOR_4SS);
+		conf->he_op.he_basic_mcs_nss_set |= byte;
 	} else if (os_strcmp(buf, "he_operation_max_mcs_for_5ss") == 0) {
-		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_5ss is not supported", line);
+		u8 byte = 0;
+		clr_set_he_cap(&byte, atoi(pos), HE_MCS_NSS_FOR_5SS);
+		conf->he_op.he_basic_mcs_nss_set |= (u16)(byte << 8);
 	} else if (os_strcmp(buf, "he_operation_max_mcs_for_6ss") == 0) {
-		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_6ss is not supported", line);
+		u8 byte = 0;
+		clr_set_he_cap(&byte, atoi(pos), HE_MCS_NSS_FOR_6SS);
+		conf->he_op.he_basic_mcs_nss_set |= (u16)(byte << 8);
 	} else if (os_strcmp(buf, "he_operation_max_mcs_for_7ss") == 0) {
-		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_7ss is not supported", line);
+		u8 byte = 0;
+		clr_set_he_cap(&byte, atoi(pos), HE_MCS_NSS_FOR_7SS);
+		conf->he_op.he_basic_mcs_nss_set |= (u16)(byte << 8);
 	} else if (os_strcmp(buf, "he_operation_max_mcs_for_8ss") == 0) {
-		wpa_printf(MSG_WARNING, "Line %d: he_operation_max_mcs_for_8ss is not supported", line);
+		u8 byte = 0;
+		clr_set_he_cap(&byte, atoi(pos), HE_MCS_NSS_FOR_8SS);
+		conf->he_op.he_basic_mcs_nss_set |= (u16)(byte << 8);
 	} else if (os_strcmp(buf, "he_operation_vht_channel_width") == 0) {
 		wpa_printf(MSG_WARNING, "Line %d: he_operation_vht_channel_width is not supported", line);
 	} else if (os_strcmp(buf, "he_operation_vht_channel_center_segment0") == 0) {
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 791ddb7a6..e86e62fbf 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1280,6 +1280,7 @@ struct hostapd_config {
 	u32 ht_tx_bf_capab;
 	u8  ht_cap_ampdu_parameters;
 	u8  ht_cap_ampdu_parameters_override_mask;
+	u32 ht_mcs_set[4];
 	int ieee80211n;
 	int ieee80211n_acax_compat;
 	int secondary_channel;
@@ -1295,6 +1296,7 @@ struct hostapd_config {
 	u8 vht_oper_centr_freq_seg0_idx;
 	u8 vht_oper_centr_freq_seg1_idx;
 	u8 ht40_plus_minus_allowed;
+	u32 vht_mcs_set[2];
 	int assoc_rsp_rx_mcs_mask;
 
 	/* Use driver-generated interface addresses when adding multiple BSSs */
diff --git a/src/ap/hw_features.c b/src/ap/hw_features.c
index b1d47cdad..76d40b149 100644
--- a/src/ap/hw_features.c
+++ b/src/ap/hw_features.c
@@ -813,7 +813,25 @@ static int ieee80211ax_supported_he_capab(struct hostapd_iface *iface)
 #ifdef CONFIG_VENDOR_MXL
 static int hostapd_override_capab_vendor_mxl(struct hostapd_iface *iface)
 {
+	if (iface->conf->ieee80211n && iface->conf->ht_mcs_set[0]) {
+		wpa_printf(MSG_DEBUG, "Override HT MCS SET");
+		if (EOK != memcpy_s(iface->current_mode->mcs_set, sizeof(iface->current_mode->mcs_set),
+			 iface->conf->ht_mcs_set, sizeof(iface->conf->ht_mcs_set))) {
+				wpa_printf(MSG_ERROR, "%s: memcpy_s error", __func__);
+				return -1;
+		}
+	}
+
 #ifdef CONFIG_IEEE80211AC
+	if(iface->conf->ieee80211ac && iface->conf->vht_mcs_set[0]) {
+		wpa_printf(MSG_DEBUG, "Override VHT MCS SET");
+		if (EOK != memcpy_s(iface->current_mode->vht_mcs_set, sizeof(iface->current_mode->vht_mcs_set),
+			 iface->conf->vht_mcs_set, sizeof(iface->conf->vht_mcs_set))) {
+				wpa_printf(MSG_ERROR, "%s: memcpy_s error", __func__);
+				return -1;
+		}
+	}
+
 	/* If VHT Capabs explicitly not set for 2.4GHz, take from HW capabilities for vendor_vht usecase */
 	if (!iface->conf->mxl_conf.vht_capab_set && (iface->current_mode->mode == HOSTAPD_MODE_IEEE80211G))
 		iface->conf->vht_capab = iface->current_mode->vht_capab;
@@ -864,6 +882,7 @@ int hostapd_check_ht_capab(struct hostapd_iface *iface)
 	ret = ieee80211n_check_40mhz(iface);
 	if (ret)
 		return ret;
+
 	if (!ieee80211n_allowed_ht40_channel_pair(iface))
 		return -1;
 
-- 
2.43.0

