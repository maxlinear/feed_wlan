From 92f791b5f6192c0f67a1d9b680ed0ca0b9e3afb4 Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Thu, 17 Nov 2022 14:58:35 +0100
Subject: [PATCH] WLANRTSYS-50088: hostapd: additional implementation for 20-40
 coexistence

---
 hostapd/Makefile                   |   3 +
 hostapd/config_file.c              |   6 ++
 hostapd/mxl_config.c               | 123 +++++++++++++++++++++++++++++
 src/ap/ap_config.c                 |  12 +++
 src/ap/ap_config.h                 |   9 +++
 src/ap/hw_features.c               |  11 +++
 src/ap/ieee802_11.c                |   4 +
 src/ap/ieee802_11_ht.c             |  27 +++++++
 src/ap/mxl_coexistence.c           | 114 ++++++++++++++++++++++++++
 src/ap/mxl_coexistence.h           |  28 +++++++
 src/ap/mxl_config.h                |  65 +++++++++++++++
 src/ap/mxl_hostapd.c               |   1 +
 src/common/hw_features_common.c    |  20 +++++
 src/common/mxl_ieee802_11_common.c |  31 ++++++++
 src/common/mxl_ieee802_11_common.h |  22 ++++++
 src/common/mxl_wpa_ctrl.h          |  20 +++++
 src/drivers/driver.h               |   6 ++
 src/drivers/driver_nl80211.c       |  11 ++-
 src/drivers/mxl_driver.h           |  21 +++++
 src/utils/mxl_common.h             |   4 +
 wpa_supplicant/Makefile            |   1 +
 wpa_supplicant/wpa_supplicant.c    |   6 ++
 22 files changed, 543 insertions(+), 2 deletions(-)
 create mode 100644 hostapd/mxl_config.c
 create mode 100644 src/ap/mxl_coexistence.c
 create mode 100644 src/ap/mxl_coexistence.h
 create mode 100644 src/ap/mxl_config.h
 create mode 100644 src/common/mxl_ieee802_11_common.c
 create mode 100644 src/common/mxl_ieee802_11_common.h
 create mode 100644 src/common/mxl_wpa_ctrl.h
 create mode 100644 src/drivers/mxl_driver.h

diff --git a/hostapd/Makefile b/hostapd/Makefile
index a638bc23b..205f75b5b 100644
--- a/hostapd/Makefile
+++ b/hostapd/Makefile
@@ -358,8 +358,11 @@ endif
 
 ifdef CONFIG_VENDOR_MXL
 CFLAGS+= -DCONFIG_VENDOR_MXL
+OBJS += mxl_config.o
 OBJS += ../src/ap/mxl_hostapd.o
 OBJS += ../src/ap/mxl_events.o
+OBJS += ../src/ap/mxl_coexistence.o
+OBJS += ../src/common/mxl_ieee802_11_common.o
 endif
 
 include ../src/drivers/drivers.mak
diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 7cf0ccfbe..dfb34fa1d 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -24,6 +24,9 @@
 #include "ap/wpa_auth.h"
 #include "ap/ap_config.h"
 #include "config_file.h"
+#ifdef CONFIG_VENDOR_MXL
+#include "ap/mxl_config.h"
+#endif /* CONFIG_VENDOR_MXL */
 
 
 #ifndef CONFIG_NO_VLAN
@@ -4789,6 +4792,9 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 			return 1;
 		}
 #endif /* CONFIG_IEEE80211BE */
+#ifdef CONFIG_VENDOR_MXL
+	} else if (mxl_hostapd_config_fill(conf, bss, buf, pos, line)) {
+#endif /* CONFIG_VENDOR_MXL */
 	} else {
 		wpa_printf(MSG_ERROR,
 			   "Line %d: unknown configuration item '%s'",
diff --git a/hostapd/mxl_config.c b/hostapd/mxl_config.c
new file mode 100644
index 000000000..36aa6c5ab
--- /dev/null
+++ b/hostapd/mxl_config.c
@@ -0,0 +1,123 @@
+/******************************************************************************
+
+         Copyright (c) 2023, MaxLinear, Inc.
+         Copyright 2016 - 2020 Intel Corporation
+         Copyright 2015 - 2016 Lantiq Beteiligungs-GmbH & Co. KG
+         Copyright 2009 - 2014 Lantiq Deutschland GmbH
+         Copyright 2007 - 2008 Infineon Technologies AG
+
+  For licensing information, see the file 'LICENSE' in the root folder of
+  this software module.
+
+*******************************************************************************/
+
+#include "utils/includes.h"
+#include "utils/common.h"
+#include "ap/ap_config.h"
+#include "utils/mxl_common.h"
+#include "ap/mxl_config.h"
+
+int mxl_hostapd_config_fill (struct hostapd_config *conf,
+					struct hostapd_bss_config *bss,
+					const char *buf, char *pos, int line)
+{
+	struct mxl_hostapd_config *mxl_conf = &conf->mxl_conf;
+	struct mxl_hostapd_bss_config *mxl_bss_conf = &bss->mxl_bss_conf;
+	(void)mxl_bss_conf;
+
+	if (os_strcmp(buf, "scan_passive_dwell") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_RANGE(val, SCAN_PASSIVE_DWELL_MIN, SCAN_PASSIVE_DWELL_MAX)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid scan_passive_dwell value %u",
+				line, val);
+			return 0;
+		}
+		mxl_conf->scan_passive_dwell = (u16)val;
+	} else if  (os_strcmp(buf, "scan_active_dwell") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_RANGE(val, SCAN_ACTIVE_DWELL_MIN, SCAN_ACTIVE_DWELL_MAX)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid scan_active_dwell value %u",
+				line, val);
+			return 0;
+		}
+		mxl_conf->scan_active_dwell = (u16)val;
+	} else if  (os_strcmp(buf, "scan_passive_total_per_channel") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_RANGE(val, SCAN_PASSIVE_TOTAL_PER_CHANNEL_MIN, SCAN_PASSIVE_TOTAL_PER_CHANNEL_MAX)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid scan_active_total_per_channel value %u",
+				line, val);
+			return 0;
+		}
+		mxl_conf->scan_passive_total_per_channel = (u16)val;
+	} else if  (os_strcmp(buf, "scan_active_total_per_channel") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_RANGE(val, SCAN_ACTIVE_TOTAL_PER_CHANNEL_MIN, SCAN_ACTIVE_TOTAL_PER_CHANNEL_MAX)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid scan_active_total_per_channel value %u",
+				line, val);
+			return 0;
+		}
+		mxl_conf->scan_active_total_per_channel = (u16)val;
+	} else if  (os_strcmp(buf, "channel_transition_delay_factor") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_RANGE(val, CHANNEL_TRANSITION_DELAY_FACTOR_MIN, CHANNEL_TRANSITION_DELAY_FACTOR_MAX)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid channel_transition_delay_factor value %u",
+				line, val);
+			return 0;
+		}
+		mxl_conf->channel_transition_delay_factor = (u16)val;
+	} else if  (os_strcmp(buf, "scan_activity_threshold") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_RANGE(val, SCAN_ACTIVITY_THRESHOLD_MIN, SCAN_ACTIVITY_THRESHOLD_MAX)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid scan_activity_threshold value %u",
+				line, val);
+			return 0;
+		}
+		mxl_conf->scan_activity_threshold = (u16)val;
+	} else if  (os_strcmp(buf, "obss_beacon_rssi_threshold") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_RANGE(val, OBSS_BEACON_RSSI_TH_MIN, OBSS_BEACON_RSSI_TH_MAX)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid obss_beacon_rssi_threshold",
+				   line);
+			return 0;
+		}
+		mxl_conf->obss_beacon_rssi_threshold = val;
+	} else if (os_strcmp(buf, "ignore_40_mhz_intolerant") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_BOOL_RANGE(val)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid ignore_40_mhz_intolerant %d",
+				line, val);
+			return 0;
+		}
+		mxl_conf->ignore_40_mhz_intolerant = val;
+	} else
+		return 0;
+	return 1;
+}
+
+void mxl_hostapd_config_defaults_bss(struct hostapd_bss_config *bss)
+{
+	/* no need to initlize with 0 or NULL - this is done by hostapd with memset */
+	struct mxl_hostapd_bss_config *mxl_bss_conf = &bss->mxl_bss_conf;
+	(void)mxl_bss_conf;
+}
+
+void mxl_hostapd_config_defaults(struct hostapd_config *conf)
+{
+	/* no need to initlize with 0 or NULL - this is done by hostapd with memset */
+	struct mxl_hostapd_config *mxl_conf = &conf->mxl_conf;
+
+	mxl_conf->scan_passive_dwell = SCAN_PASSIVE_DWELL_DEFAULT;
+	mxl_conf->scan_active_dwell = SCAN_ACTIVE_DWELL_MIN;
+	mxl_conf->scan_passive_total_per_channel = SCAN_PASSIVE_TOTAL_PER_CHANNEL_MIN;
+	mxl_conf->scan_active_total_per_channel = SCAN_ACTIVE_TOTAL_PER_CHANNEL_MIN;
+	mxl_conf->channel_transition_delay_factor = CHANNEL_TRANSITION_DELAY_FACTOR_MIN;
+	mxl_conf->scan_activity_threshold = SCAN_ACTIVITY_THRESHOLD_DEFAULT;
+	mxl_conf->obss_beacon_rssi_threshold = -60;
+
+}
+
+void mxl_hostapd_config_free_bss(struct hostapd_bss_config *bss)
+{
+	struct mxl_hostapd_bss_config *mxl_bss_conf = &bss->mxl_bss_conf;
+	(void)mxl_bss_conf;
+}
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 2c66217e8..c5e3fc37a 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -23,6 +23,9 @@
 #include "sta_info.h"
 #include "airtime_policy.h"
 #include "ap_config.h"
+#ifdef CONFIG_VENDOR_MXL
+#include "mxl_config.h"
+#endif /* CONFIG_VENDOR_MXL */
 
 
 static void hostapd_config_free_vlan(struct hostapd_bss_config *bss)
@@ -172,6 +175,9 @@ void hostapd_config_defaults_bss(struct hostapd_bss_config *bss)
 	bss->pasn_comeback_after = 10;
 	bss->pasn_noauth = 1;
 #endif /* CONFIG_PASN */
+#ifdef CONFIG_VENDOR_MXL
+	mxl_hostapd_config_defaults_bss(bss);
+#endif /* CONFIG_VENDOR_MXL */
 }
 
 
@@ -295,6 +301,9 @@ struct hostapd_config * hostapd_config_defaults(void)
 	conf->airtime_update_interval = AIRTIME_DEFAULT_UPDATE_INTERVAL;
 #endif /* CONFIG_AIRTIME_POLICY */
 
+#ifdef CONFIG_VENDOR_MXL
+	mxl_hostapd_config_defaults(conf);
+#endif /* CONFIG_VENDOR_MXL */
 	return conf;
 }
 
@@ -981,6 +990,9 @@ void hostapd_config_free_bss(struct hostapd_bss_config *conf)
 #ifdef CONFIG_PASN
 	os_free(conf->pasn_groups);
 #endif /* CONFIG_PASN */
+#ifdef CONFIG_VENDOR_MXL
+	mxl_hostapd_config_free_bss(conf);
+#endif /* CONFIG_VENDOR_MXL */
 
 	os_free(conf);
 }
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 5699a6be1..760d69950 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -19,6 +19,9 @@
 #include "wps/wps.h"
 #include "fst/fst.h"
 #include "vlan.h"
+#ifdef CONFIG_VENDOR_MXL
+#include "ap/mxl_config.h"
+#endif /* CONFIG_VENDOR_MXL */
 
 enum macaddr_acl {
 	ACCEPT_UNLESS_DENIED = 0,
@@ -949,6 +952,9 @@ struct hostapd_bss_config {
 	/* The AP's MLD MAC address within the AP MLD */
 	u8 mld_addr[ETH_ALEN];
 #endif /* CONFIG_IEEE80211BE */
+#ifdef CONFIG_VENDOR_MXL
+	struct mxl_hostapd_bss_config mxl_bss_conf;
+#endif /* CONFIG_VENDOR_MXL */
 };
 
 /**
@@ -1185,6 +1191,9 @@ struct hostapd_config {
 		MBSSID_ENABLED = 1,
 		ENHANCED_MBSSID_ENABLED = 2,
 	} mbssid;
+#ifdef CONFIG_VENDOR_MXL
+	struct mxl_hostapd_config mxl_conf;
+#endif /* CONFIG_VENDOR_MXL */
 };
 
 
diff --git a/src/ap/hw_features.c b/src/ap/hw_features.c
index 9edbb5ae2..ac718015d 100644
--- a/src/ap/hw_features.c
+++ b/src/ap/hw_features.c
@@ -23,6 +23,9 @@
 #include "ieee802_11.h"
 #include "beacon.h"
 #include "hw_features.h"
+#ifdef CONFIG_VENDOR_MXL
+#include "common/mxl_ieee802_11_common.h"
+#endif /* CONFIG_VENDOR_MXL */
 
 
 void hostapd_free_hw_features(struct hostapd_hw_modes *hw_features,
@@ -355,6 +358,9 @@ static void ieee80211n_check_scan(struct hostapd_iface *iface)
 		return;
 	}
 
+#ifdef CONFIG_VENDOR_MXL
+	mxl_scan_res_set_rssi_threshold(scan_res, iface->conf->mxl_conf.obss_beacon_rssi_threshold);
+#endif /* CONFIG_VENDOR_MXL */
 	if (iface->current_mode->mode == HOSTAPD_MODE_IEEE80211A)
 		oper40 = ieee80211n_check_40mhz_5g(iface, scan_res);
 	else
@@ -549,6 +555,11 @@ static int ieee80211n_check_40mhz(struct hostapd_iface *iface)
 	if (!iface->conf->secondary_channel || iface->conf->no_pri_sec_switch)
 		return 0;
 
+#ifdef CONFIG_VENDOR_MXL
+	if (iface->conf->mxl_conf.ignore_40_mhz_intolerant)
+		return 0;
+#endif /* CONFIG_VENDOR_MXL */
+
 	hostapd_set_state(iface, HAPD_IFACE_HT_SCAN);
 	wpa_printf(MSG_DEBUG, "Scan for neighboring BSSes prior to enabling "
 		   "40 MHz channel");
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 51035f4ba..739eda29d 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -59,6 +59,7 @@
 #include "pasn/pasn_common.h"
 #ifdef CONFIG_VENDOR_MXL
 #include "mxl_hostapd.h"
+#include "mxl_coexistence.h"
 #endif /* CONFIG_VENDOR_MXL */
 
 
@@ -5916,6 +5917,9 @@ static void handle_beacon(struct hostapd_data *hapd,
 					     sizeof(mgmt->u.beacon)), &elems,
 				      0);
 
+#ifdef CONFIG_VENDOR_MXL
+	mxl_hostapd_obss_beacon(hapd, mgmt, &elems, fi->ssi_signal);
+#endif
 	ap_list_process_beacon(hapd->iface, mgmt, &elems, fi);
 }
 
diff --git a/src/ap/ieee802_11_ht.c b/src/ap/ieee802_11_ht.c
index f90f1254e..25007d7ef 100644
--- a/src/ap/ieee802_11_ht.c
+++ b/src/ap/ieee802_11_ht.c
@@ -19,6 +19,9 @@
 #include "ieee802_11.h"
 #include "hw_features.h"
 #include "ap_drv_ops.h"
+#ifdef CONFIG_VENDOR_MXL
+#include "mxl_coexistence.h"
+#endif
 
 
 u8 * hostapd_eid_ht_capabilities(struct hostapd_data *hapd, u8 *eid)
@@ -71,6 +74,9 @@ u8 * hostapd_eid_ht_capabilities(struct hostapd_data *hapd, u8 *eid)
 			host_to_le16(5);
 		scan_params->scan_activity_threshold =
 			host_to_le16(25);
+#ifdef CONFIG_VENDOR_MXL
+		mxl_hostapd_fill_obss_scan_params(scan_params, hapd);
+#endif
 
 		pos += sizeof(*scan_params);
 	}
@@ -335,6 +341,9 @@ void hostapd_2040_coex_action(struct hostapd_data *hapd,
 				       HOSTAPD_LEVEL_INFO,
 				       "Switching to 20 MHz operation");
 			iface->conf->secondary_channel = 0;
+#ifdef CONFIG_VENDOR_MXL
+			hostapd_set_oper_centr_freq_seg0_idx(iface->conf, 0);
+#endif /* CONFIG_VENDOR_MXL */
 			ieee802_11_set_beacons(iface);
 		}
 		if (!iface->num_sta_ht40_intolerant &&
@@ -390,6 +399,14 @@ void ht40_intolerant_add(struct hostapd_iface *iface, struct sta_info *sta)
 	if (iface->current_mode->mode != HOSTAPD_MODE_IEEE80211G)
 		return;
 
+#ifdef CONFIG_VENDOR_MXL
+	if (iface->conf->mxl_conf.ignore_40_mhz_intolerant) {
+		wpa_printf(MSG_INFO, "HT: Ignore Forty MHz Intolerant that is set by STA " MACSTR
+				   " in Association Request", MAC2STR(sta->addr));
+		return;
+	}
+#endif /* CONFIG_VENDOR_MXL */
+
 	wpa_printf(MSG_INFO, "HT: Forty MHz Intolerant is set by STA " MACSTR
 		   " in Association Request", MAC2STR(sta->addr));
 
@@ -402,8 +419,15 @@ void ht40_intolerant_add(struct hostapd_iface *iface, struct sta_info *sta)
 
 	if (iface->conf->secondary_channel &&
 	    (iface->drv_flags & WPA_DRIVER_FLAGS_HT_2040_COEX)) {
+		iface->secondary_ch = iface->conf->secondary_channel;
 		iface->conf->secondary_channel = 0;
+#ifdef CONFIG_VENDOR_MXL
+		hostapd_set_oper_centr_freq_seg0_idx(iface->conf, 0);
+#endif /* CONFIG_VENDOR_MXL */
 		ieee802_11_set_beacons(iface);
+#ifdef CONFIG_VENDOR_MXL
+		mxl_hostapd_notify_obss_bw_change(iface->bss[0], 20, 0);
+#endif /* CONFIG_VENDOR_MXL */
 	}
 }
 
@@ -531,4 +555,7 @@ void ap_ht2040_timeout(void *eloop_data, void *user_data)
 
 	iface->conf->secondary_channel = iface->secondary_ch;
 	ieee802_11_set_beacons(iface);
+#ifdef CONFIG_VENDOR_MXL
+	mxl_hostapd_notify_obss_bw_change(iface->bss[0], 40, iface->conf->secondary_channel);
+#endif /* CONFIG_VENDOR_MXL */
 }
diff --git a/src/ap/mxl_coexistence.c b/src/ap/mxl_coexistence.c
new file mode 100644
index 000000000..596645dd2
--- /dev/null
+++ b/src/ap/mxl_coexistence.c
@@ -0,0 +1,114 @@
+/******************************************************************************
+
+         Copyright (c) 2023 - 2024, MaxLinear, Inc.
+         Copyright 2016 - 2020 Intel Corporation
+         Copyright 2015 - 2016 Lantiq Beteiligungs-GmbH & Co. KG
+         Copyright 2009 - 2014 Lantiq Deutschland GmbH
+         Copyright 2007 - 2008 Infineon Technologies AG
+
+  This software may be distributed under the terms of the BSD license.
+  See README for more details.
+
+*******************************************************************************/
+
+#include "utils/includes.h"
+#include "utils/common.h"
+#include "utils/eloop.h"
+#include "utils/common.h"
+#include "common/ieee802_11_defs.h"
+#include "hostapd.h"
+#include "mxl_coexistence.h"
+#include "common/mxl_wpa_ctrl.h"
+
+
+void mxl_hostapd_fill_obss_scan_params(struct ieee80211_obss_scan_parameters *scan_params, const struct hostapd_data *hapd) {
+	scan_params->scan_passive_dwell =
+		host_to_le16(hapd->iconf->mxl_conf.scan_passive_dwell);
+	scan_params->scan_active_dwell =
+		host_to_le16(hapd->iconf->mxl_conf.scan_active_dwell);
+	scan_params->scan_passive_total_per_channel =
+		host_to_le16(hapd->iconf->mxl_conf.scan_passive_total_per_channel);
+	scan_params->scan_active_total_per_channel =
+		host_to_le16(hapd->iconf->mxl_conf.scan_active_total_per_channel);
+	scan_params->channel_transition_delay_factor =
+		host_to_le16(hapd->iconf->mxl_conf.channel_transition_delay_factor);
+	scan_params->scan_activity_threshold =
+		host_to_le16(hapd->iconf->mxl_conf.scan_activity_threshold);
+}
+
+
+static void mxl_hostapd_switch_to_20mhz(struct hostapd_data *hapd,
+			        struct hostapd_iface *iface, const struct ieee80211_mgmt *mgmt, int signal)
+{
+	if (iface->drv_flags & WPA_DRIVER_FLAGS_HT_2040_COEX) {
+		if (iface->conf->secondary_channel) {
+			hostapd_logger(hapd, mgmt->sa,
+				       HOSTAPD_MODULE_IEEE80211,
+				       HOSTAPD_LEVEL_INFO,
+				       "Switching to 20 MHz operation due to OBSS beacon reception at rssi %d", signal);
+			iface->secondary_ch = iface->conf->secondary_channel;
+			iface->conf->secondary_channel = 0;
+			hostapd_set_oper_centr_freq_seg0_idx(iface->conf, 0);
+			ieee802_11_update_beacons(iface);
+			mxl_hostapd_notify_obss_bw_change(hapd, 20, 0);
+		}
+		if (!iface->num_sta_ht40_intolerant) {
+			unsigned int delay_time;
+			delay_time = OVERLAPPING_BSS_TRANS_DELAY_FACTOR *
+				iface->conf->obss_interval;
+			eloop_cancel_timeout(ap_ht2040_timeout, hapd->iface,
+					     NULL);
+			eloop_register_timeout(delay_time, 0, ap_ht2040_timeout,
+					       hapd->iface, NULL);
+		}
+	}
+}
+
+void mxl_hostapd_obss_beacon(struct hostapd_data *hapd,
+						 const struct ieee80211_mgmt *mgmt,
+						 struct ieee802_11_elems *elems,
+						 int rssi_level)
+{
+	struct hostapd_iface *iface = hapd->iface;
+
+	if (!(iface->conf->ht_capab & HT_CAP_INFO_SUPP_CHANNEL_WIDTH_SET))
+		return;
+	if (!iface->conf->obss_interval)
+		return;
+	if (iface->conf->mxl_conf.obss_beacon_rssi_threshold > rssi_level)
+		return;
+
+	/* Ignore Beacon from the legecy AP on the same channel.
+	 * only for the overlapping channel we need to detect OBSS.
+	 */
+	if (elems->ds_params &&
+		hapd->iface->current_mode &&
+		(hapd->iface->current_mode->mode == HOSTAPD_MODE_IEEE80211G ||
+		hapd->iface->current_mode->mode == HOSTAPD_MODE_IEEE80211B) &&
+		hapd->iconf->channel == elems->ds_params[0]) {
+		wpa_printf(MSG_DEBUG,
+			"Ignore Beacon's of legecy AP in the operating channel ds.chan=%u", elems->ds_params[0]);
+		return;
+	}
+
+	if (elems->ht_capabilities) {
+		struct ieee80211_ht_capabilities *ht_cap =
+			(struct ieee80211_ht_capabilities *)
+			elems->ht_capabilities;
+
+		if (le_to_host16(ht_cap->ht_capabilities_info) &
+		    HT_CAP_INFO_40MHZ_INTOLERANT) {
+			mxl_hostapd_switch_to_20mhz(hapd, iface, mgmt, rssi_level);
+		}
+	} else if (!elems->ht_capabilities && !elems->vht_capabilities && !elems->he_capabilities) {
+		/* handle OBSS as no HT/VHT/HE IE present */
+		mxl_hostapd_switch_to_20mhz(hapd, iface, mgmt, rssi_level);
+	}
+}
+
+void mxl_hostapd_notify_obss_bw_change(struct hostapd_data *hapd, int operating_chan_bw, int extension_chan) {
+	wpa_msg(hapd->msg_ctx, MSG_INFO, AP_BW_CHANGED "freq=%d Channel=%d "
+		"OperatingChannelBandwidth=%d ExtensionChannel=%d cf1=%d cf2=%d reason=%s dfs_chan=%d",
+		hapd->iface->freq, hapd->iconf->channel,
+		operating_chan_bw, extension_chan, hapd->iface->freq, 0, "OBSS", 0);
+}
diff --git a/src/ap/mxl_coexistence.h b/src/ap/mxl_coexistence.h
new file mode 100644
index 000000000..68e480b24
--- /dev/null
+++ b/src/ap/mxl_coexistence.h
@@ -0,0 +1,28 @@
+/******************************************************************************
+
+         Copyright (c) 2023 - 2024, MaxLinear, Inc.
+         Copyright 2016 - 2020 Intel Corporation
+         Copyright 2015 - 2016 Lantiq Beteiligungs-GmbH & Co. KG
+         Copyright 2009 - 2014 Lantiq Deutschland GmbH
+         Copyright 2007 - 2008 Infineon Technologies AG
+
+  This software may be distributed under the terms of the BSD license.
+  See README for more details.
+
+*******************************************************************************/
+
+#ifndef MXL_COEXISTENCE_H
+#define MXL_COEXISTENCE_H
+
+#include "beacon.h"
+#include "ieee802_11.h"
+
+
+void mxl_hostapd_fill_obss_scan_params(struct ieee80211_obss_scan_parameters *scan_params, const struct hostapd_data *hapd);
+void mxl_hostapd_obss_beacon(struct hostapd_data *hapd,
+						 const struct ieee80211_mgmt *mgmt,
+						 struct ieee802_11_elems *elems,
+						 int rssi_level);
+void mxl_hostapd_notify_obss_bw_change(struct hostapd_data *hapd, int operating_chan_bw, int extension_chan);
+
+#endif /* MXL_COEXISTENCE_H */
diff --git a/src/ap/mxl_config.h b/src/ap/mxl_config.h
new file mode 100644
index 000000000..cdd506147
--- /dev/null
+++ b/src/ap/mxl_config.h
@@ -0,0 +1,65 @@
+/******************************************************************************
+
+         Copyright (c) 2023 - 2024, MaxLinear, Inc.
+         Copyright 2016 - 2020 Intel Corporation
+         Copyright 2015 - 2016 Lantiq Beteiligungs-GmbH & Co. KG
+         Copyright 2009 - 2014 Lantiq Deutschland GmbH
+         Copyright 2007 - 2008 Infineon Technologies AG
+
+  This software may be distributed under the terms of the BSD license.
+  See README for more details.
+
+*******************************************************************************/
+
+#ifndef MXL_CONFIG_H
+#define MXL_CONFIG_H
+
+/**
+ * struct mxl_hostapd_config - Per-radio interface configuration
+ */
+struct mxl_hostapd_config {
+	u16 scan_passive_dwell;
+	u16 scan_active_dwell;
+	u16 scan_passive_total_per_channel;
+	u16 scan_active_total_per_channel;
+	u16 channel_transition_delay_factor;
+	u16 scan_activity_threshold;
+	int obss_beacon_rssi_threshold;
+	int ignore_40_mhz_intolerant;
+};
+
+/**
+ * struct mxl_hostapd_bss_config - Per-BSS configuration
+ */
+struct mxl_hostapd_bss_config {
+};
+
+struct hostapd_config;
+struct hostapd_bss_config;
+
+int mxl_hostapd_config_fill (struct hostapd_config *conf,
+					struct hostapd_bss_config *bss,
+					const char *buf, char *pos, int line);
+void mxl_hostapd_config_defaults_bss(struct hostapd_bss_config *bss);
+void mxl_hostapd_config_defaults(struct hostapd_config *conf);
+void mxl_hostapd_config_free_bss(struct hostapd_bss_config *bss);
+
+
+#define SCAN_PASSIVE_DWELL_DEFAULT 20
+#define SCAN_PASSIVE_DWELL_MIN 5
+#define SCAN_PASSIVE_DWELL_MAX 1000
+#define SCAN_ACTIVE_DWELL_MIN 10
+#define SCAN_ACTIVE_DWELL_MAX 1000
+#define SCAN_PASSIVE_TOTAL_PER_CHANNEL_MIN 200
+#define SCAN_PASSIVE_TOTAL_PER_CHANNEL_MAX 10000
+#define SCAN_ACTIVE_TOTAL_PER_CHANNEL_MIN 20
+#define SCAN_ACTIVE_TOTAL_PER_CHANNEL_MAX 10000
+#define CHANNEL_TRANSITION_DELAY_FACTOR_MIN 5
+#define CHANNEL_TRANSITION_DELAY_FACTOR_MAX 100
+#define SCAN_ACTIVITY_THRESHOLD_DEFAULT 25
+#define SCAN_ACTIVITY_THRESHOLD_MIN 0
+#define SCAN_ACTIVITY_THRESHOLD_MAX 100
+#define OBSS_BEACON_RSSI_TH_MIN (-100)
+#define OBSS_BEACON_RSSI_TH_MAX 0
+
+#endif /* MXL_CONFIG_H */
diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index 68c3f0504..2fb84e182 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -20,6 +20,7 @@
 #include "mxl_hostapd.h"
 #include "common/vendor_cmds_copy.h"
 
+
 static void ap_sta_remove_in_other_bss_now(struct hostapd_data *hapd, struct sta_info *sta)
 {
 	struct hostapd_iface *iface = hapd->iface;
diff --git a/src/common/hw_features_common.c b/src/common/hw_features_common.c
index 57b5a8e23..9484592c7 100644
--- a/src/common/hw_features_common.c
+++ b/src/common/hw_features_common.c
@@ -14,6 +14,9 @@
 #include "ieee802_11_defs.h"
 #include "ieee802_11_common.h"
 #include "hw_features_common.h"
+#ifdef CONFIG_VENDOR_MXL
+#include "mxl_ieee802_11_common.h"
+#endif /* CONFIG_VENDOR_MXL */
 
 
 struct hostapd_channel_data * hw_get_channel_chan(struct hostapd_hw_modes *mode,
@@ -219,6 +222,10 @@ int check_40mhz_5g(struct wpa_scan_results *scan_res,
 	pri_bss = sec_bss = 0;
 	for (i = 0; i < scan_res->num; i++) {
 		struct wpa_scan_res *bss = scan_res->res[i];
+#ifdef CONFIG_VENDOR_MXL
+		if (mxl_scan_res_bss_below_threshold(scan_res, bss->level))
+			continue;
+#endif /* CONFIG_VENDOR_MXL */
 		if (bss->freq == pri_chan->freq)
 			pri_bss++;
 		else if (bss->freq == sec_chan->freq)
@@ -238,6 +245,10 @@ int check_40mhz_5g(struct wpa_scan_results *scan_res,
 	match = 0;
 	for (i = 0; i < scan_res->num; i++) {
 		struct wpa_scan_res *bss = scan_res->res[i];
+#ifdef CONFIG_VENDOR_MXL
+		if (mxl_scan_res_bss_below_threshold(scan_res, bss->level))
+			continue;
+#endif /* CONFIG_VENDOR_MXL */
 		get_pri_sec_chan(bss, &bss_pri_chan, &bss_sec_chan);
 		if (pri_chan->chan == bss_pri_chan &&
 		    sec_chan->chan == bss_sec_chan) {
@@ -248,6 +259,10 @@ int check_40mhz_5g(struct wpa_scan_results *scan_res,
 	if (!match) {
 		for (i = 0; i < scan_res->num; i++) {
 			struct wpa_scan_res *bss = scan_res->res[i];
+#ifdef CONFIG_VENDOR_MXL
+			if (mxl_scan_res_bss_below_threshold(scan_res, bss->level))
+				continue;
+#endif /* CONFIG_VENDOR_MXL */
 			get_pri_sec_chan(bss, &bss_pri_chan, &bss_sec_chan);
 			if (pri_chan->chan == bss_sec_chan &&
 			    sec_chan->chan == bss_pri_chan) {
@@ -321,6 +336,11 @@ int check_40mhz_2g4(struct hostapd_hw_modes *mode,
 		int sec = pri;
 		struct ieee802_11_elems elems;
 
+#ifdef CONFIG_VENDOR_MXL
+		if (mxl_scan_res_bss_below_threshold(scan_res, bss->level))
+			continue;
+#endif /* CONFIG_VENDOR_MXL */
+
 		/* Check for overlapping 20 MHz BSS */
 		if (check_20mhz_bss(bss, pri_freq, affected_start,
 				    affected_end)) {
diff --git a/src/common/mxl_ieee802_11_common.c b/src/common/mxl_ieee802_11_common.c
new file mode 100644
index 000000000..f4bc645ee
--- /dev/null
+++ b/src/common/mxl_ieee802_11_common.c
@@ -0,0 +1,31 @@
+/******************************************************************************
+
+         Copyright (c) 2023 - 2024, MaxLinear, Inc.
+         Copyright 2016 - 2020 Intel Corporation
+         Copyright 2015 - 2016 Lantiq Beteiligungs-GmbH & Co. KG
+         Copyright 2009 - 2014 Lantiq Deutschland GmbH
+         Copyright 2007 - 2008 Infineon Technologies AG
+
+  This software may be distributed under the terms of the BSD license.
+  See README for more details.
+
+*******************************************************************************/
+
+#include "utils/includes.h"
+#include "utils/list.h"
+#include "utils/common.h"
+#include "mxl_ieee802_11_common.h"
+
+void mxl_scan_res_set_rssi_threshold(struct wpa_scan_results *scan_res, int rssi_threshold)
+{
+	scan_res->mxl_cfg.rssi_threshold = rssi_threshold;
+}
+
+/* skip BSS if it's RSSI level is below configured threshold */
+bool mxl_scan_res_bss_below_threshold(struct wpa_scan_results *scan_res, int bss_rssi)
+{
+	if (scan_res->mxl_cfg.rssi_threshold > bss_rssi)
+		return true;
+
+	return false;
+}
diff --git a/src/common/mxl_ieee802_11_common.h b/src/common/mxl_ieee802_11_common.h
new file mode 100644
index 000000000..bd710d1a1
--- /dev/null
+++ b/src/common/mxl_ieee802_11_common.h
@@ -0,0 +1,22 @@
+/******************************************************************************
+
+         Copyright (c) 2023 - 2024, MaxLinear, Inc.
+         Copyright 2016 - 2020 Intel Corporation
+         Copyright 2015 - 2016 Lantiq Beteiligungs-GmbH & Co. KG
+         Copyright 2009 - 2014 Lantiq Deutschland GmbH
+         Copyright 2007 - 2008 Infineon Technologies AG
+
+  This software may be distributed under the terms of the BSD license.
+  See README for more details.
+
+*******************************************************************************/
+
+#ifndef MXL_IEEE802_11_COMMON_H
+#define MXL_IEEE802_11_COMMON_H
+
+#include "drivers/driver.h"
+
+void mxl_scan_res_set_rssi_threshold(struct wpa_scan_results *scan_res, int rssi_threshold);
+bool mxl_scan_res_bss_below_threshold(struct wpa_scan_results *scan_res, int bss_rssi);
+
+#endif /* MXL_IEEE802_11_COMMON_H */
diff --git a/src/common/mxl_wpa_ctrl.h b/src/common/mxl_wpa_ctrl.h
new file mode 100644
index 000000000..3218a1970
--- /dev/null
+++ b/src/common/mxl_wpa_ctrl.h
@@ -0,0 +1,20 @@
+/******************************************************************************
+
+         Copyright (c) 2023 - 2024, MaxLinear, Inc.
+         Copyright 2016 - 2020 Intel Corporation
+         Copyright 2015 - 2016 Lantiq Beteiligungs-GmbH & Co. KG
+         Copyright 2009 - 2014 Lantiq Deutschland GmbH
+         Copyright 2007 - 2008 Infineon Technologies AG
+
+  This software may be distributed under the terms of the BSD license.
+  See README for more details.
+
+*******************************************************************************/
+
+#ifndef MXL_WPA_CTRL_H
+#define MXL_WPA_CTRL_H
+
+/* Indication for the bandwidth change due to 20/40 coexistence */
+#define AP_BW_CHANGED "AP-BW-CHANGED "
+
+#endif /* MXL_WPA_CTRL_H */
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 4c43e607a..4bc6f019a 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -27,6 +27,9 @@
 #include "pae/ieee802_1x_kay.h"
 #endif /* CONFIG_MACSEC */
 #include "utils/list.h"
+#ifdef CONFIG_VENDOR_MXL
+#include "mxl_driver.h"
+#endif /* CONFIG_VENDOR_MXL */
 
 #define HOSTAPD_CHAN_DISABLED 0x00000001
 #define HOSTAPD_CHAN_NO_IR 0x00000002
@@ -401,6 +404,9 @@ struct wpa_scan_results {
 	struct wpa_scan_res **res;
 	size_t num;
 	struct os_reltime fetch_time;
+#ifdef CONFIG_VENDOR_MXL
+	struct mxl_scan_cfg mxl_cfg;
+#endif /* CONFIG_VENDOR_MXL */
 };
 
 /**
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 2adbeb348..c359ef02c 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -972,6 +972,10 @@ static int process_beacon_event(struct nl_msg *msg, void *arg)
 		os_memset(&event, 0, sizeof(event));
 		event.rx_mgmt.frame = nla_data(tb[NL80211_ATTR_FRAME]);
 		event.rx_mgmt.frame_len = nla_len(tb[NL80211_ATTR_FRAME]);
+		if (tb[NL80211_ATTR_RX_SIGNAL_DBM])
+			event.rx_mgmt.ssi_signal = (s32) nla_get_u32(tb[NL80211_ATTR_RX_SIGNAL_DBM]);
+		else
+			event.rx_mgmt.ssi_signal = -5000;
 		wpa_supplicant_event(drv->ctx, EVENT_RX_MGMT, &event);
 	}
 
@@ -5524,8 +5528,11 @@ static int nl80211_set_channel(struct i802_bss *bss,
 		   freq->he_enabled, freq->eht_enabled, freq->bandwidth,
 		   freq->center_freq1, freq->center_freq2);
 
-	msg = nl80211_drv_msg(drv, 0, set_chan ? NL80211_CMD_SET_CHANNEL :
-			      NL80211_CMD_SET_WIPHY);
+	if (set_chan)
+		msg = nl80211_bss_msg(bss, 0, NL80211_CMD_SET_CHANNEL);
+	else
+		msg = nl80211_drv_msg(drv, 0, NL80211_CMD_SET_WIPHY);
+
 	if (!msg || nl80211_put_freq_params(msg, freq) < 0) {
 		nlmsg_free(msg);
 		return -1;
diff --git a/src/drivers/mxl_driver.h b/src/drivers/mxl_driver.h
new file mode 100644
index 000000000..f502c541d
--- /dev/null
+++ b/src/drivers/mxl_driver.h
@@ -0,0 +1,21 @@
+/******************************************************************************
+
+         Copyright (c) 2023 - 2024, MaxLinear, Inc.
+         Copyright 2016 - 2020 Intel Corporation
+         Copyright 2015 - 2016 Lantiq Beteiligungs-GmbH & Co. KG
+         Copyright 2009 - 2014 Lantiq Deutschland GmbH
+         Copyright 2007 - 2008 Infineon Technologies AG
+
+  This software may be distributed under the terms of the BSD license.
+  See README for more details.
+
+*******************************************************************************/
+
+#ifndef MXL_DRIVER_H
+#define MXL_DRIVER_H
+
+struct mxl_scan_cfg {
+	int rssi_threshold;
+};
+
+#endif /* MXL_DRIVER_H */
diff --git a/src/utils/mxl_common.h b/src/utils/mxl_common.h
index dadbd8ee6..121f55f93 100644
--- a/src/utils/mxl_common.h
+++ b/src/utils/mxl_common.h
@@ -14,6 +14,10 @@
 #ifndef MXL_COMMON_H
 #define MXL_COMMON_H
 
+/* Validation macros */
+#define IS_VALID_RANGE(val, min, max) ((val >= min) && (val <= max))
+#define IS_VALID_BOOL_RANGE(val) IS_VALID_RANGE(val, false, true)
+
 #ifndef EOK
 #define EOK 0
 #endif
diff --git a/wpa_supplicant/Makefile b/wpa_supplicant/Makefile
index 420807691..dab270b5b 100644
--- a/wpa_supplicant/Makefile
+++ b/wpa_supplicant/Makefile
@@ -1954,6 +1954,7 @@ endif
 ifdef CONFIG_VENDOR_MXL
 CFLAGS += -DCONFIG_VENDOR_MXL
 CFLAGS += -DCONFIG_VENDOR_MXL_BUILD_FOR_SUPPLICANT
+OBJS += ../src/common/mxl_ieee802_11_common.o
 endif
 
 dynamic_eap_methods: $(EAPDYN)
diff --git a/wpa_supplicant/wpa_supplicant.c b/wpa_supplicant/wpa_supplicant.c
index c4c58b757..35d286946 100644
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -69,6 +69,9 @@
 #include "ap/ap_config.h"
 #include "ap/hostapd.h"
 #endif /* CONFIG_MESH */
+#ifdef CONFIG_VENDOR_MXL
+#include "common/mxl_ieee802_11_common.h"
+#endif
 
 const char *const wpa_supplicant_version =
 "wpa_supplicant v" VERSION_STR "\n"
@@ -2875,6 +2878,9 @@ static void ibss_mesh_select_40mhz(struct wpa_supplicant *wpa_s,
 			return;
 		}
 
+#ifdef CONFIG_VENDOR_MXL
+		mxl_scan_res_set_rssi_threshold(scan_res, -128 /* MIN RSSI */);
+#endif /* CONFIG_VENDOR_MXL */
 		res = check_40mhz_5g(scan_res, pri_chan, sec_chan);
 		switch (res) {
 		case 0:
-- 
2.43.0

