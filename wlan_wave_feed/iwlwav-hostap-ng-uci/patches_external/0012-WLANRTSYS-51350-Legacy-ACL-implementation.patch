From cff7b4e664b41cbba3c5d2c5224a879fe33fd5b9 Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Fri, 23 Dec 2022 08:46:26 +0100
Subject: [PATCH] WLANRTSYS-51350: Legacy ACL implementation

---
 hostapd/ctrl_iface.c      |   2 +
 hostapd/hostapd_cli.c     |   8 ++-
 hostapd/mxl_ctrl_iface.c  | 133 ++++++++++++++++++++++++++++++++++++++
 hostapd/mxl_ctrl_iface.h  |   7 ++
 hostapd/mxl_hostapd_cli.c |  12 ++++
 hostapd/mxl_hostapd_cli.h |   8 ++-
 src/utils/mxl_common.h    |   5 +-
 7 files changed, 172 insertions(+), 3 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 519df2035..218018e81 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -3741,6 +3741,7 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 						       reply_size);
 	} else if (os_strcmp(buf, "TERMINATE") == 0) {
 		eloop_terminate();
+#ifndef CONFIG_VENDOR_MXL
 	} else if (os_strncmp(buf, "ACCEPT_ACL ", 11) == 0) {
 		if (os_strncmp(buf + 11, "ADD_MAC ", 8) == 0) {
 			if (hostapd_ctrl_iface_acl_add_mac(
@@ -3796,6 +3797,7 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 		} else {
 			reply_len = -1;
 		}
+#endif /* CONFIG_VENDOR_MXL */
 #ifdef CONFIG_DPP
 	} else if (os_strncmp(buf, "DPP_QR_CODE ", 12) == 0) {
 		res = hostapd_dpp_qr_code(hapd, buf + 12);
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 43a218860..6ffaf87e3 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -227,6 +227,9 @@ static inline int wpa_ctrl_command(struct wpa_ctrl *ctrl, const char *cmd)
 #ifdef CONFIG_VENDOR_MXL
 /* Wrapper to access static open source functions from MXL code */
 int mxl_wpa_ctrl_command(struct wpa_ctrl *ctrl, const char *cmd) { return wpa_ctrl_command(ctrl, cmd); }
+static int hostapd_cli_cmd(struct wpa_ctrl *ctrl, const char *cmd, int min_args, int argc, char *argv[]);
+int mxl_hostapd_cli_cmd(struct wpa_ctrl *ctrl, const char *cmd, int min_args, int argc, char *argv[])
+{ return hostapd_cli_cmd (ctrl, cmd, min_args, argc, argv); }
 #endif /* CONFIG_VENDOR_MXL */
 
 
@@ -1555,6 +1558,7 @@ static int hostapd_cli_cmd_dpp_push_button(struct wpa_ctrl *ctrl, int argc,
 #endif /* CONFIG_DPP */
 
 
+#ifndef CONFIG_VENDOR_MXL
 static int hostapd_cli_cmd_accept_macacl(struct wpa_ctrl *ctrl, int argc,
 					 char *argv[])
 {
@@ -1567,7 +1571,7 @@ static int hostapd_cli_cmd_deny_macacl(struct wpa_ctrl *ctrl, int argc,
 {
 	return hostapd_cli_cmd(ctrl, "DENY_ACL", 1, argc, argv);
 }
-
+#endif /* CONFIG_VENDOR_MXL */
 
 static int hostapd_cli_cmd_poll_sta(struct wpa_ctrl *ctrl, int argc,
 				    char *argv[])
@@ -1791,10 +1795,12 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	  "= press DPP push button" },
 #endif /* CONFIG_DPP3 */
 #endif /* CONFIG_DPP */
+#ifndef CONFIG_VENDOR_MXL
 	{ "accept_acl", hostapd_cli_cmd_accept_macacl, NULL,
 	  "=Add/Delete/Show/Clear accept MAC ACL" },
 	{ "deny_acl", hostapd_cli_cmd_deny_macacl, NULL,
 	  "=Add/Delete/Show/Clear deny MAC ACL" },
+#endif /* CONFIG_VENDOR_MXL */
 	{ "poll_sta", hostapd_cli_cmd_poll_sta, hostapd_complete_stations,
 	  "<addr> = poll a STA to check connectivity with a QoS null frame" },
 	{ "req_beacon", hostapd_cli_cmd_req_beacon, NULL,
diff --git a/hostapd/mxl_ctrl_iface.c b/hostapd/mxl_ctrl_iface.c
index bc32a3d8e..0ab4f5231 100644
--- a/hostapd/mxl_ctrl_iface.c
+++ b/hostapd/mxl_ctrl_iface.c
@@ -23,6 +23,40 @@
 #include "ap/mxl_hostapd.h"
 #include "drivers/mxl_driver_nl80211.h"
 #include "mxl_ctrl_iface.h"
+#include "ap/ctrl_iface_ap.h"
+
+struct hostapd_data *mxl_get_bss_index(const char *cmd, struct hostapd_iface *iface)
+{
+	char *pos_end;
+	char bss_name[IFNAMSIZ + 1];
+	int i;
+	rsize_t len;
+	errno_t err;
+
+	pos_end = os_strchr(cmd, ' ');
+	if (!pos_end) {
+		len = strnlen_s(cmd, RSIZE_MAX_STR);
+		if (!IS_VALID_RANGE(len, AP_MIN_VALID_CHAR, RSIZE_MAX_STR - 1)) {
+			wpa_printf(MSG_ERROR, "mxl_get_bss_index - wrong len");
+			return NULL;
+		}
+		pos_end = (char *) cmd + len;
+	}
+	err = memcpy_s(bss_name, sizeof(bss_name), cmd, pos_end - cmd);
+	if (EOK != err) {
+		wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
+		return NULL;
+	}
+	bss_name[pos_end - cmd] = '\0';
+	for (i = 0; i < iface->num_bss; i++) {
+		struct hostapd_data *bss = iface->bss[i];
+
+		if (!strncmp(bss->conf->iface, bss_name, IFNAMSIZ))
+			return bss;
+	}
+
+	return NULL;
+}
 
 static int mxl_hostapd_ctrl_iface_get_hw_features(struct hostapd_iface *iface, const char *cmd, char *buf, size_t buflen)
 {
@@ -291,6 +325,7 @@ int mxl_hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 					      int reply_size,
 					      int *reply_len)
 {
+
 	/* Return 1 if buf matched any ctrl iface command, 0 otherwise */
 	if (os_strncmp(buf, "GET_HW_FEATURES", 15) == 0) {
 		*reply_len = mxl_hostapd_ctrl_iface_get_hw_features(hapd->iface, NULL, reply, reply_size);
@@ -307,8 +342,106 @@ int mxl_hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "GET_ZWDFS_ANT", 13) == 0) {
 		if (mxl_hostapd_ctrl_iface_get_zwdfs_antenna(hapd, reply, reply_size) < 0)
 			*reply_len = -1;
+	} else if (os_strncmp(buf, "ACCEPT_ACL ", sizeof("ACCEPT_ACL ") - 1 ) == 0) {
+		char *buf_start,*mac;
+		int len;
+		struct hostapd_data *bss = mxl_get_bss_index(buf + sizeof("ACCEPT_ACL ") - 1, hapd->iface);
+		if(!bss)
+			*reply_len = -1;
+		else{
+			//ACCEPT_ACL wlan0.3 ADD_MAC 11:22:33:44:55:66
+			len = strnlen_s(bss->conf->iface, sizeof(bss->conf->iface) - 1);
+			if (IS_VALID_RANGE(len, AP_MIN_VALID_CHAR, sizeof(bss->conf->iface) - 1)) {
+				buf_start = buf + sizeof("ACCEPT_ACL ") - 1 + len + sizeof(" ") - 1;
+				mac = buf_start + sizeof("ADD_MAC ") - 1 ;//ADD_MAC and DEL_MAC same len
+				if (os_strncmp(buf_start, "ADD_MAC ", sizeof("ADD_MAC ") - 1) == 0) {
+					if (mxl_hostapd_ctrl_iface_acl_add_mac(
+								&bss->conf->accept_mac,
+								&bss->conf->num_accept_mac, mac))
+						*reply_len = -1;
+				} else if (os_strncmp(buf_start, "DEL_MAC ", sizeof("DEL_MAC ") - 1) == 0) {
+					if (!mxl_hostapd_ctrl_iface_acl_del_mac(
+						    &bss->conf->accept_mac,
+						    &bss->conf->num_accept_mac, mac))
+						mxl_hostapd_disassoc_accept_mac(hapd);
+					else
+						*reply_len = -1;
+				} else if (os_strncmp(buf_start, "DIS_MAC ", sizeof("DIS_MAC ") - 1) == 0) {
+					if (!mxl_hostapd_ctrl_iface_acl_del_mac(
+								&bss->conf->accept_mac,
+								&bss->conf->num_accept_mac, mac))
+						mxl_hostapd_disassoc_accept_mac(bss);
+					else
+						*reply_len = -1;
+				} else if (os_strncmp(buf_start, "DIS_ALL", sizeof("DIS_ALL") - 1) == 0) {
+					mxl_hostapd_ctrl_iface_acl_clear_list(
+							&bss->conf->accept_mac,
+							&bss->conf->num_accept_mac);
+					mxl_hostapd_disassoc_accept_mac(bss);
+				} else if (os_strncmp(buf_start, "SHOW", sizeof("SHOW") - 1) == 0) {
+					*reply_len = mxl_hostapd_ctrl_iface_acl_show_mac(
+							bss->conf->accept_mac,
+							bss->conf->num_accept_mac, reply, reply_size);
+				} else if (os_strncmp(buf_start, "CLEAR", sizeof("CLEAR") - 1) == 0) {
+					mxl_hostapd_ctrl_iface_acl_clear_list(
+							&bss->conf->accept_mac,
+							&bss->conf->num_accept_mac);
+					mxl_hostapd_disassoc_accept_mac(hapd);
+				}
+			} else {
+				*reply_len = -1;
+			}
+		}
+	} else if (os_strncmp(buf, "DENY_ACL ", sizeof("DENY_ACL ") -1) == 0) {
+		char *buf_start, *mac;
+		int len;
+		struct hostapd_data *bss = mxl_get_bss_index(buf + sizeof("DENY_ACL ") - 1, hapd->iface);
+		if(!bss)
+			*reply_len = -1;
+		else {
+			len = strnlen_s(bss->conf->iface, sizeof(bss->conf->iface) - 1);
+			if (!IS_VALID_RANGE(len, AP_MIN_VALID_CHAR, len - 1)) {
+				buf_start = buf + sizeof("DENY_ACL ") - 1 + len + sizeof(" ") - 1;
+				mac = buf_start + sizeof("ADD_MAC ") - 1;
+				if (os_strncmp(buf_start, "ADD_MAC ", sizeof("ADD_MAC ") - 1) == 0) {
+					if (!mxl_hostapd_ctrl_iface_acl_add_mac(
+							&bss->conf->deny_mac,
+							&bss->conf->num_deny_mac, mac))
+						mxl_hostapd_disassoc_deny_mac(bss);
+					else
+						*reply_len = -1;
+				} else if (os_strncmp(buf_start, "DEL_MAC ", sizeof("DEL_MAC ") - 1) == 0) {
+					if (mxl_hostapd_ctrl_iface_acl_del_mac(
+						   &bss->conf->deny_mac,
+						   &bss->conf->num_deny_mac, mac))
+						*reply_len = -1;
+				} else if (os_strncmp(buf_start, "SHOW", sizeof("SHOW") -1) == 0) {
+					*reply_len = mxl_hostapd_ctrl_iface_acl_show_mac(
+						bss->conf->deny_mac,
+						bss->conf->num_deny_mac, reply, reply_size);
+				} else if (os_strncmp(buf_start, "CLEAR", sizeof("CLEAR") -1) == 0) {
+					mxl_hostapd_ctrl_iface_acl_clear_list(
+						&bss->conf->deny_mac,
+						&bss->conf->num_deny_mac);
+				}
+			} else {
+				*reply_len = -1;
+			}
+		}
 	} else {
 		return 0;
 	}
 	return 1;
 }
+int mxl_hostapd_ctrl_iface_acl_add_mac(struct mac_acl_entry **acl, int *num, const char *cmd)
+{ return hostapd_ctrl_iface_acl_add_mac (acl, num, cmd); }
+int mxl_hostapd_ctrl_iface_acl_del_mac(struct mac_acl_entry **acl, int *num, const char *txtaddr)
+{ return hostapd_ctrl_iface_acl_del_mac(acl, num, txtaddr); }
+void mxl_hostapd_ctrl_iface_acl_clear_list(struct mac_acl_entry **acl, int *num)
+{ hostapd_ctrl_iface_acl_clear_list(acl, num); }
+void mxl_hostapd_disassoc_accept_mac(struct hostapd_data *hapd)
+{ hostapd_disassoc_accept_mac(hapd); }
+int mxl_hostapd_ctrl_iface_acl_show_mac(struct mac_acl_entry *acl, int num, char *buf, size_t buflen)
+{ return hostapd_ctrl_iface_acl_show_mac(acl, num, buf, buflen); }
+void mxl_hostapd_disassoc_deny_mac(struct hostapd_data *hapd)
+{ hostapd_disassoc_deny_mac(hapd); }
diff --git a/hostapd/mxl_ctrl_iface.h b/hostapd/mxl_ctrl_iface.h
index c659a9d8f..03b537e5c 100644
--- a/hostapd/mxl_ctrl_iface.h
+++ b/hostapd/mxl_ctrl_iface.h
@@ -13,6 +13,13 @@
 #ifndef MXL_CTRL_IFACE_H
 #define MXL_CTRL_IFACE_H
 
+int mxl_hostapd_ctrl_iface_acl_add_mac(struct mac_acl_entry **acl, int *num, const char *cmd);
+int mxl_hostapd_ctrl_iface_acl_del_mac(struct mac_acl_entry **acl, int *num, const char *txtaddr);
+void mxl_hostapd_ctrl_iface_acl_clear_list(struct mac_acl_entry **acl, int *num);
+void mxl_hostapd_disassoc_accept_mac(struct hostapd_data *hapd);
+int mxl_hostapd_ctrl_iface_acl_show_mac(struct mac_acl_entry *acl, int num, char *buf, size_t buflen);
+void mxl_hostapd_disassoc_deny_mac(struct hostapd_data *hapd);
+struct hostapd_data *mxl_get_bss_index(const char *cmd, struct hostapd_iface *iface);
 int mxl_hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 					      char *buf, char *reply,
 					      int reply_size,
diff --git a/hostapd/mxl_hostapd_cli.c b/hostapd/mxl_hostapd_cli.c
index 5b0da1982..fb874bc61 100644
--- a/hostapd/mxl_hostapd_cli.c
+++ b/hostapd/mxl_hostapd_cli.c
@@ -15,6 +15,18 @@
 #include "common/wpa_ctrl.h"
 #include "mxl_hostapd_cli.h"
 
+int mxl_hostapd_cli_cmd_accept_macacl(struct wpa_ctrl *ctrl, int argc,
+					 char *argv[])
+{
+	return mxl_hostapd_cli_cmd(ctrl, "ACCEPT_ACL", 2, argc, argv);
+}
+
+int mxl_hostapd_cli_cmd_deny_macacl(struct wpa_ctrl *ctrl, int argc,
+				       char *argv[])
+{
+	return mxl_hostapd_cli_cmd(ctrl, "DENY_ACL", 2, argc, argv);
+}
+
 int mxl_hostapd_cli_cmd_get_hw_features(struct wpa_ctrl *ctrl, int argc, char *argv[])
 {
 	char cmd[256];
diff --git a/hostapd/mxl_hostapd_cli.h b/hostapd/mxl_hostapd_cli.h
index 0ee125f71..2425892eb 100644
--- a/hostapd/mxl_hostapd_cli.h
+++ b/hostapd/mxl_hostapd_cli.h
@@ -14,7 +14,9 @@
 #ifndef MXL_HOSTAPD_CLI_H
 #define MXL_HOSTAPD_CLI_H
 
-
+int mxl_hostapd_cli_cmd(struct wpa_ctrl *ctrl, const char *cmd, int min_args, int argc, char *argv[]);
+int mxl_hostapd_cli_cmd_accept_macacl(struct wpa_ctrl *ctrl, int argc, char *argv[]);
+int mxl_hostapd_cli_cmd_deny_macacl(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_wpa_ctrl_command(struct wpa_ctrl *ctrl, const char *cmd);
 
 #define MXL_HOSTAPD_ADD_VENDOR_CLI \
@@ -32,6 +34,10 @@ int mxl_wpa_ctrl_command(struct wpa_ctrl *ctrl, const char *cmd);
 	  " = Enable/Disable ZWDFS antenna"},						\
 	{ "get_zwdfs_antenna", mxl_hostapd_cli_cmd_get_zwdfs_antenna, NULL,		\
 	  " = get ZWDFS antenna Enabled/Disabled"},					\
+	{ "accept_acl", mxl_hostapd_cli_cmd_accept_macacl, NULL,\
+	  "<BSS_name> <ADD_MAC/DEL_MAC/DIS_MAC/DIS_ALL/SHOW/CLEAR> = accept MAC ACL" }, \
+	{ "deny_acl", mxl_hostapd_cli_cmd_deny_macacl, NULL, \
+	  "<BSS_name> <ADD_MAC/DEL_MAC/SHOW/CLEAR> = deny MAC ACL" },
 
 int mxl_hostapd_cli_cmd_get_hw_features(struct wpa_ctrl *ctrl, int argc, char *argv[]);
 int mxl_hostapd_cli_cmd_set_failsafe_chan(struct wpa_ctrl *ctrl, int argc, char *argv[]);
diff --git a/src/utils/mxl_common.h b/src/utils/mxl_common.h
index ae3ccb8bd..c93fe9c53 100644
--- a/src/utils/mxl_common.h
+++ b/src/utils/mxl_common.h
@@ -17,7 +17,10 @@
 /* Validation macros */
 #define IS_VALID_RANGE(val, min, max) ((val >= min) && (val <= max))
 #define IS_VALID_BOOL_RANGE(val) IS_VALID_RANGE(val, false, true)
-
+#define AP_MIN_VALID_CHAR 1
+#if !defined RSIZE_MAX_STR
+#define RSIZE_MAX_STR 4096
+#endif
 #ifndef EOK
 #define EOK 0
 #endif
-- 
2.43.0

