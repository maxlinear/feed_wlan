From 1cc87372bcfb21e5e816e9fe8040d8d88ccebd52 Mon Sep 17 00:00:00 2001
From: Vasudevan Raman <vraman@maxlinear.com>
Date: Fri, 26 Jul 2024 20:11:48 +0800
Subject: [PATCH] WLANRTSYS-63859 Enable ZWDFS to run CAC for AutoCoC BW SWITCH
 UP

Added code changes in Autococ BW_SWITCH_ENABLED flow, to use ZWDFS to run CAC in Autococ before BW_SWITCH_UP.
background_cac disabled case, behaves similar to BW_SWITCH disabled case.
While ZWDFS antenna support is enabled, Autococ uses ZWDFS antenna to run CAC and switch up to higher BW.
Autococ ZWDFS cac should be aborted on user set channel via hostapd_cli.

Porting hostap changes to hostap-ng.

FIXUP to WLANRTSYS-64810 ZWDFS changes for wave700 in hostap-ng
---
 hostapd/ctrl_iface.c    |   9 +++
 src/ap/beacon.c         |   8 ++-
 src/ap/hostapd.c        |  12 +++-
 src/ap/mxl_dfs_common.c |  10 +++
 src/ap/mxl_dfs_common.h |   1 -
 src/ap/mxl_hostapd.c    | 144 ++++++++++++++++++++++++++++++++++++----
 src/ap/mxl_hostapd.h    |   4 ++
 src/ap/mxl_zwdfs.c      |  55 +++++++++++++++
 src/ap/mxl_zwdfs.h      |   1 +
 9 files changed, 225 insertions(+), 19 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 73493edc4..35de9f3aa 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -3140,6 +3140,15 @@ static int hostapd_ctrl_iface_chan_switch(struct hostapd_iface *iface,
 		}
 	}
 
+#ifdef CONFIG_VENDOR_MXL
+	/* Stop zwdfs BW_MOVE_UP cac when user set_channel is successful */
+	if (ret == 0) {
+		if (iface->radar_background.cac_started)
+			mxl_hostapd_set_zwdfs_antenna(iface->bss[0], 0);
+	}
+
+#endif /* CONFIG_VENDOR_MXL */
+
 	return 0;
 #else /* NEED_AP_MLME */
 	return -1;
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index 72ac410fb..c028a1d41 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -2958,8 +2958,10 @@ static int __ieee802_11_set_beacon(struct hostapd_data *hapd)
 						 true, &params.allowed_freqs);
 	}
 
-	if (iface->require_csa != 0) {
-		iface->require_csa = 0;
+#ifdef CONFIG_VENDOR_MXL
+	if (hapd->mxl_data.require_csa != 0) {
+		hapd->mxl_data.require_csa = 0;
+#endif /* CONFIG_VENDOR_MXL */
 		os_memset(&csa_settings, 0, sizeof(csa_settings));
 		csa_settings.cs_count = DEFAULT_CS_COUNT;
 		csa_settings.block_tx = 0;
@@ -2969,7 +2971,9 @@ static int __ieee802_11_set_beacon(struct hostapd_data *hapd)
 			wpa_printf(MSG_ERROR, "Unable to switch channel ret = %d \n", res);
 			goto fail;
 		}
+#ifdef CONFIG_VENDOR_MXL
 	}
+#endif /* CONFIG_VENDOR_MXL */
 
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
 	if (hapd->conf->mxl_bss_conf.mlo_enable) {
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index ad5096a22..a8fe26483 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -4622,6 +4622,14 @@ int hostapd_disable_iface(struct hostapd_iface *hapd_iface)
 	}
 #endif /* NEED_AP_MLME */
 
+#ifdef CONFIG_VENDOR_MXL
+	/* If iface is disabled, reset coc_chan_restore config. If ZWDFS already running then stop it. */
+	os_memset(&hapd_iface->coc_chan_restore, 0, sizeof(hapd_iface->coc_chan_restore));
+	if (hapd_iface->radar_background.cac_started) {
+		mxl_hostapd_set_zwdfs_antenna(hapd_iface->bss[0], 0);
+	}
+#endif /* CONFIG_VENDOR_MXL */
+
 	/* same as hostapd_interface_deinit without deinitializing ctrl-iface */
 	for (j = 0; j < hapd_iface->num_bss; j++) {
 		struct hostapd_data *hapd = hapd_iface->bss[j];
@@ -5642,11 +5650,11 @@ int hostapd_switch_channel(struct hostapd_data *hapd,
 		return 0;
 	}
 
-#if defined(CONFIG_VENDOR_MXL) && defined(CONFIG_IEEE80211BE)
+#if defined(CONFIG_VENDOR_MXL)
 	if (hapd->iface->bss[0] == hapd)
 		if (mxl_switch_channel(hapd, settings))
 			return -1;
-#endif /* CONFIG_VENDOR_MXL && CONFIG_IEEE80211BE */
+#endif /* CONFIG_VENDOR_MXL */
 
 	/* TODO - Update secondary channel offset properly
 	 * for all other cases such as APUT tests
diff --git a/src/ap/mxl_dfs_common.c b/src/ap/mxl_dfs_common.c
index 726f2aa9a..aafbc7c70 100644
--- a/src/ap/mxl_dfs_common.c
+++ b/src/ap/mxl_dfs_common.c
@@ -234,6 +234,16 @@ bool mxl_hostapd_handle_radar(struct hostapd_iface *iface, int cf1, int bw)
 	if (mxl_dfs_is_failsafe_enabled(iface))
 		return false;
 
+	/* Restore COC params if there is a backup */
+	if (iface->coc_chan_restore.primary)
+		mxl_hostapd_coc_restore_chan_params(iface);
+
+	/* If ZWDFS CAC is running already for BW_SWITCH_UP and the radar has been detected in current operating 20MHz channel,
+	 * then we are going to vacate that channel anyway. So stop the ongoing ZWDFS CAC */
+	if (iface->radar_background.cac_started && iface->mxl_iface.autococ_background_cac_running) {
+		mxl_hostapd_set_zwdfs_antenna(iface->bss[0], 0);
+	}
+
 	return false;
 }
 
diff --git a/src/ap/mxl_dfs_common.h b/src/ap/mxl_dfs_common.h
index 51ccaa58a..e91db9541 100644
--- a/src/ap/mxl_dfs_common.h
+++ b/src/ap/mxl_dfs_common.h
@@ -64,7 +64,6 @@ int mxl_hapd_get_chan_idx(struct hostapd_hw_modes *mode, int freq);
 bool mxl_dfs_use_radar_background(struct hostapd_iface *iface);
 bool mxl_hostapd_handle_background_radar(struct hostapd_iface *iface, int freq, int cf1, int chan_width);
 bool mxl_hostapd_radar_chandef_matches_operational(struct hostapd_iface *iface, int cf1, int chan_width);
-bool mxl_dfs_use_radar_background(struct hostapd_iface *iface);
 bool mxl_hostapd_dfs_is_background_event(struct hostapd_iface *iface, int freq, int cf1);
 bool mxl_hostapd_radar_chandef_matches_operational(struct hostapd_iface *iface, int cf1, int chan_width);
 bool mxl_hostapd_radar_chandef_matches_subband(struct hostapd_iface *iface, int cf1, int chan_width);
diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index 762783c67..2f4d47f14 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -31,6 +31,8 @@
 #include "mxl_wpa_auth.h"
 #include "mxl_sta_info.h"
 #include "common/mxl_ieee802_11_common.h"
+#include "mxl_dfs_common.h"
+#include "dfs.h"
 
 #define COC_POWER_1x1_STATE 1
 #define COC_POWER_2x2_STATE 2
@@ -2190,6 +2192,50 @@ void mxl_ap_max_nss_omn_elem_timeout(void *eloop_data, void *user_data)
 	ieee802_11_update_beacons(iface);
 }
 
+/* Restore COC channel params */
+void mxl_hostapd_coc_restore_chan_params(struct hostapd_iface *iface)
+{
+	wpa_printf(MSG_DEBUG, "%s: Restoring CoC channel params: Chan=%d Sec=%d width=%d seg0_idx=%d seg1_idx=%d\n", __func__,
+		iface->coc_chan_restore.primary, iface->coc_chan_restore.secondary,
+		iface->coc_chan_restore.width, iface->coc_chan_restore.seg0_idx, iface->coc_chan_restore.seg1_idx);
+
+	iface->conf->channel = iface->coc_chan_restore.primary;
+	iface->conf->secondary_channel = iface->coc_chan_restore.secondary;
+	hostapd_set_oper_chwidth(iface->conf, iface->coc_chan_restore.width);
+	hostapd_set_oper_centr_freq_seg0_idx(iface->conf, iface->coc_chan_restore.seg0_idx);
+	hostapd_set_oper_centr_freq_seg1_idx(iface->conf, iface->coc_chan_restore.seg1_idx);
+
+}
+
+void mxl_hostapd_restart_coc(struct hostapd_iface *iface)
+{
+	struct wpabuf *buf;
+	int *resp;
+	int is_auto;
+
+	buf = wpabuf_alloc(100);
+	if (!buf)
+		return;
+
+	resp = (int *)buf->buf;
+	if (hostapd_drv_vendor_cmd(iface->bss[0], OUI_LTQ, LTQ_NL80211_VENDOR_SUBCMD_GET_COC_POWER_MODE,
+					NULL, sizeof(struct wpabuf), NESTED_ATTR_NOT_USED, buf)) {
+		wpa_printf(MSG_WARNING, "Unable to fetch COC power mode params");
+		return;
+	}
+
+	is_auto = resp[0];
+	if(!is_auto)
+		return;
+
+	/* If it is in auto mode then restart CoC traffic analyzer */
+	if (hostapd_drv_vendor_cmd(iface->bss[0], OUI_LTQ, LTQ_NL80211_VENDOR_SUBCMD_SET_COC_POWER_MODE,
+					(u8 *)resp, 1 * sizeof(int), NESTED_ATTR_NOT_USED, NULL)) {
+		wpa_printf(MSG_WARNING, "set sCoCPower failed");
+		return;
+	}
+}
+ 
 void mxl_hostapd_update_coc(struct hostapd_iface *iface, const u8 *data, size_t data_len)
 {
 	struct intel_vendor_event_coc *bw_params = (struct intel_vendor_event_coc *)data;
@@ -2210,7 +2256,36 @@ void mxl_hostapd_update_coc(struct hostapd_iface *iface, const u8 *data, size_t
 	 * no need to send the OMN IE Station will understand the antenna switch without OMN IE's also.
 	 * */
 
+	int i, ret = 1;
+	struct csa_settings old_settings;
+	struct hostapd_hw_modes *cmode = iface->current_mode;
+	iface->mxl_iface.coc_BW = bw_params->coc_BW;
+
+	if (iface->cac_started)
+		return;
+		
 	if (bw_params->coc_BW == BW_MOVE_DOWN) {
+		if (WAVE_FREQ_IS_5G(iface->freq) && (iface->dfs_domain == HOSTAPD_DFS_REGION_FCC))
+		{
+			/* If zwdfs autococ cac is already running due to SWITCH_UP, abort zwdfs cac during BW_SWITCH_DOWN. */
+			if (iface->radar_background.cac_started && iface->mxl_iface.autococ_background_cac_running) {
+				mxl_hostapd_set_zwdfs_antenna(iface->bss[0], 0);
+			}
+
+			if (!mxl_dfs_use_radar_background(iface) && hostapd_is_dfs_required(iface)) {
+				/* If background_cac config is not enabled, do not switch BW. */
+				/* Restart CoC Traffic Analyzer, since there is no channel switch now. ZWDFS is not available */
+				mxl_hostapd_restart_coc(iface);
+				goto end;
+			}
+
+			/* If current channel is 20MHz then there is no way to switch down. */
+			if (mxl_hostapd_get_num_width(hostapd_get_oper_chwidth(iface->conf), iface->conf->secondary_channel) == 20) {
+				mxl_hostapd_restart_coc(iface);
+				goto end;
+			}
+		}
+
 		/*
 		 * Store the current channel and switch to 20Mhz channel
 		 * make sure RNR ie and opclass also updated properly
@@ -2226,7 +2301,9 @@ void mxl_hostapd_update_coc(struct hostapd_iface *iface, const u8 *data, size_t
 				hostapd_get_oper_centr_freq_seg0_idx(iface->conf), hostapd_get_oper_centr_freq_seg1_idx(iface->conf), bw_params->coc_omn_IE);
 
 		/* ping issue with 2.4G when  CSA in place if ping doesnot work after switch then remove this flag later */
-		iface->require_csa = 1;
+		/* set require_csa for all interfaces in the radio*/
+		for (i = 0; i < iface->num_bss; i++)
+			iface->bss[i]->mxl_data.require_csa = 1;
 		iface->conf->secondary_channel = 0;
 		hostapd_set_oper_chwidth(iface->conf, CONF_OPER_CHWIDTH_USE_HT);
 		hostapd_set_oper_centr_freq_seg0_idx(iface->conf, iface->conf->channel);
@@ -2242,35 +2319,66 @@ void mxl_hostapd_update_coc(struct hostapd_iface *iface, const u8 *data, size_t
 		 * make sure RNR ie and opclass are also updated properly
 		 * to reflect the new BW
 		 * */
-		u8 seg0 = iface->coc_chan_restore.seg0_idx;
-		u8 seg1 = iface->coc_chan_restore.seg1_idx;
-		iface->conf->channel = iface->coc_chan_restore.primary;
-		iface->conf->secondary_channel = iface->coc_chan_restore.secondary;
-		hostapd_set_oper_chwidth(iface->conf, iface->coc_chan_restore.width);
-		hostapd_set_oper_centr_freq_seg0_idx(iface->conf, seg0);
-		hostapd_set_oper_centr_freq_seg1_idx(iface->conf, seg1);
-		iface->require_csa = 1;
-		os_memset(&iface->coc_chan_restore, 0, sizeof(iface->coc_chan_restore));
+		if (WAVE_FREQ_IS_5G(iface->freq) && (iface->dfs_domain == HOSTAPD_DFS_REGION_FCC)
+			&& mxl_dfs_use_radar_background(iface)) {
+			/* If background cac is already running, then do nothing and just update the IEs*/
+			if (iface->radar_background.cac_started && iface->mxl_iface.autococ_background_cac_running)
+				goto end;
+
+			os_memset(&old_settings, 0, sizeof(old_settings));
+			hostapd_set_freq_params(&old_settings.freq_params, iface->conf->hw_mode, iface->freq,
+							iface->conf->channel, iface->conf->enable_edmg,
+							iface->conf->edmg_channel, iface->conf->ieee80211n,
+							iface->conf->ieee80211ac, iface->conf->ieee80211ax, iface->conf->ieee80211be,
+							iface->conf->secondary_channel,
+							hostapd_get_oper_chwidth(iface->conf),
+							hostapd_get_oper_centr_freq_seg0_idx(iface->conf),
+							hostapd_get_oper_centr_freq_seg1_idx(iface->conf),
+							cmode ? cmode->vht_capab : 0,
+							cmode ? &cmode->he_capab[IEEE80211_MODE_AP] : NULL,
+							cmode ? &cmode->eht_capab[IEEE80211_MODE_AP] : NULL);
+
+			mxl_hostapd_coc_restore_chan_params(iface);
+			ret = mxl_hostapd_zwdfs_cac_on_autoCoC(iface);
+			if (ret <= 0) {
+				mxl_hostapd_set_conf_from_freq_params(iface, &old_settings.freq_params);
+				/* Restart CoC Traffic Analyzer, since there is no channel switch now. Continue with current channel.*/
+				mxl_hostapd_restart_coc(iface);
+				goto end;
+			}
+		}
+		else {
+			mxl_hostapd_coc_restore_chan_params(iface);
+			wpa_printf(MSG_ERROR, "COC SWITCH UP CAC not started");
+		}
 
-		/* RNR will be automatically updated via ieee802_11_update_beacons() below */
-		if (is_6ghz_op_class(iface->conf->op_class))
-			iface->conf->op_class = HOSTAP_6GHZ_20MHZ_OP_CLASS + center_idx_to_bw_6ghz(seg0);
+		if (ret) { 
+		/* set require_csa for all VAPs in the radio*/
+			for (i = 0; i < iface->num_bss; i++)
+				iface->bss[i]->mxl_data.require_csa = 1;
+		}
 
 		wpa_printf(MSG_DEBUG," COC : Restore channel coc_prim = %d, coc_sec = %d, coc_width = %d, seg0_idx = %d, seg1-idx = %d, bw_params->coc_omn_IE = %d \n",
 				iface->conf->channel, iface->conf->secondary_channel, hostapd_get_oper_chwidth(iface->conf),
-				seg0, seg1, bw_params->coc_omn_IE);
+				hostapd_get_oper_centr_freq_seg0_idx(iface->conf), hostapd_get_oper_centr_freq_seg1_idx(iface->conf), bw_params->coc_omn_IE);
+
+		/* RNR will be automatically updated via ieee802_11_update_beacons() below */
+		if (is_6ghz_op_class(iface->conf->op_class))
+			iface->conf->op_class = HOSTAP_6GHZ_20MHZ_OP_CLASS + center_idx_to_bw_6ghz(iface->coc_chan_restore.seg0_idx);
 	}
 
 	wpa_printf(MSG_DEBUG," COC : BW = %d, prim = %d, sec_chan = %d, width = %d op_class = %d  \n",
 			bw_params->coc_BW, iface->conf->channel, iface->conf->secondary_channel,
 			hostapd_get_oper_chwidth(iface->conf), iface->conf->op_class);
 
+end:
 	/*Should we send OMN IE continuesly or for certain period need to check */
 	iface->mxl_iface.require_omn = bw_params->coc_omn_IE;
 	eloop_cancel_timeout(mxl_ap_max_nss_omn_elem_timeout, iface, NULL);
 
 	ieee802_11_update_beacons(iface);
 
+	iface->mxl_iface.coc_BW = 0;
 	if (bw_params->coc_is_max_nss)
 		eloop_register_timeout(2, 0, mxl_ap_max_nss_omn_elem_timeout, iface, NULL);
 }
@@ -2683,6 +2791,13 @@ int mxl_switch_channel(struct hostapd_data *hapd, struct csa_settings *settings)
 	struct hostapd_iface *iface = hapd->iface;
 	struct hostapd_data *hapd_csa;
 
+	/* memset autococ chan_restore to zero, whenever new channel switch happens except during
+	 * BW_SWITCH_DOWN,since during BW_SWITCH_DOWN coc_chan_restore contains original chan def. */
+	if (iface->mxl_iface.coc_BW != BW_MOVE_DOWN && (iface->coc_chan_restore.primary)) {
+		os_memset(&iface->coc_chan_restore, 0, sizeof(iface->coc_chan_restore));
+	}
+
+#if defined(CONFIG_IEEE80211BE)
 	if (hapd->iconf->testbed_mode)
 		settings->block_tx = 1;
 
@@ -2746,6 +2861,7 @@ int mxl_switch_channel(struct hostapd_data *hapd, struct csa_settings *settings)
 			mxl_hostapd_set_eht_punct_bitmap(hapd_csa, settings->punct_bitmap);
 		}
 	}
+#endif /* defined(CONFIG_IEEE80211BE) */
 	return 0;
 }
 
diff --git a/src/ap/mxl_hostapd.h b/src/ap/mxl_hostapd.h
index 90321ef70..e78312229 100644
--- a/src/ap/mxl_hostapd.h
+++ b/src/ap/mxl_hostapd.h
@@ -92,6 +92,8 @@ struct mxl_hostapd_iface {
 	bool cw_reduced;
 	int current_secondary_channel;
 	u8 current_oper_chwidth;
+	u8 coc_BW;
+	u8 autococ_background_cac_running;
 };
 
 #define MAX_EVENT_MSG_LEN			512
@@ -139,6 +141,7 @@ struct mxl_hostapd_data {
 	bool ml_ie_max_chan_sw_time_ie_len_add;
 	bool bw_indication_ie_len_add;
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
+	u8 require_csa;		/* Variable to keep track whether csa IE should be added or not */
 };
 
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
@@ -202,6 +205,7 @@ struct hostapd_channel_data * mxl_hostapd_get_mode_channel(struct hostapd_iface
 struct hostapd_data * mxl_get_hapd_bssid(struct hostapd_iface *iface, const u8 *bssid);
 void mxl_hostapd_cleanup_iface(struct hostapd_iface *iface);
 void mxl_hostapd_update_coc(struct hostapd_iface *iface, const u8 *data, size_t data_len);
+void mxl_hostapd_coc_restore_chan_params(struct hostapd_iface *iface);
 u8 * mxl_hostapd_eid_opmodenotif(struct hostapd_data *hapd, u8 *eid);
 void mxl_hostapd_interface_deinit(struct hostapd_iface *iface);
 void mxl_hostapd_alloc_bss_data(struct hostapd_data *hapd);
diff --git a/src/ap/mxl_zwdfs.c b/src/ap/mxl_zwdfs.c
index c08d68628..082b31161 100644
--- a/src/ap/mxl_zwdfs.c
+++ b/src/ap/mxl_zwdfs.c
@@ -271,6 +271,7 @@ int mxl_hostapd_set_zwdfs_antenna(struct hostapd_data *hapd, int enable)
 		iface->radar_background.cac_started = 0;
 		iface->radar_background.freq = 0;
 		iface->mxl_iface.zwdfs_info.csa_iface = NULL;
+		iface->mxl_iface.autococ_background_cac_running = 0;
 
 		if (iface->mxl_iface.zwdfs_info.csa_settings) {
 			os_free(iface->mxl_iface.zwdfs_info.csa_settings);
@@ -355,6 +356,60 @@ int mxl_hostapd_drv_get_zwdfs_antenna(struct hostapd_data *hapd, int *enabled)
 	return ret;
 }
 
+int mxl_hostapd_zwdfs_cac_on_autoCoC(struct hostapd_iface *iface)
+{
+	struct csa_settings settings = {0};
+	int n_chans, n_chans1, start_chan_idx, start_chan_idx1;
+	int err = -1;
+	struct hostapd_hw_modes *cmode = iface->current_mode;
+
+	/* Get start (first) channel for current configuration */
+	start_chan_idx = mxl_dfs_get_start_chan_idx(iface, &start_chan_idx1);
+	if (start_chan_idx == -1)
+		return -1;
+
+	/* Get number of used channels, depend on width */
+	n_chans = mxl_dfs_get_used_n_chans(iface, &n_chans1);
+
+	/* Check if all channels are DFS available */
+	err = mxl_dfs_check_chans_available(iface, start_chan_idx, n_chans);
+	if (err) {
+		wpa_printf(MSG_ERROR, "%s: All channels are available. No need to run CAC in ZWDFS\n", __func__);
+		return 1;
+	}
+	if (iface->radar_background.cac_started) {
+		return -1;
+	}
+
+	settings.cs_count = DEFAULT_CS_COUNT;
+	hostapd_set_freq_params(&settings.freq_params, iface->conf->hw_mode, iface->freq,
+			iface->conf->channel, iface->conf->enable_edmg,
+			iface->conf->edmg_channel, iface->conf->ieee80211n,
+			iface->conf->ieee80211ac, iface->conf->ieee80211ax, iface->conf->ieee80211be,
+			iface->conf->secondary_channel,
+			hostapd_get_oper_chwidth(iface->conf),
+			hostapd_get_oper_centr_freq_seg0_idx(iface->conf),
+			hostapd_get_oper_centr_freq_seg1_idx(iface->conf),
+			cmode ? cmode->vht_capab : 0,
+			cmode ? &cmode->he_capab[IEEE80211_MODE_AP] : NULL,
+			cmode ? &cmode->eht_capab[IEEE80211_MODE_AP] : NULL);
+
+	/* Check if any of the ZWDFS configured channels is unavailable */
+	err = mxl_zwdfs_check_chans_unavailable(iface, &settings.freq_params);
+	if (err) {
+		wpa_printf(MSG_ERROR, "%s: ZWDFS %d chans unavailable - Cannot start background CAC\n", __func__, err);
+		return -1;
+	}
+
+	/* Start ZWDFS CAC in background */
+	if (mxl_hostapd_start_background_cac(iface, &settings)) {
+		wpa_printf(MSG_ERROR, "%s: Failed to start Background CAC in ZWDFS antenna\n", __func__);
+		return -1;
+	}
+	iface->mxl_iface.autococ_background_cac_running = 1;
+	return 0;
+}
+
 int mxl_zwdfs_check_chans_unavailable(struct hostapd_iface *iface, struct hostapd_freq_params *freq)
 {
 	struct hostapd_hw_modes *mode;
diff --git a/src/ap/mxl_zwdfs.h b/src/ap/mxl_zwdfs.h
index 5ab1f71f3..353480e65 100644
--- a/src/ap/mxl_zwdfs.h
+++ b/src/ap/mxl_zwdfs.h
@@ -30,4 +30,5 @@ int mxl_zwdfs_check_chans_unavailable(struct hostapd_iface *iface, struct hostap
 int mxl_hostapd_zwdfs_restart_cac(struct hostapd_iface *iface, u8 chan, enum chan_width chanwidth);
 void mxl_hostapd_zwdfs_cac_on_radar(struct hostapd_iface *iface, struct csa_settings *settings);
 int mxl_hostapd_handle_zwdfs_switch(struct hostapd_iface *iface, int success, int freq, int chan_width, int cf1, int cf2);
+int mxl_hostapd_zwdfs_cac_on_autoCoC(struct hostapd_iface *iface);
 #endif /* MXL_ZWDFS_H */
-- 
2.43.0

