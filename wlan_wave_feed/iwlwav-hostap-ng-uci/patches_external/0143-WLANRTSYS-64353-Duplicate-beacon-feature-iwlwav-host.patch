From f073de065b0897af7f454d703617f57443a355ba Mon Sep 17 00:00:00 2001
From: rportnikh <rportnikh@maxlinear.com>
Date: Tue, 16 Apr 2024 18:35:17 +0300
Subject: [PATCH] WLANRTSYS-64353 Duplicate beacon feature iwlwav-hostapd-ng

---
 hostapd/mxl_config.c          | 23 +++++++++++++++++++++++
 src/ap/ieee802_11_he.c        |  6 ++++++
 src/ap/mxl_config.h           | 14 ++++++++++++++
 src/ap/mxl_hostapd.c          |  9 +++++++++
 src/common/vendor_cmds_copy.h |  4 ++++
 5 files changed, 56 insertions(+)

diff --git a/hostapd/mxl_config.c b/hostapd/mxl_config.c
index 1d6510edb..d5a2a2f73 100644
--- a/hostapd/mxl_config.c
+++ b/hostapd/mxl_config.c
@@ -1886,6 +1886,21 @@ int mxl_hostapd_config_fill (struct hostapd_config *conf,
 				return 0;
 			}
 		}
+	} else if (os_strcmp(buf, "duplicate_beacon_enabled") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_BOOL_RANGE(val)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid duplicate_beacon_enabled value %d", line, val);
+			return 0;
+		}
+		mxl_conf->dup_beacon.enabled = val;
+	} else if (os_strcmp(buf, "duplicate_beacon_bw") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_RANGE(val, DUPLICATE_BEACON_BW_20MHZ, DUPLICATE_BEACON_BW_320MHZ)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid duplicate_beacon_bw %d, must be between %d..%d",
+					line, val, DUPLICATE_BEACON_BW_20MHZ, DUPLICATE_BEACON_BW_320MHZ);
+			return 0;
+		}
+		mxl_conf->dup_beacon.bw = val;
 	} else if (os_strcmp(buf, "nlmsg_default_size") == 0) {
 		size_t val = (size_t)atoi(pos);
 		if (val > mxl_conf->nlmsg_default_size)
@@ -1972,6 +1987,7 @@ void mxl_hostapd_config_defaults(struct hostapd_config *conf)
 	mxl_conf->ap_retry_limit = AP_RETRY_INVALID;
 	mxl_conf->ap_retry_limit_data = AP_RETRY_INVALID;
 	mxl_conf->ap_retry_limit_probe_resp = AP_RETRY_INVALID;
+	mxl_conf->dup_beacon.bw = DUPLICATE_BEACON_BW_80MHZ;
 	mxl_conf->sCcaTh[0] = -62;
 	mxl_conf->sCcaTh[1] = -62;
 	mxl_conf->sCcaTh[2] = -72;
@@ -2020,6 +2036,13 @@ void mxl_hostapd_config_free(struct hostapd_config *conf)
 int mxl_hostapd_config_check(struct hostapd_config *conf, int full_config)
 {
 
+	if (full_config && conf->mxl_conf.dup_beacon.enabled &&
+		conf->he_beacon && is_6ghz_op_class(conf->op_class)) {
+		wpa_printf(MSG_ERROR,
+				"Cannot enable both Duplicate Beacon and HE beacon at the same time");
+		return -1;
+	}
+
 #ifdef CONFIG_IEEE80211BE_MXL_MLO
 	if (!conf->ieee80211be) {
 		int i;
diff --git a/src/ap/ieee802_11_he.c b/src/ap/ieee802_11_he.c
index 7638d7a2a..bcd547020 100644
--- a/src/ap/ieee802_11_he.c
+++ b/src/ap/ieee802_11_he.c
@@ -283,6 +283,12 @@ u8 * hostapd_eid_he_operation(struct hostapd_data *hapd, u8 *eid)
 			control = 3;
 		else
 			control = center_idx_to_bw_6ghz(seg0);
+
+#ifdef CONFIG_VENDOR_MXL
+		if (hapd->iconf->mxl_conf.dup_beacon.enabled)
+			control |= HE_6GHZ_OPER_INFO_CTRL_DUP_BEACON;
+#endif /* CONFIG_VENDOR_MXL */
+
 		if (hapd->iconf->he_6ghz_reg_pwr_type == 1)
 			control |= HE_6GHZ_STANDARD_POWER_AP <<
 				HE_6GHZ_OPER_INFO_CTRL_REG_INFO_SHIFT;
diff --git a/src/ap/mxl_config.h b/src/ap/mxl_config.h
index 016cc4306..d13972694 100644
--- a/src/ap/mxl_config.h
+++ b/src/ap/mxl_config.h
@@ -19,6 +19,11 @@
 
 #define CCA_TH_SIZE 5
 
+struct duplicate_beacon {
+	int enabled;
+	int bw;
+};
+
 struct he_override_hw_capab {
 	u8  he_mac_fragmentation;
 	u8  he_mac_plus_htc_he_support;
@@ -302,6 +307,7 @@ struct mxl_hostapd_config {
 	int obss_beacon_rssi_threshold;
 	int ignore_40_mhz_intolerant;
 	int sCcaTh[CCA_TH_SIZE];
+	struct duplicate_beacon dup_beacon;
 	u8 ap_retry_limit;
 	u8 ap_retry_limit_data;
 	u8 ap_retry_limit_probe_resp;
@@ -352,6 +358,14 @@ struct mxl_hostapd_config {
 	int zwdfs_debug_chan;
 };
 
+enum duplicate_beacon_bw {
+	DUPLICATE_BEACON_BW_20MHZ = 0,
+	DUPLICATE_BEACON_BW_40MHZ = 1,
+	DUPLICATE_BEACON_BW_80MHZ = 2,
+	DUPLICATE_BEACON_BW_160MHZ = 3,
+	DUPLICATE_BEACON_BW_320MHZ = 4,
+};
+
 /**
  * struct mxl_hostapd_bss_config - Per-BSS configuration
  */
diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index 850c790d1..4fbe1dca1 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -1664,6 +1664,7 @@ int mxl_hostapd_setup_interface(struct hostapd_data *hapd)
 int mxl_hostapd_setup_bss_pre(struct hostapd_data *hapd)
 {
 	struct mxl_hostapd_bss_config *mxl_bss_conf = &hapd->conf->mxl_bss_conf;
+	struct mxl_hostapd_config *mxl_conf = &hapd->iconf->mxl_conf;
 	struct intel_vendor_sb_timer_acl_cfg sb_timer_acl_cfg = { 0 };
 	(void)mxl_bss_conf;
 
@@ -1674,6 +1675,14 @@ int mxl_hostapd_setup_bss_pre(struct hostapd_data *hapd)
 	}
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
 
+	if (is_6ghz_op_class(hapd->iconf->op_class)) {
+		if (MXL_DRV_VENDOR_SET(LTQ_NL80211_VENDOR_SUBCMD_SET_DUPLICATE_BEACON,
+				&mxl_conf->dup_beacon, sizeof(mxl_conf->dup_beacon))) {
+			wpa_printf(MSG_WARNING, "set duplicate_beacon failed");
+			return -1;
+		}
+	}
+
 	if (mxl_hostapd_setup_interface(hapd))
 		return -1;
 
diff --git a/src/common/vendor_cmds_copy.h b/src/common/vendor_cmds_copy.h
index 0ff739f92..8a57a2d59 100644
--- a/src/common/vendor_cmds_copy.h
+++ b/src/common/vendor_cmds_copy.h
@@ -412,6 +412,10 @@ enum ltq_nl80211_vendor_subcmds {
   LTQ_NL80211_VENDOR_SUBCMD_REG_UPDATE_6GHZ_OPER_POWER_MODE,
   LTQ_NL80211_VENDOR_SUBCMD_UPDATE_AFC_INFO,
   LTQ_NL80211_VENDOR_SUBCMD_ML_STA_REASSOC_NOTIFY,
+  LTQ_NL80211_VENDOR_SUBCMD_GET_ML_PEER_FLOW_STATUS,
+  LTQ_NL80211_VENDOR_SUBCMD_GET_ML_STA_LIST,
+  LTQ_NL80211_VENDOR_SUBCMD_SET_RADAR_FIFO_DUMP,
+  LTQ_NL80211_VENDOR_SUBCMD_SET_DUPLICATE_BEACON,
   /* add new iw sub commands here */
 
   /* used to define LTQ_NL80211_VENDOR_SUBCMD_MAX below */
-- 
2.43.0

