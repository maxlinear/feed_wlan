From 8437780e1d7c80bc77b003f5678148a4d5259308 Mon Sep 17 00:00:00 2001
From: rportnikh <rportnikh@maxlinear.com>
Date: Wed, 14 Feb 2024 10:11:56 +0200
Subject: [PATCH] WLANRTSYS-62335 updk-support-sccath

---
 hostapd/mxl_config.c | 47 ++++++++++++++++++++++++++++++++++++++++++++
 src/ap/mxl_config.h  |  5 +++++
 src/ap/mxl_hostapd.c |  3 +++
 3 files changed, 55 insertions(+)

diff --git a/hostapd/mxl_config.c b/hostapd/mxl_config.c
index 06e30bc2e..04e4689e2 100644
--- a/hostapd/mxl_config.c
+++ b/hostapd/mxl_config.c
@@ -652,6 +652,33 @@ mxl_conf_fill_he_ppe_thresholds(struct mxl_hostapd_config *conf, const char *buf
 }
 #endif /* CONFIG_IEEE80211AX */
 
+static int mxl_hostapd_fill_intlist(int *int_list, char *val, int exp_count)
+{
+	int count;
+	char *pos, *end;
+	pos = val;
+	count = 0;
+	while (*pos != '\0') {
+		if (*pos == ' ')
+			count++;
+		pos++;
+	}
+	if (exp_count != (count + 1))
+		return -1;
+	pos = val;
+	count = 0;
+	while (*pos != '\0') {
+		end = os_strchr(pos, ' ');
+		if (end)
+			*end = '\0';
+		int_list[count++] = atoi(pos);
+		if (!end)
+			break;
+		pos = end + 1;
+	}
+	return 0;
+}
+
 static int mxl_hostapd_parse_colocated_6g_vap_info(struct hostapd_config *conf,
 		struct hostapd_bss_config *bss, char *val)
 {
@@ -1754,6 +1781,20 @@ int mxl_hostapd_config_fill (struct hostapd_config *conf,
 		}
 		conf->he_6ghz_reg_pwr_type = val;
 		wpa_printf(MSG_INFO, "Line %d: power_mode '%d'", line, conf->he_6ghz_reg_pwr_type);
+	} else if (os_strcmp(buf, "sCcaTh") == 0) {
+		if(mxl_hostapd_fill_intlist(mxl_conf->sCcaTh, pos, ARRAY_SIZE(mxl_conf->sCcaTh))) {
+			wpa_printf(MSG_ERROR, "Line %d: wrong number of sCcaTh parameters, expected %d",
+				   line, (int)ARRAY_SIZE(mxl_conf->sCcaTh));
+			return 0;
+		}
+		int i = 0;
+		for (i = 0; i < CCA_TH_SIZE; i++) { 
+			if (!IS_VALID_RANGE(mxl_conf->sCcaTh[i], CCA_THRESHOLD_MIN, CCA_THRESHOLD_MAX)) {
+				wpa_printf(MSG_ERROR, "Line %d: invalid CCA threshold %d, must be between %d..%d",
+				   line, mxl_conf->sCcaTh[i], CCA_THRESHOLD_MIN, CCA_THRESHOLD_MAX);
+				return 0;
+			}
+		}
 	} else
 		return 0;
 
@@ -1810,6 +1851,12 @@ void mxl_hostapd_config_defaults(struct hostapd_config *conf)
 	mxl_conf->ap_retry_limit = AP_RETRY_INVALID;
 	mxl_conf->ap_retry_limit_data = AP_RETRY_INVALID;
 	mxl_conf->ap_retry_limit_probe_resp = AP_RETRY_INVALID;
+	mxl_conf->sCcaTh[0] = -62;
+	mxl_conf->sCcaTh[1] = -62;
+	mxl_conf->sCcaTh[2] = -72;
+	mxl_conf->sCcaTh[3] = -72;
+	mxl_conf->sCcaTh[4] = -69;
+
 	/* Advertisement protocol IE */
 	conf->adv_proto_query_resp_len = ADV_PROTO_QUERY_RESP_LEN_DEFAULT;
 	mxl_conf->event_cache_interval = 1;
diff --git a/src/ap/mxl_config.h b/src/ap/mxl_config.h
index a5940d4a4..c78ebd953 100644
--- a/src/ap/mxl_config.h
+++ b/src/ap/mxl_config.h
@@ -17,6 +17,8 @@
 #include "mxl_softblock.h"
 #include "common/ieee802_11_defs.h"
 
+#define CCA_TH_SIZE 5
+
 struct he_override_hw_capab {
 	u8  he_mac_fragmentation;
 	u8  he_mac_plus_htc_he_support;
@@ -295,6 +297,7 @@ struct mxl_hostapd_config {
 	u16 scan_activity_threshold;
 	int obss_beacon_rssi_threshold;
 	int ignore_40_mhz_intolerant;
+	int sCcaTh[CCA_TH_SIZE];
 	u8 ap_retry_limit;
 	u8 ap_retry_limit_data;
 	u8 ap_retry_limit_probe_resp;
@@ -405,6 +408,8 @@ void mxl_hostapd_config_free_bss(struct hostapd_bss_config *bss);
 #define AP_TX_RETRY_LIMIT_DEFAULT_DATA 7
 #define AP_TX_RETRY_LIMIT_DEFAULT_PROBE_RESP 2
 #define AP_RETRY_INVALID 255
+#define CCA_THRESHOLD_MIN -90
+#define CCA_THRESHOLD_MAX -20
 
 #define MAX_EVENT_CACHE_INTERVAL 3600
 
diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index b39d889fd..1a1c10110 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -1585,6 +1585,9 @@ void mxl_hostapd_setup_interface_post(struct hostapd_iface *iface)
 			wpa_printf(MSG_WARNING, "set sTxRetryLimit failed");
 	}
 
+	if (MXL_DRV_VENDOR_SET(LTQ_NL80211_VENDOR_SUBCMD_SET_CCA_THRESHOLD, &mxl_conf->sCcaTh, sizeof(mxl_conf->sCcaTh)))
+		wpa_printf(MSG_WARNING, "set sCcaTh failed");
+
 	get_probe_req_list_timer_init(iface);
 }
 
-- 
2.43.0

