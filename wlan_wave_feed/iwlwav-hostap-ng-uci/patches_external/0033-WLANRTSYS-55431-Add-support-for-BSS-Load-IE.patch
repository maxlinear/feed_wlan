From 16a184cf31e48c8b2c9fde2b28610a8e35331869 Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Sat, 20 May 2023 12:00:52 +0200
Subject: [PATCH] WLANRTSYS-55431: Add support for BSS Load IE

---
 hostapd/config_file.c        |  8 ++++++
 hostapd/ctrl_iface.c         | 48 ++++++++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c        | 43 ++++++++++++++++++++++++++++++++
 src/ap/ap_config.h           |  1 +
 src/ap/ap_drv_ops.h          |  9 +++++++
 src/ap/beacon.c              | 17 +++++++++++++
 src/ap/bss_load.c            | 19 ++++++++++++++
 src/ap/bss_load.h            |  2 +-
 src/drivers/driver.h         |  8 ++++++
 src/drivers/driver_nl80211.c | 13 ++++++++++
 10 files changed, 167 insertions(+), 1 deletion(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 380a30a84..1d1d8afa2 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -3450,6 +3450,14 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 			return 1;
 		}
 		bss->chan_util_avg_period = val;
+	} else if (os_strcmp(buf, "enable_bss_load_ie") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_BOOL_RANGE(val)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid enable_bss_load_ie %d",
+					line, val);
+			return 1;
+		}
+		bss->enable_bss_load_ie = val;
 	} else if (os_strcmp(buf, "rts_threshold") == 0) {
 		conf->rts_threshold = atoi(pos);
 		if (conf->rts_threshold < -1 || conf->rts_threshold > 65535) {
diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 906bdeb99..1c8e8f650 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -68,6 +68,7 @@
 #include "fst/fst_ctrl_iface.h"
 #include "config_file.h"
 #include "ctrl_iface.h"
+#include "ap/bss_load.h"
 #ifdef CONFIG_VENDOR_MXL
 #include "mxl_ctrl_iface.h"
 #include "common/mxl_ieee802_11_common.h"
@@ -4960,6 +4961,50 @@ static int hostapd_ctrl_iface_get_hidden_mode(struct hostapd_data *hapd, char *r
 	return ret;
 }
 
+static int hostapd_ctrl_iface_set_bss_load(struct hostapd_data *hapd, const char *cmd,
+		char *buf, size_t buflen)
+{
+	int ret;
+	int is_enable;
+
+	hapd = mxl_get_bss_index(cmd, hapd->iface);
+	if (hapd == NULL) {
+		ret = sprintf_s(buf, buflen, "FAIL\n");
+		if (ret <= 0) {
+			wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+			return 0;
+		}
+		return ret;
+	}
+
+	cmd = os_strchr(cmd, ' ');
+	if (cmd) {
+		cmd++;
+		is_enable = atoi(cmd);
+		if (!IS_VALID_BOOL_RANGE(is_enable)) {
+			wpa_printf(MSG_ERROR, "set_bss_load: invalid value");
+			return -1;
+		}
+	} else {
+		ret = sprintf_s(buf, buflen, "FAIL\n");
+		if (ret <= 0) {
+			wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+			return 0;
+		}
+		return ret;
+	}
+
+	ret = bss_load_enable(hapd, is_enable);
+	if (ret) {
+		ret = sprintf_s(buf, buflen, "FAIL\n");
+		if (ret <= 0)
+			return 0;
+		return ret;
+	}
+
+	return 0;
+}
+
 static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 					      char *buf, char *reply,
 					      int reply_size,
@@ -5585,6 +5630,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 			reply_len = -1;
 	} else if (os_strncmp(buf, "GET_COLOR_TABLE", 15) == 0) {
 		reply_len = hostapd_ctrl_iface_get_color_table(hapd->iface, reply, reply_size);
+	} else if (os_strncmp(buf, "SET_BSS_LOAD ", 13) == 0) {
+		wpa_printf(MSG_EXCESSIVE, "%s; *** Received: 'SET_BSS_LOAD' (buf= '%s') ***\n", __FUNCTION__, buf);
+		reply_len = hostapd_ctrl_iface_set_bss_load(hapd, buf + 13, reply, reply_size);
 #endif /* CONFIG_IEEE80211AX */
 	} else {
 		os_memcpy(reply, "UNKNOWN COMMAND\n", 16);
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 84c672f39..cca0c4dce 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -2063,6 +2063,47 @@ static int hostapd_cli_cmd_get_color_table(struct wpa_ctrl *ctrl, int argc,
 }
 #endif /* CONFIG_IEEE80211AX */
 
+static int hostapd_cli_cmd_set_bss_load(struct wpa_ctrl *ctrl, int argc,
+		char *argv[])
+{
+	char cmd[256];
+	int res;
+	int total, i;
+
+	if (argc != 2) {
+		printf("Invalid SET_BSS_LOAD command\n"
+				"usage: <BSS_name> <0/1>\n");
+		return -1;
+	}
+
+	res = sprintf_s(cmd, sizeof(cmd), "SET_BSS_LOAD");
+	if (res <= 0) {
+		printf("%s: sprintf_s error %d", __func__, res);
+		goto err;
+	}
+
+	total = 0;
+	for (i = 0; i < argc; i++) {
+		total += res;
+		if ((res < 0) || (total >= (sizeof(cmd) - 1)))
+			goto err;
+		res = sprintf_s(cmd + total, sizeof(cmd) - total, " %s", argv[i]);
+		if (res <= 0) {
+			printf("%s: sprintf_s error %d", __func__, res);
+		}
+	}
+	total += res;
+	if (res <= 0) {
+		printf("%s: sprintf_s error %d", __func__, res);
+		goto err;
+	}
+
+	return wpa_ctrl_command(ctrl, cmd);
+
+	err: printf("Too long SET_BSS_LOAD command.\n");
+	return -1;
+}
+
 struct hostapd_cli_cmd {
 	const char *cmd;
 	int (*handler)(struct wpa_ctrl *ctrl, int argc, char *argv[]);
@@ -2329,6 +2370,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	{ "get_color_table", hostapd_cli_cmd_get_color_table, NULL,
 	  " Get bss used color table and collision history" },
 #endif /* CONFIG_IEEE80211AX */
+	{ "set_bss_load", hostapd_cli_cmd_set_bss_load, NULL,
+	  "<BSS name> <1/0> = set BSS Load IE in beacon and probe resp" },
 	{ NULL, NULL, NULL, NULL }
 };
 
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index b7508a1eb..e02f578d6 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -337,6 +337,7 @@ struct hostapd_bss_config {
 	int dtim_period;
 	unsigned int bss_load_update_period;
 	unsigned int chan_util_avg_period;
+	int enable_bss_load_ie;
 
 	int ieee802_1x; /* use IEEE 802.1X */
 	int eapol_version;
diff --git a/src/ap/ap_drv_ops.h b/src/ap/ap_drv_ops.h
index f17a50d1e..fe2870fda 100644
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -486,6 +486,15 @@ static inline int hostapd_drv_get_tx_power_20mhz(struct hostapd_data *hapd,
 	return hapd->driver->get_tx_power_20mhz(hapd->drv_priv, tx_power_20mhz);
 }
 
+static inline int hostapd_drv_set_bss_load(struct hostapd_data *hapd,
+					const u8 is_enable)
+{
+	if (hapd->driver == NULL || hapd->driver->set_bss_load == NULL)
+		return -ENOTSUP;
+
+	return hapd->driver->set_bss_load(hapd->drv_priv, is_enable);
+}
+
 #ifdef ANDROID
 static inline int hostapd_drv_driver_cmd(struct hostapd_data *hapd,
 					 char *cmd, char *buf, size_t buf_len)
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index 9897fe3af..7f27f4a5c 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -54,6 +54,7 @@ static u8 * hostapd_eid_bss_load(struct hostapd_data *hapd, u8 *eid, size_t len)
 		return eid;
 	}
 #endif /* CONFIG_TESTING_OPTIONS */
+#if 0
 	if (hapd->conf->bss_load_update_period) {
 		*eid++ = WLAN_EID_BSS_LOAD;
 		*eid++ = 5;
@@ -64,6 +65,16 @@ static u8 * hostapd_eid_bss_load(struct hostapd_data *hapd, u8 *eid, size_t len)
 		eid += 2;
 	}
 	return eid;
+#else
+	if (!hapd->conf->hs20 && !hapd->conf->enable_bss_load_ie)
+		return eid;
+
+	/* generated BSS Load IE, will be updated by driver */
+	*eid++ = WLAN_EID_BSS_LOAD;
+	*eid++ = 5;
+	eid += 5;
+	return eid;
+#endif
 }
 
 
@@ -2768,6 +2779,12 @@ static int __ieee802_11_set_beacon(struct hostapd_data *hapd)
 
 	hapd->beacon_set_done = 1;
 
+	/* notify the driver to affect the BSS Load in the beacon frame */
+	if (hostapd_drv_set_bss_load(hapd, hapd->conf->enable_bss_load_ie) < 0) {
+		wpa_printf(MSG_ERROR, "Failed to set bss load in driver");
+		return -1;
+	}
+
 	if (ieee802_11_build_ap_params(hapd, &params) < 0)
 		return -1;
 
diff --git a/src/ap/bss_load.c b/src/ap/bss_load.c
index e9baafc96..5da910a3f 100644
--- a/src/ap/bss_load.c
+++ b/src/ap/bss_load.c
@@ -97,3 +97,22 @@ void bss_load_update_deinit(struct hostapd_data *hapd)
 {
 	eloop_cancel_timeout(update_channel_utilization, hapd, NULL);
 }
+
+int bss_load_enable(struct hostapd_data *hapd, int is_enable)
+{
+	struct hostapd_bss_config *conf;
+
+	if (!hapd)
+		return -1;
+
+	conf = hapd->conf;
+	if (!conf)
+		return -1;
+
+	/* set internal hostapd configuration of the probe resp frame */
+	conf->enable_bss_load_ie = is_enable;
+
+	/* update the beacon frame */
+	ieee802_11_update_beacon(hapd);
+	return 0;
+}
diff --git a/src/ap/bss_load.h b/src/ap/bss_load.h
index ac3c793c9..b92c71424 100644
--- a/src/ap/bss_load.h
+++ b/src/ap/bss_load.h
@@ -12,6 +12,6 @@
 
 int bss_load_update_init(struct hostapd_data *hapd);
 void bss_load_update_deinit(struct hostapd_data *hapd);
-
+int bss_load_enable(struct hostapd_data *hapd, int is_enable);
 
 #endif /* BSS_LOAD_UPDATE_H */
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 7c716700f..dce9d4c19 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -5247,6 +5247,14 @@ struct wpa_driver_ops {
 	 */
 	int (*get_tx_power_20mhz)(void *priv, int *tx_power_20mhz);
 
+	/**
+	 * set_bss_load - Set BSS Load IE in Beacon
+	 * @priv: Private driver interface data
+	 * @enable: 0 disable, 1 enable, of the BSS load IE
+	 * Returns: 0 on success, -1 on failure
+	 */
+	int(*set_bss_load)(void *priv, const u8 enable);
+
 #ifdef CONFIG_TESTING_OPTIONS
 	int (*register_frame)(void *priv, u16 type,
 			      const u8 *match, size_t match_len,
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 43bd676c6..23a293250 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -14151,6 +14151,18 @@ out:
 	return ret;
 }
 
+static int nl80211_set_bss_load(void *priv, const u8 is_enable)
+{
+	int ret = nl80211_vendor_cmd(priv, OUI_LTQ, LTQ_NL80211_VENDOR_SUBCMD_SET_BSS_LOAD,
+		&is_enable, 1, NESTED_ATTR_NOT_USED, NULL);
+
+	if (ret < 0)
+		wpa_printf(MSG_ERROR, "nl80211: sending SET_BSS_LOAD failed: %i (%s)",
+			ret, strerror(-ret));
+
+	return ret;
+}
+
 const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.name = "nl80211",
 	.desc = "Linux nl80211/cfg80211",
@@ -14307,6 +14319,7 @@ const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.set_mbssid_vap_mode = nl80211_set_mbssid_vap,
 	.set_mbssid_num_vaps_in_group = nl80211_set_mbssid_num_vaps_in_group,
 	.get_tx_power_20mhz = nl80211_get_tx_power_20mhz,
+	.set_bss_load = nl80211_set_bss_load,
 #ifdef CONFIG_DPP
 	.dpp_listen = nl80211_dpp_listen,
 #endif /* CONFIG_DPP */
-- 
2.43.0

