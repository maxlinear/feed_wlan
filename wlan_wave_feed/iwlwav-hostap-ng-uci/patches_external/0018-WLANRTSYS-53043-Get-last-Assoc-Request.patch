From 7c46994abed6f249c2dfb9b84a4aa2aa9737633f Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Tue, 14 Feb 2023 13:14:19 +0100
Subject: [PATCH] WLANRTSYS-53043: Get last Assoc Request

---
 hostapd/ctrl_iface.c         | 61 ++++++++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c        | 22 +++++++++++++
 src/ap/ap_drv_ops.c          |  4 +++
 src/ap/ap_drv_ops.h          |  5 ++-
 src/ap/ieee802_11.c          | 22 +++++++++++++
 src/ap/sta_info.c            | 42 +++++++++++++++++++++++--
 src/ap/sta_info.h            |  4 +++
 src/drivers/driver.h         |  2 ++
 src/drivers/driver_nl80211.c |  7 +++++
 9 files changed, 166 insertions(+), 3 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 98866b91d..9aeadbd24 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -4520,6 +4520,64 @@ static int hostapd_ctrl_iface_get_restricted_chan(struct hostapd_iface *iface,
 	return len;
 }
 
+static int hostapd_ctrl_iface_get_last_assoc_req (struct hostapd_data *hapd, const char *cmd, char *reply, size_t reply_len)
+{
+	int i, ret, len = 0;
+	struct sta_info *sta = NULL;
+	u8 sta_mac[ETH_ALEN];
+
+	if (hwaddr_aton(cmd, sta_mac)) {
+		ret = sprintf_s(reply, reply_len, "CTRL: GET_LAST_ASSOC_REQ - Incorrect MAC address passed\n");
+		if (ret <= 0) {
+			wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+			return 0;
+		}
+		return ret;
+	}
+
+	for (i = 0; i < hapd->iface->num_bss; i++) {
+		sta = ap_get_sta(hapd->iface->bss[i], sta_mac);
+
+		if (sta)
+			 break;
+	}
+
+	if (!sta) {
+		ret = sprintf_s(reply, reply_len, "CTRL: GET_LAST_ASSOC_REQ - STA doesn't exist\n");
+		if (ret <= 0) {
+			wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+			return 0;
+		}
+		return ret;
+	}
+
+	if (!sta->last_assoc_req || !sta->last_assoc_req_len) {
+		ret = sprintf_s(reply, reply_len, "CTRL: GET_LAST_ASSOC_REQ - STA doesn't have last assoc req\n");
+		if (ret <= 0) {
+			wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+			return 0;
+		}
+		return ret;
+	}
+
+	ret = sprintf_s(reply + len, reply_len - len, "last_assoc_req=");
+	if (ret <= 0)
+		return len;
+	len += ret;
+
+	ret = wpa_snprintf_hex_uppercase(reply + len, reply_len - len, (const u8 *)sta->last_assoc_req, sta->last_assoc_req_len);
+	if (ret <= 0)
+		return len;
+	len += ret;
+
+	ret = sprintf_s(reply + len, reply_len - len, "\n");
+	if (ret <= 0)
+		return len;
+	len += ret;
+
+	return len;
+}
+
 static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 					      char *buf, char *reply,
 					      int reply_size,
@@ -5115,6 +5173,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "GET_RESTRICTED_CHANNELS", 23) == 0) {
 		reply_len = hostapd_ctrl_iface_get_restricted_chan(hapd->iface, NULL, reply,
 					reply_size);
+	} else if (os_strncmp(buf, "GET_LAST_ASSOC_REQ ", sizeof("GET_LAST_ASSOC_REQ ") - 1) == 0) {
+		reply_len = hostapd_ctrl_iface_get_last_assoc_req(hapd,
+				buf + sizeof("GET_LAST_ASSOC_REQ ") - 1, reply, reply_size);
 	} else {
 		os_memcpy(reply, "UNKNOWN COMMAND\n", 16);
 		reply_len = 16;
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 996ed3b4b..c9c9e295e 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1922,6 +1922,26 @@ static int hostapd_cli_cmd_get_restricted_chan(struct wpa_ctrl *ctrl,
 	return wpa_ctrl_command(ctrl, cmd);
 }
 
+static int hostapd_cli_cmd_get_last_assoc_req (struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	char cmd[64];
+	int res;
+
+	if (argc != 1) {
+		printf("Invalid 'get_last_assoc_req' command: needs one argument:\n"
+				"- STA MAC address from which to get last association request\n");
+		return -1;
+	}
+
+	res = sprintf_s(cmd, sizeof(cmd), "GET_LAST_ASSOC_REQ %s", argv[0]);
+	if (res <= 0) {
+		printf("%s: sprintf_s error %d", __func__, res);
+		return -1;
+	}
+
+	return wpa_ctrl_command(ctrl, cmd);
+}
+
 struct hostapd_cli_cmd {
 	const char *cmd;
 	int (*handler)(struct wpa_ctrl *ctrl, int argc, char *argv[]);
@@ -2167,6 +2187,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	  " set restricted channels, list_of_channels example 1 6 11-13" },
 	{ "get_restricted_chan", hostapd_cli_cmd_get_restricted_chan, NULL,
 	  " get list of restricted channels" },
+	{ "get_last_assoc_req", hostapd_cli_cmd_get_last_assoc_req, NULL,
+	  "<MAC addr> = get last association request frame for specified STA" },
 	{ NULL, NULL, NULL, NULL }
 };
 
diff --git a/src/ap/ap_drv_ops.c b/src/ap/ap_drv_ops.c
index cfd00febf..e3725cb23 100644
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -431,6 +431,8 @@ int hostapd_sta_add(struct hostapd_data *hapd,
 		    const struct ieee80211_he_6ghz_band_cap *he_6ghz_capab,
 		    u32 flags, u8 qosinfo, u8 vht_opmode, int supp_p2p_ps,
 		    int set,
+		    struct ieee80211_mgmt *last_assoc_req,
+		    size_t last_assoc_req_len,
 		    int ssi_signal,
 		    const u8 *link_addr, bool mld_link_sta)
 {
@@ -475,6 +477,8 @@ int hostapd_sta_add(struct hostapd_data *hapd,
 	}
 #endif /* CONFIG_IEEE80211BE */
 
+	params.last_assoc_req = last_assoc_req;
+	params.last_assoc_req_len = last_assoc_req_len;
 	params.ssi_signal = ssi_signal;
 	return hapd->driver->sta_add(hapd->drv_priv, &params);
 }
diff --git a/src/ap/ap_drv_ops.h b/src/ap/ap_drv_ops.h
index c43b48ab2..a120169ce 100644
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -15,6 +15,7 @@ struct wpa_driver_scan_params;
 struct ieee80211_ht_capabilities;
 struct ieee80211_vht_capabilities;
 struct hostapd_freq_params;
+struct ieee80211_mgmt;
 
 u32 hostapd_sta_flags_to_drv(u32 flags);
 int hostapd_build_ap_extra_ies(struct hostapd_data *hapd,
@@ -47,7 +48,9 @@ int hostapd_sta_add(struct hostapd_data *hapd,
 		    size_t eht_capab_len,
 		    const struct ieee80211_he_6ghz_band_cap *he_6ghz_capab,
 		    u32 flags, u8 qosinfo, u8 vht_opmode, int supp_p2p_ps,
-		    int set, int ssi_signal, const u8 *link_addr, bool mld_link_sta);
+		    int set, struct ieee80211_mgmt *last_assoc_req,
+		    size_t last_assoc_req_len,
+		    int ssi_signal, const u8 *link_addr, bool mld_link_sta);
 int hostapd_set_privacy(struct hostapd_data *hapd, int enabled);
 int hostapd_set_generic_elem(struct hostapd_data *hapd, const u8 *elem,
 			     size_t elem_len);
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index b77da4d6a..fa3899fe9 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -4743,6 +4743,8 @@ static int add_associated_sta(struct hostapd_data *hapd,
 			    sta->flags | WLAN_STA_ASSOC, sta->qosinfo,
 			    sta->vht_opmode, sta->p2p_ie ? 1 : 0,
 			    set,
+			    sta->last_assoc_req,
+			    sta->last_assoc_req_len,
 			    sta->ssi_signal,
 			    mld_link_addr, mld_link_sta)) {
 		hostapd_logger(hapd, sta->addr,
@@ -5279,6 +5281,7 @@ static void handle_assoc(struct hostapd_data *hapd,
 	int omit_rsnxe = 0;
 	bool set_beacon = false;
 	bool mld_addrs_not_translated = false;
+	errno_t err;
 
 	if (len < IEEE80211_HDRLEN + (reassoc ? sizeof(mgmt->u.reassoc_req) :
 				      sizeof(mgmt->u.assoc_req))) {
@@ -5598,6 +5601,18 @@ static void handle_assoc(struct hostapd_data *hapd,
 		 */
 	}
 
+	if (sta->last_assoc_req)
+		os_free(sta->last_assoc_req);
+	sta->last_assoc_req_len = len;
+	sta->last_assoc_req = os_malloc(len);
+	if (sta->last_assoc_req) {
+		err = memcpy_s(sta->last_assoc_req, len, mgmt, len);
+		if (EOK != err) {
+			wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
+			goto fail;
+		}
+	}
+
 	/* Make sure that the previously registered inactivity timer will not
 	 * remove the STA immediately. */
 	sta->timeout_next = STA_NULLFUNC;
@@ -6549,6 +6564,13 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 		return;
 	}
 
+	if (!(sta->flags & WLAN_STA_ASSOC_REQ_OK)) {
+		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
+				HOSTAPD_LEVEL_INFO,
+				"STA is not associated, ignoring assoc cb");
+		return;
+	}
+
 	if (reassoc)
 		status = le_to_host16(mgmt->u.reassoc_resp.status_code);
 	else
diff --git a/src/ap/sta_info.c b/src/ap/sta_info.c
index e2fb39b56..3412e2602 100644
--- a/src/ap/sta_info.c
+++ b/src/ap/sta_info.c
@@ -442,6 +442,8 @@ void ap_free_sta(struct hostapd_data *hapd, struct sta_info *sta)
 	forced_memzero(sta->last_tk, WPA_TK_MAX_LEN);
 #endif /* CONFIG_TESTING_OPTIONS */
 
+	os_free(sta->last_assoc_req);
+
 	os_free(sta);
 }
 
@@ -1386,7 +1388,8 @@ void ap_sta_set_authorized(struct hostapd_data *hapd, struct sta_info *sta,
 		char keyid_buf[100];
 		char ip_addr[100];
 		char signal_strength[30];
-		char *rates, *capabilities;
+		char *rates, *capabilities, *assoc_req;
+		int assoc_req_len;
 		int ret;
 
 		dpp_pkhash_buf[0] = '\0';
@@ -1409,6 +1412,16 @@ void ap_sta_set_authorized(struct hostapd_data *hapd, struct sta_info *sta,
 		}
 		capabilities[0] = '\0';
 
+		assoc_req_len = sizeof(" assoc_req=") + sta->last_assoc_req_len * 2;
+		assoc_req = os_malloc(assoc_req_len);
+		if (assoc_req == NULL) {
+			wpa_printf(MSG_ERROR, "malloc failed");
+			os_free(rates);
+			os_free(capabilities);
+			goto free_alloc;
+		}
+		assoc_req[0] = '\0';
+
 #ifdef CONFIG_P2P
 		if (wpa_auth_get_ip_addr(sta->wpa_sm, ip_addr_buf) == 0) {
 			os_snprintf(ip_addr, sizeof(ip_addr),
@@ -1515,6 +1528,31 @@ void ap_sta_set_authorized(struct hostapd_data *hapd, struct sta_info *sta,
 			len += ret;
 		}
 
+		if (sta->last_assoc_req) {
+			len = 0;
+			ret = sprintf_s(assoc_req + len, assoc_req_len - len, " assoc_req=");
+			if (ret <= 0) {
+				wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+				os_free(rates);
+				os_free(capabilities);
+				os_free(assoc_req);
+				goto free_alloc;
+			}
+			len += ret;
+			for (i = 0; i < sta->last_assoc_req_len; i++) {
+				ret = sprintf_s(assoc_req + len, assoc_req_len - len, "%02X",
+						((u8*)sta->last_assoc_req)[i]);
+				if (ret <= 0) {
+					wpa_printf(MSG_ERROR, "%s: sprintf_s error %d", __func__, ret);
+					os_free(rates);
+					os_free(capabilities);
+					os_free(assoc_req);
+					goto free_alloc;
+				}
+				len += ret;
+			}
+		}
+
 		wpa_msg(hapd->msg_ctx, MSG_INFO, AP_STA_CONNECTED "%s%s%s%s%s%s%s",
 			buf, ip_addr, signal_strength, rates, capabilities, keyid_buf, dpp_pkhash_buf);
 
@@ -1772,7 +1810,7 @@ int ap_sta_re_add(struct hostapd_data *hapd, struct sta_info *sta)
 			    sta->supported_rates_len,
 			    0, NULL, NULL, NULL, 0, NULL, 0, NULL,
 			    sta->flags, 0, 0, 0, 0,
-			    sta->ssi_signal,
+			    NULL, 0, sta->ssi_signal,
 			    mld_link_addr, mld_link_sta)) {
 		hostapd_logger(hapd, sta->addr,
 			       HOSTAPD_MODULE_IEEE80211,
diff --git a/src/ap/sta_info.h b/src/ap/sta_info.h
index 116e9930a..deecff1e2 100644
--- a/src/ap/sta_info.h
+++ b/src/ap/sta_info.h
@@ -335,6 +335,10 @@ struct sta_info {
 #endif /* CONFIG_IEEE80211BE */
 
 	u32 ssi_signal; /* dBm */
+
+	/* IEEE 802.11f (IAPP) related data */
+	struct ieee80211_mgmt *last_assoc_req;
+	size_t last_assoc_req_len;
 };
 
 
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 9d092eb43..e2f3c6b63 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -2554,6 +2554,8 @@ struct hostapd_sta_add_params {
 	s8 mld_link_id;
 	const u8 *mld_link_addr;
 	int ssi_signal;
+	struct ieee80211_mgmt *last_assoc_req;
+	size_t last_assoc_req_len;
 };
 
 struct mac_address {
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 4bc9314e8..4106c2aec 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -5892,6 +5892,13 @@ static int wpa_driver_nl80211_sta_add(void *priv,
 			goto fail;
 	}
 
+	if (params->last_assoc_req && (params->last_assoc_req_len)) {
+		if (nla_put(msg, NL80211_ATTR_FRAME,
+				params->last_assoc_req_len,
+				params->last_assoc_req))
+			goto fail;
+	}
+
 	ret = send_and_recv_msgs(drv, msg, NULL, NULL, NULL, NULL, NULL);
 	msg = NULL;
 	if (ret)
-- 
2.43.0

