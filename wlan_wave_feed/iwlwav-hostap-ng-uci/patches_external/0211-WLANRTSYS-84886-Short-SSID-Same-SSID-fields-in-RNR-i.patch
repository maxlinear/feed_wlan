From 159aa61415f541e0575879df99e0528cc64da530 Mon Sep 17 00:00:00 2001
From: svenkatachalam <svenkatachalam@maxlinear.com>
Date: Tue, 24 Sep 2024 18:23:00 +0800
Subject: [PATCH] WLANRTSYS-84886 "Short SSID" & "Same SSID" fields in RNR
 information are not updated correctly.

Issue:
In the Neighbor AP Information of RNR:
1) The "Short SSID" is set even when the "Same SSID"
is set to false.
2) The "Same SSID" field is not updated correctly.

Root Cause:
1) The comparison between 2.4GHz and 6GHz SSIDs,
always used the length of str1.
2) The "Same SSID" parameter in RNR information
is updated at the radio level.

Fix:
1) Used SSID_MAX_LEN of 32 to compare the 2.4GHz
and 6GHz SSIDs.
2) Created a new VAP level variable and updated
the "Same SSID" field in RNR information based
on this new field.

FIXUP to WLANRTSYS-60843 MLO changes: AP MLD configuration
---
 hostapd/mxl_config.c |  2 +-
 src/ap/mxl_beacon.c  | 25 ++++++++++++++++---------
 src/ap/mxl_config.h  |  1 +
 3 files changed, 18 insertions(+), 10 deletions(-)

diff --git a/hostapd/mxl_config.c b/hostapd/mxl_config.c
index 887c4285c..0130bd24c 100644
--- a/hostapd/mxl_config.c
+++ b/hostapd/mxl_config.c
@@ -836,7 +836,7 @@ static int mxl_hostapd_parse_colocated_6g_vap_info(struct hostapd_config *conf,
 	if ((bss->ssid.ssid_len) && (strnlen_s((char *)ssid, SSID_MAX_LEN) == bss->ssid.ssid_len) &&
 		(!os_memcmp(bss->ssid.ssid, ssid, bss->ssid.ssid_len)) && !hidden_mode) {
 		wpa_printf(MSG_DEBUG, "CTRL: UPDATE_RNR: Same ssid field set in rnr");
-		conf->mxl_conf.coloc_6g_ap_info[radio_index].bss_info[j].BssParams |= RNR_TBTT_INFO_BSS_PARAM_SAME_SSID;
+		bss->mxl_bss_conf.bss_same_ssid |= BIT(j);
 	}
 	else
 		wpa_printf(MSG_DEBUG, "CTRL: UPDATE_RNR: Same ssid field not set in rnr");
diff --git a/src/ap/mxl_beacon.c b/src/ap/mxl_beacon.c
index 0e9bccc66..afd95050a 100644
--- a/src/ap/mxl_beacon.c
+++ b/src/ap/mxl_beacon.c
@@ -192,7 +192,7 @@ static u8 mxl_count_same_ssid_vap(int radio, struct hostapd_data *hapd)
 	for (j = 0; j < sizeof(hapd->iconf->mxl_conf.coloc_6g_ap_info[radio].bss_info)/sizeof(neigh_ap_info_field_t); j++) {
 		if (!os_memcmp(hapd->iconf->mxl_conf.coloc_6g_ap_info[radio].bss_info[j].bssid, empty_bssid, ETH_ALEN))
 			continue; // not valid entry, skip
-		if (RNR_TBTT_INFO_BSS_PARAM_SAME_SSID & hapd->iconf->mxl_conf.coloc_6g_ap_info[radio].bss_info[j].BssParams)
+		if (BIT(j) & hapd->conf->mxl_bss_conf.bss_same_ssid)
 			count++;
 	}
 	return count;
@@ -206,7 +206,7 @@ static u8 mxl_count_different_ssid_vap(int radio, struct hostapd_data *hapd)
 	for (j = 0; j < sizeof(hapd->iconf->mxl_conf.coloc_6g_ap_info[radio].bss_info)/sizeof(neigh_ap_info_field_t); j++) {
 		if (!os_memcmp(hapd->iconf->mxl_conf.coloc_6g_ap_info[radio].bss_info[j].bssid, empty_bssid, ETH_ALEN))
 			continue; // not valid entry, skip
-		if (!(RNR_TBTT_INFO_BSS_PARAM_SAME_SSID & hapd->iconf->mxl_conf.coloc_6g_ap_info[radio].bss_info[j].BssParams))
+		if (!(BIT(j) & hapd->conf->mxl_bss_conf.bss_same_ssid))
 			count++;
 	}
 	return count;
@@ -346,13 +346,11 @@ static u8 * mxl_create_rnr_vap(u8 **pos, int radio, struct hostapd_data *hapd, b
 		}
 #endif /* CONFIG_IEEE80211BE_MXL_MLO */
 
-		if (!is_same_ssid  &&
-			(RNR_TBTT_INFO_BSS_PARAM_SAME_SSID & hapd->iconf->mxl_conf.coloc_6g_ap_info[radio].bss_info[j].BssParams)) {
+		if (!is_same_ssid && (BIT(j) & hapd->conf->mxl_bss_conf.bss_same_ssid)) {
 			continue;
 		}
 
-		if (is_same_ssid
-			&& !(RNR_TBTT_INFO_BSS_PARAM_SAME_SSID & hapd->iconf->mxl_conf.coloc_6g_ap_info[radio].bss_info[j].BssParams)) {
+		if (is_same_ssid && !(BIT(j) & hapd->conf->mxl_bss_conf.bss_same_ssid)) {
 			continue;
 		}
 
@@ -387,6 +385,14 @@ static u8 * mxl_create_rnr_vap(u8 **pos, int radio, struct hostapd_data *hapd, b
 			*pos += sizeof(hapd->iconf->mxl_conf.coloc_6g_ap_info[radio].bss_info[j].ShortSsid);
 		}
 		os_memcpy(*pos, &hapd->iconf->mxl_conf.coloc_6g_ap_info[radio].bss_info[j].BssParams, sizeof(u8));
+
+		u8 *temp_bss_params = (u8 *)*pos;
+		*temp_bss_params &= ~(RNR_TBTT_INFO_BSS_PARAM_SAME_SSID);
+
+		/* Enable "same SSID" field, when bss_same_ssid bit is set for the specified vap index */
+		if (BIT(j) & hapd->conf->mxl_bss_conf.bss_same_ssid)
+			*temp_bss_params |= RNR_TBTT_INFO_BSS_PARAM_SAME_SSID;
+
 		*pos += sizeof(u8);
 
 		os_memcpy(*pos, &hapd->iconf->mxl_conf.coloc_6g_ap_info[radio].bss_info[j].psd_20MHz, sizeof(u8));
@@ -635,9 +641,10 @@ int mxl_update_rnr_in_beacon(struct hostapd_data *hapd, struct update_rnr rnr, i
 		}
 	}
 
-	if (!os_memcmp(hapd->conf->ssid.ssid, rnr.ssid, hapd->conf->ssid.ssid_len) && !rnr.hidden_mode) {
-		wpa_printf(MSG_DEBUG, "CTRL: set_beacon_with_snr: Same ssid field set in RNR");
-		hapd->iconf->mxl_conf.coloc_6g_ap_info[radio_index].bss_info[vap_index].BssParams |= RNR_TBTT_INFO_BSS_PARAM_SAME_SSID;
+	if (!os_memcmp(hapd->conf->ssid.ssid, rnr.ssid, SSID_MAX_LEN) && !rnr.hidden_mode) {
+		wpa_printf(MSG_DEBUG, "CTRL: set_beacon_with_rnr: Same ssid field set in RNR");
+		hapd->conf->mxl_bss_conf.bss_same_ssid = 0;
+		hapd->conf->mxl_bss_conf.bss_same_ssid |= BIT(vap_index);
 	}
 
 	err = memcpy_s(hapd->iconf->mxl_conf.coloc_6g_ap_info[radio_index].bss_info[vap_index].Ssid, SSID_MAX_LEN, rnr.ssid, strnlen_s((const char *)rnr.ssid, SSID_MAX_LEN));
diff --git a/src/ap/mxl_config.h b/src/ap/mxl_config.h
index e419bd463..6f0688b01 100644
--- a/src/ap/mxl_config.h
+++ b/src/ap/mxl_config.h
@@ -408,6 +408,7 @@ struct mxl_hostapd_bss_config {
 #ifdef CONFIG_IEEE80211BE
 	bool disable_beacon_prot;
 #endif /* CONFIG_IEEE80211BE */
+	u32 bss_same_ssid; /* bitmap size [32 bits] - Need to handle based on MAX_SUPPORTED_6GHZ_VAP_PER_RADIO - WLANRTSYS-61684 */
 };
 
 struct hostapd_config;
-- 
2.43.0

