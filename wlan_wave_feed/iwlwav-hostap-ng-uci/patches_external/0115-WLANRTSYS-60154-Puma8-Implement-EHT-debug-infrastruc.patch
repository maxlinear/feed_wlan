From c8cf42c5ea81ee5afd462dde068e98bbae4fdfb9 Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Fri, 24 Nov 2023 10:14:07 +0200
Subject: [PATCH] WLANRTSYS-60154: Puma8: Implement EHT debug infrastructure

- EHT debug infrastructure
- EHT beacon alignment for 6GHz

Signed-off-by: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
---
 hostapd/mxl_config.c             | 542 ++++++++++++++++++++++++++++
 src/ap/ieee802_11_eht.c          |  29 ++
 src/ap/mxl_config.h              | 122 +++++++
 src/ap/mxl_hostapd.c             | 582 ++++++++++++++++++++++++++++++-
 src/common/mxl_ieee802_11_defs.h | 207 +++++++++++
 src/common/vendor_cmds_copy.h    |  10 +
 6 files changed, 1491 insertions(+), 1 deletion(-)

diff --git a/hostapd/mxl_config.c b/hostapd/mxl_config.c
index 70d4d3791..dbf14e554 100644
--- a/hostapd/mxl_config.c
+++ b/hostapd/mxl_config.c
@@ -651,6 +651,541 @@ mxl_conf_fill_he_ppe_thresholds(struct mxl_hostapd_config *conf, const char *buf
 }
 #endif /* CONFIG_IEEE80211AX */
 
+#ifdef CONFIG_IEEE80211BE
+
+static int
+mxl_conf_fill_eht_mac_capab_info(struct mxl_hostapd_config *conf, const char *buf, char *pos)
+{
+	u8 *eht_mac_capab_info = (u8*)&conf->eht_capab_dbg.mac_cap;
+	struct eht_override_hw_capab *cap_idx = &conf->eht_override_hw_capab;
+
+	if (os_strcmp(buf, "eht_mac_epcs_prio_access") == 0) {
+		cap_idx->eht_mac_epcs_prio_access = 1;
+		eht_mac_capab_info[EHT_MACCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+						EHT_MAC_CAP0_EPCS_PRIO_ACCESS);
+	} else if (os_strcmp(buf, "eht_mac_eht_om_control") == 0) {
+		cap_idx->eht_mac_eht_om_control = 1;
+		eht_mac_capab_info[EHT_MACCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+						EHT_MAC_CAP0_OM_CONTROL);
+	} else if (os_strcmp(buf, "eht_mac_trig_txop_sharing_mode1") == 0) {
+		cap_idx->eht_mac_trig_txop_sharing_mode1 = 1;
+		eht_mac_capab_info[EHT_MACCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+						EHT_MAC_CAP0_TRIG_TXOP_SHARING_MODE1);
+	} else if (os_strcmp(buf, "eht_mac_trig_txop_sharing_mode2") == 0) {
+		cap_idx->eht_mac_trig_txop_sharing_mode2 = 1;
+		eht_mac_capab_info[EHT_MACCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+						EHT_MAC_CAP0_TRIG_TXOP_SHARING_MODE2);
+	} else if (os_strcmp(buf, "eht_mac_restricted_twt") == 0) {
+		cap_idx->eht_mac_restricted_twt = 1;
+		eht_mac_capab_info[EHT_MACCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+						EHT_MAC_CAP0_RESTRICTED_TWT);
+	} else if (os_strcmp(buf, "eht_mac_scs_traffic_desc") == 0) {
+		cap_idx->eht_mac_scs_traffic_desc = 1;
+		eht_mac_capab_info[EHT_MACCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+						EHT_MAC_CAP0_SCS_TRAFFIC_DESC);
+	} else if (os_strcmp(buf, "eht_mac_max_mpdu_len") == 0) {
+		cap_idx->eht_mac_max_mpdu_len = 1;
+		eht_mac_capab_info[EHT_MACCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+						EHT_MAC_CAP0_MAX_MPDU_LEN);
+	} else if (os_strcmp(buf, "eht_mac_max_ampdu_len_exp_ext") == 0) {
+		cap_idx->eht_mac_max_ampdu_len_exp_ext = 1;
+		eht_mac_capab_info[EHT_MACCAP_CAP1_IDX] |= set_he_cap(atoi(pos),
+						EHT_MAC_CAP1_MAX_AMPDU_LEN_EXP_EXT);
+	} else if (os_strcmp(buf, "eht_mac_trs_support") == 0) {
+		cap_idx->eht_mac_trs_support = 1;
+		eht_mac_capab_info[EHT_MACCAP_CAP1_IDX] |= set_he_cap(atoi(pos),
+						EHT_MAC_CAP1_TRS_SUPPORT);
+	} else if (os_strcmp(buf, "eht_mac_txop_return_support_sharing_mode2") == 0) {
+		cap_idx->eht_mac_txop_return_support_sharing_mode2 = 1;
+		eht_mac_capab_info[EHT_MACCAP_CAP1_IDX] |= set_he_cap(atoi(pos),
+						EHT_MAC_CAP1_TXOP_RETURN_SUPPORT_SHARING_MODE2);
+	} else
+		return 0;
+
+	return 1;
+}
+
+static int
+mxl_conf_fill_eht_phy_capab_info(struct mxl_hostapd_config *conf, const char *buf, char *pos)
+{
+	u8 *eht_phy_capab_info = conf->eht_capab_dbg.phy_cap;
+	struct eht_override_hw_capab *cap_idx = &conf->eht_override_hw_capab;
+
+	if (os_strcmp(buf, "eht_phy_320_mhz_in_6_ghz") == 0) {
+		cap_idx->eht_phy_320_mhz_in_6_ghz = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP0_320MHZ_IN_6GHZ);
+	} else if (os_strcmp(buf, "eht_phy_242_ru_in_bw_above_20_mhz") == 0) {
+		cap_idx->eht_phy_242_ru_in_bw_above_20_mhz = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP0_242RU_BW_ABOVE_20MHZ);
+	} else if (os_strcmp(buf, "eht_phy_ndp_4x_eht_ltf_and_3_2_us_gi") == 0) {
+		cap_idx->eht_phy_ndp_4x_eht_ltf_and_3_2_us_gi = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP0_NDP_4X_LTF_3_2_GI);
+	} else if (os_strcmp(buf, "eht_phy_partial_bw_ul_mu_mimo") == 0) {
+		cap_idx->eht_phy_partial_bw_ul_mu_mimo = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP0_PARTIAL_BW_UL_MU_MIMO);
+	} else if (os_strcmp(buf, "eht_phy_su_beamformer") == 0) {
+		cap_idx->eht_phy_su_beamformer = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP0_SU_BEAMFORMER);
+	} else if (os_strcmp(buf, "eht_phy_su_beamformee") == 0) {
+		cap_idx->eht_phy_su_beamformee = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP0_SU_BEAMFORMEE);
+	} else if (os_strcmp(buf, "eht_phy_beamformee_ss_80_mhz_or_below") == 0) {
+		cap_idx->eht_phy_beamformee_ss_80_mhz_or_below = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP0_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP0_SU_BEAMFORMEE_SS_LESS_OR_EQUAL_80);
+		eht_phy_capab_info[EHT_PHYCAP_CAP1_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP1_SU_BEAMFORMEE_SS_LESS_OR_EQUAL_80);
+	} else if (os_strcmp(buf, "eht_phy_beamformee_ss_160_mhz") == 0) {
+		cap_idx->eht_phy_beamformee_ss_160_mhz = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP1_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP1_SU_BEAMFORMEE_SS_EQUAL_160);
+	} else if (os_strcmp(buf, "eht_phy_beamformee_ss_320_mhz") == 0) {
+		cap_idx->eht_phy_beamformee_ss_320_mhz = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP1_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP1_SU_BEAMFORMEE_SS_EQUAL_320);
+	} else if (os_strcmp(buf, "eht_phy_num_sounding_dim_80_mhz_or_below") == 0) {
+		cap_idx->eht_phy_num_sounding_dim_80_mhz_or_below = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP2_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP2_NUM_SOUNDING_DIM_80_OR_LESS);
+	} else if (os_strcmp(buf, "eht_phy_num_sounding_dim_160_mhz") == 0) {
+		cap_idx->eht_phy_num_sounding_dim_160_mhz = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP2_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP2_NUM_SOUNDING_DIM_EQUAL_160);
+	} else if (os_strcmp(buf, "eht_phy_num_sounding_dim_320_mhz") == 0) {
+		cap_idx->eht_phy_num_sounding_dim_320_mhz = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP2_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP2_NUM_SOUNDING_DIM_EQUAL_320);
+		eht_phy_capab_info[EHT_PHYCAP_CAP3_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP3_NUM_SOUNDING_DIM_EQUAL_320);
+	} else if (os_strcmp(buf, "eht_phy_ng_16_su_feedback") == 0) {
+		cap_idx->eht_phy_ng_16_su_feedback = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP3_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP3_NG_16_SU_FEEDBACK);
+	} else if (os_strcmp(buf, "eht_phy_ng_16_mu_feedback") == 0) {
+		cap_idx->eht_phy_ng_16_mu_feedback = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP3_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP3_NG_16_MU_FEEDBACK);
+	} else if (os_strcmp(buf, "eht_phy_codebook_size_4_2_su_fb") == 0) {
+		cap_idx->eht_phy_codebook_size_4_2_su_fb = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP3_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP3_CODEBOOK_SIZE_4_2_SU_FB);
+	} else if (os_strcmp(buf, "eht_phy_codebook_size_75_5_mu_fb") == 0) {
+		cap_idx->eht_phy_codebook_size_75_5_mu_fb = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP3_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP3_CODEBOOK_SIZE_75_5_MU_FB);
+	} else if (os_strcmp(buf, "eht_phy_trig_su_bf_fb") == 0) {
+		cap_idx->eht_phy_trig_su_bf_fb = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP3_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP3_TRIG_SU_BF_FB);
+	} else if (os_strcmp(buf, "eht_phy_trig_mu_bf_partial_bw_fb") == 0) {
+		cap_idx->eht_phy_trig_mu_bf_partial_bw_fb = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP3_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP3_TRIG_MU_BF_PARTIAL_BW_FB);
+	} else if (os_strcmp(buf, "eht_phy_trig_cqi_fb") == 0) {
+		cap_idx->eht_phy_trig_cqi_fb = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP3_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP3_TRIG_CQI_FB);
+	} else if (os_strcmp(buf, "eht_phy_partial_bw_dl_mu_mimo") == 0) {
+		cap_idx->eht_phy_partial_bw_dl_mu_mimo = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP4_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP4_PARTIAL_BW_DL_MU_MIMO);
+	} else if (os_strcmp(buf, "eht_phy_psr_based_sr") == 0) {
+		cap_idx->eht_phy_psr_based_sr = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP4_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP4_PSR_BASED_SR_SUPPORT);
+	} else if (os_strcmp(buf, "eht_phy_power_boost_factor") == 0) {
+		cap_idx->eht_phy_power_boost_factor = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP4_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP4_POWER_BOOST_FACTOR_SUPPORT);
+	} else if (os_strcmp(buf, "eht_phy_eht_mu_ppdu_with_4x_eht_ltf_and_0_8_us_gi") == 0) {
+		cap_idx->eht_phy_eht_mu_ppdu_with_4x_eht_ltf_and_0_8_us_gi = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP4_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP4_MU_PPDU_4X_LTF_0_8_US_GI);
+	} else if (os_strcmp(buf, "eht_phy_max_nc") == 0) {
+		cap_idx->eht_phy_max_nc = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP4_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP4_MAX_NC);
+	} else if (os_strcmp(buf, "eht_phy_non_trig_cqi_fb") == 0) {
+		cap_idx->eht_phy_non_trig_cqi_fb = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP5_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP5_NON_TRIG_CQI_FB);
+	} else if (os_strcmp(buf, "eht_phy_tx_1024_qam_and_4096_qam_below_242_ru") == 0) {
+		cap_idx->eht_phy_tx_1024_qam_and_4096_qam_below_242_ru = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP5_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP5_TX_1024_QAM_4096_QAM_LESS_242_RU);
+	} else if (os_strcmp(buf, "eht_phy_rx_1024_qam_and_4096_qam_below_242_ru") == 0) {
+		cap_idx->eht_phy_rx_1024_qam_and_4096_qam_below_242_ru = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP5_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP5_RX_1024_QAM_4096_QAM_LESS_242_RU);
+	} else if (os_strcmp(buf, "eht_phy_ppe_thresholds_present") == 0) {
+		cap_idx->eht_phy_ppe_thresholds_present = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP5_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP5_PPE_THRESHOLDS_PRESENT);
+	} else if (os_strcmp(buf, "eht_phy_common_nominal_pkt_pad") == 0) {
+		cap_idx->eht_phy_common_nominal_pkt_pad = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP5_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP5_COMMON_NOMINAL_PKT_PAD);
+	} else if (os_strcmp(buf, "eht_phy_max_num_of_supported_eht_ltfs") == 0) {
+		cap_idx->eht_phy_max_num_of_supported_eht_ltfs = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP5_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP5_MAX_NUM_SUPPORTED_EHT_LTFS);
+		eht_phy_capab_info[EHT_PHYCAP_CAP6_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP6_MAX_NUM_SUPPORTED_EHT_LTFS);
+	} else if (os_strcmp(buf, "eht_phy_mcs_15") == 0) {
+		cap_idx->eht_phy_mcs_15 = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP6_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP6_SUPPORT_OF_MCS_15);
+	} else if (os_strcmp(buf, "eht_phy_eht_dup_in_6_ghz") == 0) {
+		cap_idx->eht_phy_eht_dup_in_6_ghz = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP6_IDX] |= set_he_cap(atoi(pos),
+					EHT_PHY_CAP6_SUPPORT_OF_EHT_DUP_6G);
+	} else if (os_strcmp(buf, "eht_phy_20_mhz_operating_sta_rx_ndp_with_wider_bw") == 0) {
+		cap_idx->eht_phy_20_mhz_operating_sta_rx_ndp_with_wider_bw = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP7_IDX] |= set_he_cap(atoi(pos),
+						EHT_PHY_CAP7_20MHZ_OPER_STA_RX_NDP_WIDER_BW);
+	} else if (os_strcmp(buf, "eht_phy_non_ofdma_ul_mu_mimo_bw_80_mhz_or_below") == 0) {
+		cap_idx->eht_phy_non_ofdma_ul_mu_mimo_bw_80_mhz_or_below = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP7_IDX] |= set_he_cap(atoi(pos),
+						EHT_PHY_CAP7_NONOFDMA_UL_MUMIMO_BW_LESS_OR_EQUAL_80);
+	} else if (os_strcmp(buf, "eht_phy_non_ofdma_ul_mu_mimo_bw_160_mhz") == 0) {
+		cap_idx->eht_phy_non_ofdma_ul_mu_mimo_bw_160_mhz = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP7_IDX] |= set_he_cap(atoi(pos),
+						EHT_PHY_CAP7_NONOFDMA_UL_MUMIMO_BW_EQUAL_160);
+	} else if (os_strcmp(buf, "eht_phy_non_ofdma_ul_mu_mimo_bw_320_mhz") == 0) {
+		cap_idx->eht_phy_non_ofdma_ul_mu_mimo_bw_320_mhz = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP7_IDX] |= set_he_cap(atoi(pos),
+						EHT_PHY_CAP7_NONOFDMA_UL_MUMIMO_BW_EQUAL_320);
+	} else if (os_strcmp(buf, "eht_phy_mu_beamformer_bw_80_mhz_or_below") == 0) {
+		cap_idx->eht_phy_mu_beamformer_bw_80_mhz_or_below = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP7_IDX] |= set_he_cap(atoi(pos),
+						EHT_PHY_CAP7_MU_BF_BW_LESS_OR_EQUAL_80);
+	} else if (os_strcmp(buf, "eht_phy_mu_beamformer_bw_160_mhz") == 0) {
+		cap_idx->eht_phy_mu_beamformer_bw_160_mhz = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP7_IDX] |= set_he_cap(atoi(pos),
+						EHT_PHY_CAP7_MU_BF_BW_EQUAL_160);
+	} else if (os_strcmp(buf, "eht_phy_mu_beamformer_bw_320_mhz") == 0) {
+		cap_idx->eht_phy_mu_beamformer_bw_320_mhz = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP7_IDX] |= set_he_cap(atoi(pos),
+						EHT_PHY_CAP7_MU_BF_BW_EQUAL_320);
+	} else if (os_strcmp(buf, "eht_phy_tb_sounding_feedback_rate_limit") == 0) {
+		cap_idx->eht_phy_tb_sounding_feedback_rate_limit = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP7_IDX] |= set_he_cap(atoi(pos),
+						EHT_PHY_CAP7_TB_SOUNDING_FEEDBACK_RATE_LIMIT);
+	} else if (os_strcmp(buf, "eht_phy_rx_1024_qam_wider_bw_dl_ofdma") == 0) {
+		cap_idx->eht_phy_rx_1024_qam_wider_bw_dl_ofdma = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP8_IDX] |= set_he_cap(atoi(pos),
+						EHT_PHY_CAP8_RX_1024_QAM_WIDER_BW_DL_OFDMA);
+	} else if (os_strcmp(buf, "eht_phy_rx_4096_qam_wider_bw_dl_ofdma") == 0) {
+		cap_idx->eht_phy_rx_4096_qam_wider_bw_dl_ofdma = 1;
+		eht_phy_capab_info[EHT_PHYCAP_CAP8_IDX] |= set_he_cap(atoi(pos),
+						EHT_PHY_CAP8_RX_4096_QAM_WIDER_BW_DL_OFDMA);
+	} else
+		return 0;
+
+	return 1;
+}
+
+static int
+mxl_conf_fill_eht_txrx_mcs_support(struct mxl_hostapd_config *conf, const char *buf, char *pos)
+{
+	u8 *eht_txrx_mcs_support = conf->eht_capab_dbg.optional;
+	struct eht_override_hw_capab *cap_idx = &conf->eht_override_hw_capab;
+
+	if (os_strcmp(buf, "eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_0_9") == 0) {
+		cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_0_9 = 1;
+		eht_txrx_mcs_support[EHT_MCS_LT_EQ_80_0_9] |= atoi(pos) & 0x0f;
+		wpa_printf(MSG_INFO, "EHT config txrx_mcs_support rx %x", eht_txrx_mcs_support[EHT_MCS_LT_EQ_80_0_9]);
+	} else if (os_strcmp(buf, "eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_0_9") == 0) {
+		cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_0_9 = 1;
+		eht_txrx_mcs_support[EHT_MCS_LT_EQ_80_0_9] |= ((atoi(pos) << 4) & 0xf0);
+		wpa_printf(MSG_INFO, "EHT config txrx_mcs_support tx %x", eht_txrx_mcs_support[EHT_MCS_LT_EQ_80_0_9]);
+	} else if (os_strcmp(buf, "eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_10_11") == 0) {
+		cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_10_11 = 1;
+		eht_txrx_mcs_support[EHT_MCS_LT_EQ_80_10_11] |= atoi(pos) & 0x0f;
+	} else if (os_strcmp(buf, "eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_10_11") == 0) {
+		cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_10_11 = 1;
+		eht_txrx_mcs_support[EHT_MCS_LT_EQ_80_10_11] |= (atoi(pos) << 4) & 0xf0;
+	} else if (os_strcmp(buf, "eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_12_13") == 0) {
+		cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_12_13 = 1;
+		eht_txrx_mcs_support[EHT_MCS_LT_EQ_80_12_13] |= atoi(pos) & 0x0f;
+	} else if (os_strcmp(buf, "eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_12_13") == 0) {
+		cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_12_13 = 1;
+		eht_txrx_mcs_support[EHT_MCS_LT_EQ_80_12_13] |= (atoi(pos) << 4) & 0xf0;
+	} else if (os_strcmp(buf, "eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_0_9") == 0) {
+		cap_idx->eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_0_9 = 1;
+		eht_txrx_mcs_support[EHT_MCS_160_0_9] |= atoi(pos) & 0x0f;
+	} else if (os_strcmp(buf, "eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_0_9") == 0) {
+		cap_idx->eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_0_9 = 1;
+		eht_txrx_mcs_support[EHT_MCS_160_0_9] |= (atoi(pos) << 4) & 0xf0;
+	} else if (os_strcmp(buf, "eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_10_11") == 0) {
+		cap_idx->eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_10_11 = 1;
+		eht_txrx_mcs_support[EHT_MCS_160_10_11] |= atoi(pos) & 0x0f;
+	} else if (os_strcmp(buf, "eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_10_11") == 0) {
+		cap_idx->eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_10_11 = 1;
+		eht_txrx_mcs_support[EHT_MCS_160_10_11] |= (atoi(pos) << 4) & 0xf0;
+	} else if (os_strcmp(buf, "eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_12_13") == 0) {
+		cap_idx->eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_12_13 = 1;
+		eht_txrx_mcs_support[EHT_MCS_160_12_13] |= atoi(pos) & 0x0f;
+	} else if (os_strcmp(buf, "eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_12_13") == 0) {
+		cap_idx->eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_12_13 = 1;
+		eht_txrx_mcs_support[EHT_MCS_160_12_13] |= (atoi(pos) << 4) & 0xf0;
+	} else if (os_strcmp(buf, "eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_0_9") == 0) {
+		cap_idx->eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_0_9 = 1;
+		eht_txrx_mcs_support[EHT_MCS_320_0_9] |= atoi(pos) & 0x0f;
+	} else if (os_strcmp(buf, "eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_0_9") == 0) {
+		cap_idx->eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_0_9 = 1;
+		eht_txrx_mcs_support[EHT_MCS_320_0_9] |= (atoi(pos) << 4) & 0xf0;
+	} else if (os_strcmp(buf, "eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_10_11") == 0) {
+		cap_idx->eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_10_11 = 1;
+		eht_txrx_mcs_support[EHT_MCS_320_10_11] |= atoi(pos) & 0x0f;
+	} else if (os_strcmp(buf, "eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_10_11") == 0) {
+		cap_idx->eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_10_11 = 1;
+		eht_txrx_mcs_support[EHT_MCS_320_10_11] |= (atoi(pos) << 4) & 0xf0;
+	} else if (os_strcmp(buf, "eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_12_13") == 0) {
+		cap_idx->eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_12_13 = 1;
+		eht_txrx_mcs_support[EHT_MCS_320_12_13] |= atoi(pos) & 0x0f;
+	} else if (os_strcmp(buf, "eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_12_13") == 0) {
+		cap_idx->eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_12_13 = 1;
+		eht_txrx_mcs_support[EHT_MCS_320_12_13] |= (atoi(pos) << 4) & 0xf0;
+	} else
+		return 0;
+
+	return 1;
+}
+
+static int
+mxl_conf_fill_eht_ppe_thresholds(struct mxl_hostapd_config *conf, const char *buf, char *pos)
+{
+	u8 *eht_ppe_thresholds = conf->eht_capab_dbg.optional + EHT_MCS_NSS_CAPAB_LEN;
+	struct eht_override_hw_capab *cap_idx = &conf->eht_override_hw_capab;
+
+	if (os_strcmp(buf, "eht_ppe_thresholds_nss") == 0) {
+		cap_idx->eht_ppe_thresholds_nss = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP0_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP0_NSS_M1);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ru_index_bitmask") == 0) {
+		cap_idx->eht_ppe_thresholds_ru_index_bitmask = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP0_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP0_RU_INDEX_BITMASK);
+		eht_ppe_thresholds[EHT_PPE_CAP1_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP1_RU_INDEX_BITMASK);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss1_for_ru0") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss1_for_ru0 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP1_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP1_PPETX_FOR_NSS1_FOR_RU0);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss1_for_ru0") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss1_for_ru0 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP1_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP1_PPET8_FOR_NSS1_FOR_RU0);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss1_for_ru1") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss1_for_ru1 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP1_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP1_PPETX_FOR_NSS1_FOR_RU1);
+		eht_ppe_thresholds[EHT_PPE_CAP2_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP2_PPETX_FOR_NSS1_FOR_RU1);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss1_for_ru1") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss1_for_ru1 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP2_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP2_PPET8_FOR_NSS1_FOR_RU1);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss1_for_ru2") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss1_for_ru2 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP2_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP2_PPETX_FOR_NSS1_FOR_RU2);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss1_for_ru2") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss1_for_ru2 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP3_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP3_PPET8_FOR_NSS1_FOR_RU2);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss1_for_ru3") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss1_for_ru3 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP3_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP3_PPETX_FOR_NSS1_FOR_RU3);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss1_for_ru3") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss1_for_ru3 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP3_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP3_PPET8_FOR_NSS1_FOR_RU3);
+		eht_ppe_thresholds[EHT_PPE_CAP4_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP4_PPET8_FOR_NSS1_FOR_RU3);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss1_for_ru4") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss1_for_ru4 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP4_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP4_PPETX_FOR_NSS1_FOR_RU4);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss1_for_ru4") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss1_for_ru4 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP4_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP4_PPET8_FOR_NSS1_FOR_RU4);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss2_for_ru0") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss2_for_ru0 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP4_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP4_PPETX_FOR_NSS2_FOR_RU0);
+		eht_ppe_thresholds[EHT_PPE_CAP5_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP5_PPETX_FOR_NSS2_FOR_RU0);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss2_for_ru0") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss2_for_ru0 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP5_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP5_PPET8_FOR_NSS2_FOR_RU0);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss2_for_ru1") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss2_for_ru1 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP5_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP5_PPETX_FOR_NSS2_FOR_RU1);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss2_for_ru1") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss2_for_ru1 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP6_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP6_PPET8_FOR_NSS2_FOR_RU1);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss2_for_ru2") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss2_for_ru2 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP6_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP6_PPETX_FOR_NSS2_FOR_RU2);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss2_for_ru2") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss2_for_ru2 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP6_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP6_PPET8_FOR_NSS2_FOR_RU2);
+		eht_ppe_thresholds[EHT_PPE_CAP7_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP7_PPET8_FOR_NSS2_FOR_RU2);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss2_for_ru3") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss2_for_ru3 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP7_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP7_PPETX_FOR_NSS2_FOR_RU3);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss2_for_ru3") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss2_for_ru3 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP7_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP7_PPET8_FOR_NSS2_FOR_RU3);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss2_for_ru4") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss2_for_ru4 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP7_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP7_PPETX_FOR_NSS2_FOR_RU4);
+		eht_ppe_thresholds[EHT_PPE_CAP8_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP8_PPETX_FOR_NSS2_FOR_RU4);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss2_for_ru4") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss2_for_ru4 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP8_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP8_PPET8_FOR_NSS2_FOR_RU4);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss3_for_ru0") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss3_for_ru0 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP8_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP8_PPETX_FOR_NSS3_FOR_RU0);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss3_for_ru0") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss3_for_ru0 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP9_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP9_PPET8_FOR_NSS3_FOR_RU0);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss3_for_ru1") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss3_for_ru1 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP9_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP9_PPETX_FOR_NSS3_FOR_RU1);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss3_for_ru1") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss3_for_ru1 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP9_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP9_PPET8_FOR_NSS3_FOR_RU1);
+		eht_ppe_thresholds[EHT_PPE_CAP10_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP10_PPET8_FOR_NSS3_FOR_RU1);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss3_for_ru2") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss3_for_ru2 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP10_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP10_PPETX_FOR_NSS3_FOR_RU2);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss3_for_ru2") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss3_for_ru2 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP10_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP10_PPET8_FOR_NSS3_FOR_RU2);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss3_for_ru3") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss3_for_ru3 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP10_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP10_PPETX_FOR_NSS3_FOR_RU3);
+		eht_ppe_thresholds[EHT_PPE_CAP11_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP11_PPETX_FOR_NSS3_FOR_RU3);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss3_for_ru3") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss3_for_ru3 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP11_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP11_PPET8_FOR_NSS3_FOR_RU3);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss3_for_ru4") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss3_for_ru4 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP11_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP11_PPETX_FOR_NSS3_FOR_RU4);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss3_for_ru4") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss3_for_ru4 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP12_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP12_PPET8_FOR_NSS3_FOR_RU4);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss4_for_ru0") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss4_for_ru0 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP12_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP12_PPETX_FOR_NSS4_FOR_RU0);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss4_for_ru0") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss4_for_ru0 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP12_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP12_PPET8_FOR_NSS4_FOR_RU0);
+		eht_ppe_thresholds[EHT_PPE_CAP13_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP13_PPET8_FOR_NSS4_FOR_RU0);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss4_for_ru1") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss4_for_ru1 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP13_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP13_PPETX_FOR_NSS4_FOR_RU1);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss4_for_ru1") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss4_for_ru1 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP13_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP13_PPET8_FOR_NSS4_FOR_RU1);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss4_for_ru2") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss4_for_ru2 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP13_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP13_PPETX_FOR_NSS4_FOR_RU2);
+		eht_ppe_thresholds[EHT_PPE_CAP14_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP14_PPETX_FOR_NSS4_FOR_RU2);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss4_for_ru2") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss4_for_ru2 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP14_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP14_PPET8_FOR_NSS4_FOR_RU2);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss4_for_ru3") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss4_for_ru3 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP14_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP14_PPETX_FOR_NSS4_FOR_RU3);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss4_for_ru3") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss4_for_ru3 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP15_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP15_PPET8_FOR_NSS4_FOR_RU3);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppetx_for_nss4_for_ru4") == 0) {
+		cap_idx->eht_ppe_thresholds_ppetx_for_nss4_for_ru4 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP15_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP15_PPETX_FOR_NSS4_FOR_RU4);
+	} else if (os_strcmp(buf, "eht_ppe_thresholds_ppet8_for_nss4_for_ru4") == 0) {
+		cap_idx->eht_ppe_thresholds_ppet8_for_nss4_for_ru4 = 1;
+		eht_ppe_thresholds[EHT_PPE_CAP15_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP15_PPET8_FOR_NSS4_FOR_RU4);
+		eht_ppe_thresholds[EHT_PPE_CAP16_IDX] |= set_he_cap(atoi(pos), EHT_PPE_CAP16_PPET8_FOR_NSS4_FOR_RU4);
+	} else
+		return 0;
+
+	return 1;
+}
+
+static int
+mxl_conf_fill_be(struct hostapd_config *conf, const char *buf, char *pos, int line)
+{
+	struct mxl_hostapd_config *mxl_conf = &conf->mxl_conf;
+
+	if (os_strcmp(buf, "eht_oper_centr_freq_seg1_idx") == 0) {
+	} else if (os_strcmp(buf, "disabled_subchannel_bitmap") == 0) {
+		conf->punct_bitmap = atoi(pos);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_1ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[0],
+					   atoi(pos), EHT_MCS_NSS_FOR_1SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_2ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[0],
+					   atoi(pos), EHT_MCS_NSS_FOR_2SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_3ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[0],
+					   atoi(pos), EHT_MCS_NSS_FOR_3SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_4ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[0],
+					   atoi(pos), EHT_MCS_NSS_FOR_4SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_5ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[1],
+					   atoi(pos), EHT_MCS_NSS_FOR_5SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_6ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[1],
+					   atoi(pos), EHT_MCS_NSS_FOR_6SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_7ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[1],
+					   atoi(pos), EHT_MCS_NSS_FOR_7SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_8ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[1],
+					   atoi(pos), EHT_MCS_NSS_FOR_8SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_9ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[2],
+					   atoi(pos), EHT_MCS_NSS_FOR_9SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_10ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[2],
+					   atoi(pos), EHT_MCS_NSS_FOR_10SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_11ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[2],
+					   atoi(pos), EHT_MCS_NSS_FOR_11SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_12ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[2],
+					   atoi(pos), EHT_MCS_NSS_FOR_12SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_13ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[3],
+					   atoi(pos), EHT_MCS_NSS_FOR_13SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_14ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[3],
+					   atoi(pos), EHT_MCS_NSS_FOR_14SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_15ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[3],
+					   atoi(pos), EHT_MCS_NSS_FOR_15SS);
+	} else if (os_strcmp(buf, "eht_operation_max_mcs_for_16ss") == 0) {
+		clr_set_he_cap(&mxl_conf->basic_eht_mcs_nss_set[3],
+					   atoi(pos), EHT_MCS_NSS_FOR_16SS);
+	} else if (os_strcmp(buf, "enable_eht_debug_mode") == 0) {
+		mxl_conf->enable_eht_debug_mode = atoi(pos);
+	} else if (os_strcmp(buf, "eht_operation_default_pe_duration") == 0) {
+		int val = atoi(pos);
+		if (!IS_VALID_BOOL_RANGE(val)) {
+			wpa_printf(MSG_ERROR, "Line %d: eht_operation_default_pe_duration = %d",
+				   line, val);
+			return 0;
+		}
+		mxl_conf->eht_default_pe_duration = val;
+	} else if (mxl_conf_fill_eht_mac_capab_info(mxl_conf, buf, pos)) {
+	} else if (mxl_conf_fill_eht_phy_capab_info(mxl_conf, buf, pos)) {
+	} else if (mxl_conf_fill_eht_txrx_mcs_support(mxl_conf, buf, pos)) {
+	} else if (mxl_conf_fill_eht_ppe_thresholds(mxl_conf, buf, pos)) {
+	} else
+		return 0;
+
+	return 1;
+}
+
+#endif /* CONFIG_IEEE80211BE */
+
 int mxl_hostapd_config_fill (struct hostapd_config *conf,
 					struct hostapd_bss_config *bss,
 					const char *buf, char *pos, int line)
@@ -884,6 +1419,9 @@ int mxl_hostapd_config_fill (struct hostapd_config *conf,
 	} else if (mxl_conf_fill_he_txrx_mcs_support(mxl_conf, buf, pos)) {
 	} else if (mxl_conf_fill_he_ppe_thresholds(mxl_conf, buf, pos)) {
 #endif /* CONFIG_IEEE80211AX */
+#ifdef CONFIG_IEEE80211BE
+	} else if (mxl_conf_fill_be(conf, buf, pos, line)) {
+#endif /* CONFIG_IEEE80211BE */
 	} else if (os_strcmp(buf, "dynamic_edca") == 0) {
 		int val = atoi(pos);
 		if (!IS_VALID_BOOL_RANGE(val)) {
@@ -936,6 +1474,10 @@ void mxl_hostapd_config_defaults(struct hostapd_config *conf)
 	conf->adv_proto_query_resp_len = ADV_PROTO_QUERY_RESP_LEN_DEFAULT;
 	mxl_conf->event_cache_interval = 1;
 
+#ifdef CONFIG_IEEE80211BE
+	mxl_conf->basic_eht_mcs_nss_set[0] = set_he_cap(1, EHT_MCS_NSS_FOR_1SS);
+#endif /* CONFIG_IEEE80211BE */
+
 }
 
 void mxl_hostapd_config_free_bss(struct hostapd_bss_config *bss)
diff --git a/src/ap/ieee802_11_eht.c b/src/ap/ieee802_11_eht.c
index e62ae776b..008f701c9 100644
--- a/src/ap/ieee802_11_eht.c
+++ b/src/ap/ieee802_11_eht.c
@@ -13,6 +13,9 @@
 #include "hostapd.h"
 #include "sta_info.h"
 #include "ieee802_11.h"
+#ifdef CONFIG_VENDOR_MXL
+#include "mxl_config.h"
+#endif /* CONFIG_VENDOR_MXL */
 
 
 static u16 ieee80211_eht_ppet_size(u16 ppe_thres_hdr, const u8 *phy_cap_info)
@@ -156,6 +159,9 @@ u8 * hostapd_eid_eht_capab(struct hostapd_data *hapd, u8 *eid,
 	if (!is_6ghz_op_class(hapd->iconf->op_class))
 		cap->phy_cap[EHT_PHYCAP_320MHZ_IN_6GHZ_SUPPORT_IDX] &=
 			~EHT_PHYCAP_320MHZ_IN_6GHZ_SUPPORT_MASK;
+
+#ifndef CONFIG_VENDOR_MXL
+	/* todo: ask community about why these driver's caps are discarded such way */
 	if (!hapd->iface->conf->eht_phy_capab.su_beamformer)
 		cap->phy_cap[EHT_PHYCAP_SU_BEAMFORMER_IDX] &=
 			~EHT_PHYCAP_SU_BEAMFORMER;
@@ -167,6 +173,7 @@ u8 * hostapd_eid_eht_capab(struct hostapd_data *hapd, u8 *eid,
 	if (!hapd->iface->conf->eht_phy_capab.mu_beamformer)
 		cap->phy_cap[EHT_PHYCAP_MU_BEAMFORMER_IDX] &=
 			~EHT_PHYCAP_MU_BEAMFORMER_MASK;
+#endif /* CONFIG_VENDOR_MXL */
 
 	pos = cap->optional;
 
@@ -226,6 +233,26 @@ u8 * hostapd_eid_eht_operation(struct hostapd_data *hapd, u8 *eid)
 	oper = (struct ieee80211_eht_operation *) pos;
 	oper->oper_params = 0;
 
+#ifdef CONFIG_VENDOR_MXL
+	/* ToDo:
+	 * 1. upstream EHT PE duration
+	 * 2. upstream EHT-MCS max Nss
+	 */
+	oper->oper_params = 0;
+
+	if (hapd->iconf->mxl_conf.eht_default_pe_duration)
+		oper->oper_params |= EHT_OPER_DEFAULT_PE_DURATION;
+
+	oper->basic_eht_mcs_nss_set[0] = hapd->iconf->mxl_conf.basic_eht_mcs_nss_set[0];
+	oper->basic_eht_mcs_nss_set[1] = hapd->iconf->mxl_conf.basic_eht_mcs_nss_set[1];
+	oper->basic_eht_mcs_nss_set[2] = hapd->iconf->mxl_conf.basic_eht_mcs_nss_set[2];
+	oper->basic_eht_mcs_nss_set[3] = hapd->iconf->mxl_conf.basic_eht_mcs_nss_set[3];
+
+	if (!eht_oper_info_present)
+		return pos + elen;
+
+	oper->oper_params |= EHT_OPER_INFO_PRESENT;
+#else
 	/* TODO: Fill in appropriate EHT-MCS max Nss information */
 	oper->basic_eht_mcs_nss_set[0] = 0x11;
 	oper->basic_eht_mcs_nss_set[1] = 0x00;
@@ -236,6 +263,8 @@ u8 * hostapd_eid_eht_operation(struct hostapd_data *hapd, u8 *eid)
 		return pos + elen;
 
 	oper->oper_params = EHT_OPER_INFO_PRESENT;
+#endif /* CONFIG_VENDOR_MXL */
+
 	seg0 = hostapd_get_oper_centr_freq_seg0_idx(conf);
 
 	switch (chwidth) {
diff --git a/src/ap/mxl_config.h b/src/ap/mxl_config.h
index 01e18386c..54d7d2012 100644
--- a/src/ap/mxl_config.h
+++ b/src/ap/mxl_config.h
@@ -135,6 +135,121 @@ struct he_override_hw_capab {
 	u8  he_cap_non_adv_punc_pream_rx_support_override;
 };
 
+struct eht_override_hw_capab {
+	int eht_mac_epcs_prio_access;
+	int eht_mac_eht_om_control;
+	int eht_mac_trig_txop_sharing_mode1;
+	int eht_mac_trig_txop_sharing_mode2;
+	int eht_mac_restricted_twt;
+	int eht_mac_scs_traffic_desc;
+	int eht_mac_max_mpdu_len;
+	int eht_mac_max_ampdu_len_exp_ext;
+	int eht_mac_trs_support;
+	int eht_mac_txop_return_support_sharing_mode2;
+	int eht_phy_320_mhz_in_6_ghz;
+	int eht_phy_242_ru_in_bw_above_20_mhz;
+	int eht_phy_ndp_4x_eht_ltf_and_3_2_us_gi;
+	int eht_phy_partial_bw_ul_mu_mimo;
+	int eht_phy_su_beamformer;
+	int eht_phy_su_beamformee;
+	int eht_phy_beamformee_ss_80_mhz_or_below;
+	int eht_phy_beamformee_ss_160_mhz;
+	int eht_phy_beamformee_ss_320_mhz;
+	int eht_phy_num_sounding_dim_80_mhz_or_below;
+	int eht_phy_num_sounding_dim_160_mhz;
+	int eht_phy_num_sounding_dim_320_mhz;
+	int eht_phy_ng_16_su_feedback;
+	int eht_phy_ng_16_mu_feedback;
+	int eht_phy_codebook_size_4_2_su_fb;
+	int eht_phy_codebook_size_75_5_mu_fb;
+	int eht_phy_trig_su_bf_fb;
+	int eht_phy_trig_mu_bf_partial_bw_fb;
+	int eht_phy_trig_cqi_fb;
+	int eht_phy_partial_bw_dl_mu_mimo;
+	int eht_phy_psr_based_sr;
+	int eht_phy_power_boost_factor;
+	int eht_phy_eht_mu_ppdu_with_4x_eht_ltf_and_0_8_us_gi;
+	int eht_phy_max_nc;
+	int eht_phy_non_trig_cqi_fb;
+	int eht_phy_tx_1024_qam_and_4096_qam_below_242_ru;
+	int eht_phy_rx_1024_qam_and_4096_qam_below_242_ru;
+	int eht_phy_ppe_thresholds_present;
+	int eht_phy_common_nominal_pkt_pad;
+	int eht_phy_max_num_of_supported_eht_ltfs;
+	int eht_phy_mcs_15;
+	int eht_phy_eht_dup_in_6_ghz;
+	int eht_phy_20_mhz_operating_sta_rx_ndp_with_wider_bw;
+	int eht_phy_non_ofdma_ul_mu_mimo_bw_80_mhz_or_below;
+	int eht_phy_non_ofdma_ul_mu_mimo_bw_160_mhz;
+	int eht_phy_non_ofdma_ul_mu_mimo_bw_320_mhz;
+	int eht_phy_mu_beamformer_bw_80_mhz_or_below;
+	int eht_phy_mu_beamformer_bw_160_mhz;
+	int eht_phy_mu_beamformer_bw_320_mhz;
+	int eht_phy_tb_sounding_feedback_rate_limit;
+	int eht_phy_rx_1024_qam_wider_bw_dl_ofdma;
+	int eht_phy_rx_4096_qam_wider_bw_dl_ofdma;
+	int eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_0_9;
+	int eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_0_9;
+	int eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_10_11;
+	int eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_10_11;
+	int eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_12_13;
+	int eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_12_13;
+	int eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_0_9;
+	int eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_0_9;
+	int eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_10_11;
+	int eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_10_11;
+	int eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_12_13;
+	int eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_12_13;
+	int eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_0_9;
+	int eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_0_9;
+	int eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_10_11;
+	int eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_10_11;
+	int eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_12_13;
+	int eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_12_13;
+	int eht_ppe_thresholds_nss;
+	int eht_ppe_thresholds_ru_index_bitmask;
+	int eht_ppe_thresholds_ppetx_for_nss1_for_ru0;
+	int eht_ppe_thresholds_ppetx_for_nss1_for_ru1;
+	int eht_ppe_thresholds_ppetx_for_nss1_for_ru2;
+	int eht_ppe_thresholds_ppetx_for_nss1_for_ru3;
+	int eht_ppe_thresholds_ppetx_for_nss1_for_ru4;
+	int eht_ppe_thresholds_ppetx_for_nss2_for_ru0;
+	int eht_ppe_thresholds_ppetx_for_nss2_for_ru1;
+	int eht_ppe_thresholds_ppetx_for_nss2_for_ru2;
+	int eht_ppe_thresholds_ppetx_for_nss2_for_ru3;
+	int eht_ppe_thresholds_ppetx_for_nss2_for_ru4;
+	int eht_ppe_thresholds_ppetx_for_nss3_for_ru0;
+	int eht_ppe_thresholds_ppetx_for_nss3_for_ru1;
+	int eht_ppe_thresholds_ppetx_for_nss3_for_ru2;
+	int eht_ppe_thresholds_ppetx_for_nss3_for_ru3;
+	int eht_ppe_thresholds_ppetx_for_nss3_for_ru4;
+	int eht_ppe_thresholds_ppetx_for_nss4_for_ru0;
+	int eht_ppe_thresholds_ppetx_for_nss4_for_ru1;
+	int eht_ppe_thresholds_ppetx_for_nss4_for_ru2;
+	int eht_ppe_thresholds_ppetx_for_nss4_for_ru3;
+	int eht_ppe_thresholds_ppetx_for_nss4_for_ru4;
+	int eht_ppe_thresholds_ppet8_for_nss1_for_ru0;
+	int eht_ppe_thresholds_ppet8_for_nss1_for_ru1;
+	int eht_ppe_thresholds_ppet8_for_nss1_for_ru2;
+	int eht_ppe_thresholds_ppet8_for_nss1_for_ru3;
+	int eht_ppe_thresholds_ppet8_for_nss1_for_ru4;
+	int eht_ppe_thresholds_ppet8_for_nss2_for_ru0;
+	int eht_ppe_thresholds_ppet8_for_nss2_for_ru1;
+	int eht_ppe_thresholds_ppet8_for_nss2_for_ru2;
+	int eht_ppe_thresholds_ppet8_for_nss2_for_ru3;
+	int eht_ppe_thresholds_ppet8_for_nss2_for_ru4;
+	int eht_ppe_thresholds_ppet8_for_nss3_for_ru0;
+	int eht_ppe_thresholds_ppet8_for_nss3_for_ru1;
+	int eht_ppe_thresholds_ppet8_for_nss3_for_ru2;
+	int eht_ppe_thresholds_ppet8_for_nss3_for_ru3;
+	int eht_ppe_thresholds_ppet8_for_nss3_for_ru4;
+	int eht_ppe_thresholds_ppet8_for_nss4_for_ru0;
+	int eht_ppe_thresholds_ppet8_for_nss4_for_ru1;
+	int eht_ppe_thresholds_ppet8_for_nss4_for_ru2;
+	int eht_ppe_thresholds_ppet8_for_nss4_for_ru3;
+	int eht_ppe_thresholds_ppet8_for_nss4_for_ru4;
+};
+
 typedef u8 macaddr[ETH_ALEN];
 
 /**
@@ -170,6 +285,13 @@ struct mxl_hostapd_config {
 	struct ieee80211_he_capabilities he_capab_dbg;
 #endif /* CONFIG_IEEE80211AX */
 	int dynamic_edca;
+#ifdef CONFIG_IEEE80211BE
+	struct eht_override_hw_capab eht_override_hw_capab;
+	u8 basic_eht_mcs_nss_set[4];
+	u8 eht_default_pe_duration;
+	u8 enable_eht_debug_mode;
+	struct ieee80211_eht_capabilities eht_capab_dbg;
+#endif /* CONFIG_IEEE80211BE */
 };
 
 /**
diff --git a/src/ap/mxl_hostapd.c b/src/ap/mxl_hostapd.c
index 3dbb161b6..5dbb46328 100644
--- a/src/ap/mxl_hostapd.c
+++ b/src/ap/mxl_hostapd.c
@@ -818,6 +818,581 @@ static void mxl_hostapd_send_non_adv_he_cap (struct hostapd_data *hapd)
 }
 #endif /* CONFIG_IEEE80211AX */
 
+#ifdef CONFIG_IEEE80211BE
+static void
+mxl_hostapd_set_debug_eht_mac_capab_info(u8 *debug_eht_mac, u8 *conf_eht_mac,
+			struct eht_override_hw_capab *cap_idx)
+{
+	if (cap_idx->eht_mac_epcs_prio_access)
+		mxl_clr_set_he_cap(&debug_eht_mac[EHT_MACCAP_CAP0_IDX],
+		    conf_eht_mac[EHT_MACCAP_CAP0_IDX], EHT_MAC_CAP0_EPCS_PRIO_ACCESS);
+
+	if (cap_idx->eht_mac_eht_om_control)
+		mxl_clr_set_he_cap(&debug_eht_mac[EHT_MACCAP_CAP0_IDX],
+		    conf_eht_mac[EHT_MACCAP_CAP0_IDX], EHT_MAC_CAP0_OM_CONTROL);
+
+	if (cap_idx->eht_mac_trig_txop_sharing_mode1)
+		mxl_clr_set_he_cap(&debug_eht_mac[EHT_MACCAP_CAP0_IDX],
+		    conf_eht_mac[EHT_MACCAP_CAP0_IDX], EHT_MAC_CAP0_TRIG_TXOP_SHARING_MODE1);
+
+	if (cap_idx->eht_mac_trig_txop_sharing_mode2)
+		mxl_clr_set_he_cap(&debug_eht_mac[EHT_MACCAP_CAP0_IDX],
+		    conf_eht_mac[EHT_MACCAP_CAP0_IDX], EHT_MAC_CAP0_TRIG_TXOP_SHARING_MODE2);
+
+	if (cap_idx->eht_mac_restricted_twt)
+		mxl_clr_set_he_cap(&debug_eht_mac[EHT_MACCAP_CAP0_IDX],
+		    conf_eht_mac[EHT_MACCAP_CAP0_IDX], EHT_MAC_CAP0_RESTRICTED_TWT);
+
+	if (cap_idx->eht_mac_scs_traffic_desc)
+		mxl_clr_set_he_cap(&debug_eht_mac[EHT_MACCAP_CAP0_IDX],
+		    conf_eht_mac[EHT_MACCAP_CAP0_IDX], EHT_MAC_CAP0_SCS_TRAFFIC_DESC);
+
+	if (cap_idx->eht_mac_max_mpdu_len)
+		mxl_clr_set_he_cap(&debug_eht_mac[EHT_MACCAP_CAP0_IDX],
+		    conf_eht_mac[EHT_MACCAP_CAP0_IDX], EHT_MAC_CAP0_MAX_MPDU_LEN);
+
+	if (cap_idx->eht_mac_max_ampdu_len_exp_ext)
+		mxl_clr_set_he_cap(&debug_eht_mac[EHT_MACCAP_CAP1_IDX],
+		    conf_eht_mac[EHT_MACCAP_CAP1_IDX], EHT_MAC_CAP1_MAX_AMPDU_LEN_EXP_EXT);
+
+	if (cap_idx->eht_mac_trs_support)
+		mxl_clr_set_he_cap(&debug_eht_mac[EHT_MACCAP_CAP1_IDX],
+		    conf_eht_mac[EHT_MACCAP_CAP1_IDX], EHT_MAC_CAP1_TRS_SUPPORT);
+
+	if (cap_idx->eht_mac_txop_return_support_sharing_mode2)
+		mxl_clr_set_he_cap(&debug_eht_mac[EHT_MACCAP_CAP1_IDX],
+		    conf_eht_mac[EHT_MACCAP_CAP1_IDX], EHT_MAC_CAP1_TXOP_RETURN_SUPPORT_SHARING_MODE2);
+}
+
+static void
+mxl_hostapd_set_debug_eht_phy_capab_info(u8 *debug_eht_phy, u8 *conf_eht_phy,
+			struct eht_override_hw_capab *cap_idx)
+{
+	if (cap_idx->eht_phy_320_mhz_in_6_ghz)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP0_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP0_IDX], EHT_PHY_CAP0_320MHZ_IN_6GHZ);
+
+	if (cap_idx->eht_phy_242_ru_in_bw_above_20_mhz)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP0_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP0_IDX], EHT_PHY_CAP0_242RU_BW_ABOVE_20MHZ);
+
+	if (cap_idx->eht_phy_ndp_4x_eht_ltf_and_3_2_us_gi)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP0_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP0_IDX], EHT_PHY_CAP0_NDP_4X_LTF_3_2_GI);
+
+	if (cap_idx->eht_phy_partial_bw_ul_mu_mimo)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP0_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP0_IDX], EHT_PHY_CAP0_PARTIAL_BW_UL_MU_MIMO);
+
+	if (cap_idx->eht_phy_su_beamformer)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP0_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP0_IDX], EHT_PHY_CAP0_SU_BEAMFORMER);
+
+	if (cap_idx->eht_phy_su_beamformee)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP0_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP0_IDX], EHT_PHY_CAP0_SU_BEAMFORMEE);
+
+	if (cap_idx->eht_phy_beamformee_ss_80_mhz_or_below) {
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP0_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP0_IDX], EHT_PHY_CAP0_SU_BEAMFORMEE_SS_LESS_OR_EQUAL_80);
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP1_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP1_IDX], EHT_PHY_CAP1_SU_BEAMFORMEE_SS_LESS_OR_EQUAL_80);
+	}
+
+	if (cap_idx->eht_phy_beamformee_ss_160_mhz)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP1_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP1_IDX], EHT_PHY_CAP1_SU_BEAMFORMEE_SS_EQUAL_160);
+
+	if (cap_idx->eht_phy_beamformee_ss_160_mhz)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP1_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP1_IDX], EHT_PHY_CAP1_SU_BEAMFORMEE_SS_EQUAL_320);
+
+	if (cap_idx->eht_phy_num_sounding_dim_80_mhz_or_below)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP2_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP2_IDX], EHT_PHY_CAP2_NUM_SOUNDING_DIM_80_OR_LESS);
+
+	if (cap_idx->eht_phy_num_sounding_dim_160_mhz)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP2_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP2_IDX], EHT_PHY_CAP2_NUM_SOUNDING_DIM_EQUAL_160);
+
+	if (cap_idx->eht_phy_num_sounding_dim_320_mhz) {
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP2_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP2_IDX], EHT_PHY_CAP2_NUM_SOUNDING_DIM_EQUAL_320);
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP3_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP3_IDX], EHT_PHY_CAP3_NUM_SOUNDING_DIM_EQUAL_320);
+	}
+
+	if (cap_idx->eht_phy_ng_16_su_feedback)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP3_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP3_IDX], EHT_PHY_CAP3_NG_16_SU_FEEDBACK);
+
+	if (cap_idx->eht_phy_ng_16_mu_feedback)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP3_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP3_IDX], EHT_PHY_CAP3_NG_16_MU_FEEDBACK);
+
+	if (cap_idx->eht_phy_codebook_size_4_2_su_fb)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP3_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP3_IDX], EHT_PHY_CAP3_CODEBOOK_SIZE_4_2_SU_FB);
+
+	if (cap_idx->eht_phy_codebook_size_75_5_mu_fb)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP3_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP3_IDX], EHT_PHY_CAP3_CODEBOOK_SIZE_75_5_MU_FB);
+
+	if (cap_idx->eht_phy_trig_su_bf_fb)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP3_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP3_IDX], EHT_PHY_CAP3_TRIG_SU_BF_FB);
+
+	if (cap_idx->eht_phy_trig_mu_bf_partial_bw_fb)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP3_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP3_IDX], EHT_PHY_CAP3_TRIG_MU_BF_PARTIAL_BW_FB);
+
+	if (cap_idx->eht_phy_trig_cqi_fb)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP3_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP3_IDX], EHT_PHY_CAP3_TRIG_CQI_FB);
+
+	if (cap_idx->eht_phy_partial_bw_dl_mu_mimo)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP4_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP4_IDX], EHT_PHY_CAP4_PARTIAL_BW_DL_MU_MIMO);
+
+	if (cap_idx->eht_phy_psr_based_sr)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP4_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP4_IDX], EHT_PHY_CAP4_PSR_BASED_SR_SUPPORT);
+
+	if (cap_idx->eht_phy_power_boost_factor)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP4_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP4_IDX], EHT_PHY_CAP4_POWER_BOOST_FACTOR_SUPPORT);
+
+	if (cap_idx->eht_phy_eht_mu_ppdu_with_4x_eht_ltf_and_0_8_us_gi)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP4_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP4_IDX], EHT_PHY_CAP4_MU_PPDU_4X_LTF_0_8_US_GI);
+
+	if (cap_idx->eht_phy_max_nc)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP4_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP4_IDX], EHT_PHY_CAP4_MAX_NC);
+
+	if (cap_idx->eht_phy_non_trig_cqi_fb)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP5_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP5_IDX], EHT_PHY_CAP5_NON_TRIG_CQI_FB);
+
+	if (cap_idx->eht_phy_tx_1024_qam_and_4096_qam_below_242_ru)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP5_IDX],
+		   conf_eht_phy[EHT_PHYCAP_CAP5_IDX], EHT_PHY_CAP5_TX_1024_QAM_4096_QAM_LESS_242_RU);
+
+	if (cap_idx->eht_phy_rx_1024_qam_and_4096_qam_below_242_ru)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP5_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP5_IDX], EHT_PHY_CAP5_RX_1024_QAM_4096_QAM_LESS_242_RU);
+
+	if (cap_idx->eht_phy_ppe_thresholds_present)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP5_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP5_IDX], EHT_PHY_CAP5_PPE_THRESHOLDS_PRESENT);
+
+	if (cap_idx->eht_phy_common_nominal_pkt_pad)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP5_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP5_IDX], EHT_PHY_CAP5_COMMON_NOMINAL_PKT_PAD);
+
+	if (cap_idx->eht_phy_max_num_of_supported_eht_ltfs) {
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP5_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP5_IDX], EHT_PHY_CAP5_MAX_NUM_SUPPORTED_EHT_LTFS);
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP6_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP6_IDX], EHT_PHY_CAP6_MAX_NUM_SUPPORTED_EHT_LTFS);
+	}
+
+	if (cap_idx->eht_phy_mcs_15)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP6_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP6_IDX], EHT_PHY_CAP6_SUPPORT_OF_MCS_15);
+
+	if (cap_idx->eht_phy_eht_dup_in_6_ghz)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP6_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP6_IDX], EHT_PHY_CAP6_SUPPORT_OF_EHT_DUP_6G);
+
+	if (cap_idx->eht_phy_20_mhz_operating_sta_rx_ndp_with_wider_bw)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP7_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP7_IDX], EHT_PHY_CAP7_20MHZ_OPER_STA_RX_NDP_WIDER_BW);
+
+	if (cap_idx->eht_phy_non_ofdma_ul_mu_mimo_bw_80_mhz_or_below)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP7_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP7_IDX], EHT_PHY_CAP7_NONOFDMA_UL_MUMIMO_BW_LESS_OR_EQUAL_80);
+
+	if (cap_idx->eht_phy_non_ofdma_ul_mu_mimo_bw_160_mhz)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP7_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP7_IDX], EHT_PHY_CAP7_NONOFDMA_UL_MUMIMO_BW_EQUAL_160);
+
+	if (cap_idx->eht_phy_non_ofdma_ul_mu_mimo_bw_320_mhz)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP7_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP7_IDX], EHT_PHY_CAP7_NONOFDMA_UL_MUMIMO_BW_EQUAL_320);
+
+	if (cap_idx->eht_phy_mu_beamformer_bw_80_mhz_or_below)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP7_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP7_IDX], EHT_PHY_CAP7_MU_BF_BW_LESS_OR_EQUAL_80);
+
+	if (cap_idx->eht_phy_mu_beamformer_bw_160_mhz)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP7_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP7_IDX], EHT_PHY_CAP7_MU_BF_BW_EQUAL_160);
+
+	if (cap_idx->eht_phy_mu_beamformer_bw_320_mhz)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP7_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP7_IDX], EHT_PHY_CAP7_MU_BF_BW_EQUAL_320);
+
+	if (cap_idx->eht_phy_tb_sounding_feedback_rate_limit)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP7_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP7_IDX], EHT_PHY_CAP7_TB_SOUNDING_FEEDBACK_RATE_LIMIT);
+
+	if (cap_idx->eht_phy_rx_1024_qam_wider_bw_dl_ofdma)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP8_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP8_IDX], EHT_PHY_CAP8_RX_1024_QAM_WIDER_BW_DL_OFDMA);
+
+	if (cap_idx->eht_phy_rx_4096_qam_wider_bw_dl_ofdma)
+		mxl_clr_set_he_cap(&debug_eht_phy[EHT_PHYCAP_CAP8_IDX],
+		    conf_eht_phy[EHT_PHYCAP_CAP8_IDX], EHT_PHY_CAP8_RX_4096_QAM_WIDER_BW_DL_OFDMA);
+}
+
+static void
+mxl_hostapd_set_debug_eht_txrx_mcs_support(u8 *debug_eht_txrx_mcs, u8 *conf_eht_txrx_mcs,
+				      struct eht_override_hw_capab *cap_idx)
+{
+	if (cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_0_9) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_LT_EQ_80_0_9], conf_eht_txrx_mcs[EHT_MCS_LT_EQ_80_0_9], EHT_MCS_RX_MASK);
+		wpa_printf(MSG_INFO, "EHT txrx_mcs_support rx %x conf %x", debug_eht_txrx_mcs[EHT_MCS_LT_EQ_80_0_9], conf_eht_txrx_mcs[EHT_MCS_LT_EQ_80_0_9]);
+	}
+	if (cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_0_9) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_LT_EQ_80_0_9], conf_eht_txrx_mcs[EHT_MCS_LT_EQ_80_0_9], EHT_MCS_TX_MASK);
+		wpa_printf(MSG_INFO, "EHT txrx_mcs_support tx %x conf %x", debug_eht_txrx_mcs[EHT_MCS_LT_EQ_80_0_9], conf_eht_txrx_mcs[EHT_MCS_LT_EQ_80_0_9]);
+	}
+	if (cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_10_11) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_LT_EQ_80_10_11], conf_eht_txrx_mcs[EHT_MCS_LT_EQ_80_10_11], EHT_MCS_RX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_10_11) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_LT_EQ_80_10_11], conf_eht_txrx_mcs[EHT_MCS_LT_EQ_80_10_11], EHT_MCS_TX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_rx_max_nss_eht_mcs_12_13) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_LT_EQ_80_12_13], conf_eht_txrx_mcs[EHT_MCS_LT_EQ_80_12_13], EHT_MCS_RX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_less_than_or_equal_80_mhz_tx_max_nss_eht_mcs_12_13) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_LT_EQ_80_12_13], conf_eht_txrx_mcs[EHT_MCS_LT_EQ_80_12_13], EHT_MCS_TX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_0_9) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_160_0_9], conf_eht_txrx_mcs[EHT_MCS_160_0_9], EHT_MCS_RX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_0_9) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_160_0_9], conf_eht_txrx_mcs[EHT_MCS_160_0_9], EHT_MCS_TX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_10_11) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_160_10_11], conf_eht_txrx_mcs[EHT_MCS_160_10_11], EHT_MCS_RX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_10_11) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_160_10_11], conf_eht_txrx_mcs[EHT_MCS_160_10_11], EHT_MCS_TX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_160_mhz_rx_max_nss_eht_mcs_12_13) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_160_12_13], conf_eht_txrx_mcs[EHT_MCS_160_12_13], EHT_MCS_RX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_160_mhz_tx_max_nss_eht_mcs_12_13) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_160_12_13], conf_eht_txrx_mcs[EHT_MCS_160_12_13], EHT_MCS_TX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_0_9) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_320_0_9], conf_eht_txrx_mcs[EHT_MCS_320_0_9], EHT_MCS_RX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_0_9) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_320_0_9], conf_eht_txrx_mcs[EHT_MCS_320_0_9], EHT_MCS_TX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_10_11) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_320_10_11], conf_eht_txrx_mcs[EHT_MCS_320_10_11], EHT_MCS_RX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_10_11) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_320_10_11], conf_eht_txrx_mcs[EHT_MCS_320_10_11], EHT_MCS_TX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_320_mhz_rx_max_nss_eht_mcs_12_13) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_320_12_13], conf_eht_txrx_mcs[EHT_MCS_320_12_13], EHT_MCS_RX_MASK);
+	}
+	if (cap_idx->eht_mcs_map_320_mhz_tx_max_nss_eht_mcs_12_13) {
+		mxl_clr_set_he_cap(&debug_eht_txrx_mcs[EHT_MCS_320_12_13], conf_eht_txrx_mcs[EHT_MCS_320_12_13], EHT_MCS_TX_MASK);
+	}
+}
+
+static void
+mxl_hostapd_set_debug_eht_ppe_thresholds(u8 *debug_eht_ppet, u8 *conf_eht_ppet,
+				    struct eht_override_hw_capab *cap_idx)
+{
+	if (cap_idx->eht_ppe_thresholds_nss)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP0_IDX],
+			conf_eht_ppet[EHT_PPE_CAP0_IDX], EHT_PPE_CAP0_NSS_M1);
+
+	if (cap_idx->eht_ppe_thresholds_ru_index_bitmask) {
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP0_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP0_IDX], EHT_PPE_CAP0_RU_INDEX_BITMASK);
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP1_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP1_IDX], EHT_PPE_CAP1_RU_INDEX_BITMASK);
+	}
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss1_for_ru0)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP1_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP1_IDX], EHT_PPE_CAP1_PPETX_FOR_NSS1_FOR_RU0);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss1_for_ru0)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP1_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP1_IDX], EHT_PPE_CAP1_PPET8_FOR_NSS1_FOR_RU0);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss1_for_ru1) {
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP1_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP1_IDX], EHT_PPE_CAP1_PPETX_FOR_NSS1_FOR_RU1);
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP2_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP2_IDX], EHT_PPE_CAP2_PPETX_FOR_NSS1_FOR_RU1);
+	}
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss1_for_ru1)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP2_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP2_IDX], EHT_PPE_CAP2_PPET8_FOR_NSS1_FOR_RU1);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss1_for_ru2)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP2_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP2_IDX], EHT_PPE_CAP2_PPETX_FOR_NSS1_FOR_RU2);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss1_for_ru2)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP3_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP3_IDX], EHT_PPE_CAP3_PPET8_FOR_NSS1_FOR_RU2);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss1_for_ru3)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP3_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP3_IDX], EHT_PPE_CAP3_PPETX_FOR_NSS1_FOR_RU3);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss1_for_ru3) {
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP3_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP3_IDX], EHT_PPE_CAP3_PPET8_FOR_NSS1_FOR_RU3);
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP4_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP4_IDX], EHT_PPE_CAP4_PPET8_FOR_NSS1_FOR_RU3);
+	}
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss1_for_ru4)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP4_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP4_IDX], EHT_PPE_CAP4_PPETX_FOR_NSS1_FOR_RU4);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss1_for_ru4)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP4_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP4_IDX], EHT_PPE_CAP4_PPET8_FOR_NSS1_FOR_RU4);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss2_for_ru0) {
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP4_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP4_IDX], EHT_PPE_CAP4_PPETX_FOR_NSS2_FOR_RU0);
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP5_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP5_IDX], EHT_PPE_CAP5_PPETX_FOR_NSS2_FOR_RU0);
+	}
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss2_for_ru0)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP5_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP5_IDX], EHT_PPE_CAP5_PPET8_FOR_NSS2_FOR_RU0);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss2_for_ru1)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP5_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP5_IDX], EHT_PPE_CAP5_PPETX_FOR_NSS2_FOR_RU1);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss2_for_ru1)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP6_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP6_IDX], EHT_PPE_CAP6_PPET8_FOR_NSS2_FOR_RU1);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss2_for_ru2)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP6_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP6_IDX], EHT_PPE_CAP6_PPETX_FOR_NSS2_FOR_RU2);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss2_for_ru2) {
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP6_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP6_IDX], EHT_PPE_CAP6_PPET8_FOR_NSS2_FOR_RU2);
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP7_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP7_IDX], EHT_PPE_CAP7_PPET8_FOR_NSS2_FOR_RU2);
+	}
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss2_for_ru3)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP7_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP7_IDX], EHT_PPE_CAP7_PPETX_FOR_NSS2_FOR_RU3);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss2_for_ru3)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP7_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP7_IDX], EHT_PPE_CAP7_PPET8_FOR_NSS2_FOR_RU3);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss2_for_ru4) {
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP7_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP7_IDX], EHT_PPE_CAP7_PPETX_FOR_NSS2_FOR_RU4);
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP8_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP8_IDX], EHT_PPE_CAP8_PPETX_FOR_NSS2_FOR_RU4);
+	}
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss2_for_ru4)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP8_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP8_IDX], EHT_PPE_CAP8_PPET8_FOR_NSS2_FOR_RU4);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss3_for_ru0)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP8_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP8_IDX], EHT_PPE_CAP8_PPETX_FOR_NSS3_FOR_RU0);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss3_for_ru0)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP9_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP9_IDX], EHT_PPE_CAP9_PPET8_FOR_NSS3_FOR_RU0);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss3_for_ru1)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP9_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP9_IDX], EHT_PPE_CAP9_PPETX_FOR_NSS3_FOR_RU1);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss3_for_ru1) {
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP9_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP9_IDX], EHT_PPE_CAP9_PPET8_FOR_NSS3_FOR_RU1);
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP10_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP10_IDX], EHT_PPE_CAP10_PPET8_FOR_NSS3_FOR_RU1);
+	}
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss3_for_ru2)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP10_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP10_IDX], EHT_PPE_CAP10_PPETX_FOR_NSS3_FOR_RU2);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss3_for_ru2)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP10_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP10_IDX], EHT_PPE_CAP10_PPET8_FOR_NSS3_FOR_RU2);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss3_for_ru3) {
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP10_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP10_IDX], EHT_PPE_CAP10_PPETX_FOR_NSS3_FOR_RU3);
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP11_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP11_IDX], EHT_PPE_CAP11_PPETX_FOR_NSS3_FOR_RU3);
+	}
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss3_for_ru3)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP11_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP11_IDX], EHT_PPE_CAP11_PPET8_FOR_NSS3_FOR_RU3);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss3_for_ru4)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP11_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP11_IDX], EHT_PPE_CAP11_PPETX_FOR_NSS3_FOR_RU4);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss3_for_ru4)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP12_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP12_IDX], EHT_PPE_CAP12_PPET8_FOR_NSS3_FOR_RU4);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss4_for_ru0)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP12_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP12_IDX], EHT_PPE_CAP12_PPETX_FOR_NSS4_FOR_RU0);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss4_for_ru0) {
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP12_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP12_IDX], EHT_PPE_CAP12_PPET8_FOR_NSS4_FOR_RU0);
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP13_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP13_IDX], EHT_PPE_CAP13_PPET8_FOR_NSS4_FOR_RU0);
+	}
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss4_for_ru1)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP13_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP13_IDX], EHT_PPE_CAP13_PPETX_FOR_NSS4_FOR_RU1);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss4_for_ru1)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP13_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP13_IDX], EHT_PPE_CAP13_PPET8_FOR_NSS4_FOR_RU1);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss4_for_ru2) {
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP13_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP13_IDX], EHT_PPE_CAP13_PPETX_FOR_NSS4_FOR_RU2);
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP14_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP14_IDX], EHT_PPE_CAP14_PPETX_FOR_NSS4_FOR_RU2);
+	}
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss4_for_ru2)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP14_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP14_IDX], EHT_PPE_CAP14_PPET8_FOR_NSS4_FOR_RU2);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss4_for_ru3)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP14_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP14_IDX], EHT_PPE_CAP14_PPETX_FOR_NSS4_FOR_RU3);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss4_for_ru3)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP15_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP15_IDX], EHT_PPE_CAP15_PPET8_FOR_NSS4_FOR_RU3);
+
+	if (cap_idx->eht_ppe_thresholds_ppetx_for_nss4_for_ru4)
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP15_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP15_IDX], EHT_PPE_CAP15_PPET8_FOR_NSS4_FOR_RU4);
+
+	if (cap_idx->eht_ppe_thresholds_ppet8_for_nss4_for_ru4) {
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP15_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP15_IDX], EHT_PPE_CAP15_PPET8_FOR_NSS4_FOR_RU4);
+		mxl_clr_set_he_cap(&debug_eht_ppet[EHT_PPE_CAP16_IDX],
+		    conf_eht_ppet[EHT_PPE_CAP16_IDX], EHT_PPE_CAP16_PPET8_FOR_NSS4_FOR_RU4);
+	}
+}
+
+static void
+mxl_hostapd_set_debug_mode_eht_cap(struct hostapd_data *hapd)
+{
+	struct eht_capabilities *hw = NULL;
+	struct ieee80211_eht_capabilities *conf = &hapd->iconf->mxl_conf.eht_capab_dbg;
+	struct eht_override_hw_capab *override_cap_idx = &hapd->iconf->mxl_conf.eht_override_hw_capab;
+	enum ieee80211_op_mode mode = IEEE80211_MODE_AP;
+
+	if (!hapd->iface->current_mode ||
+		!hapd->iface->current_mode->eht_capab[mode].eht_supported) {
+		wpa_printf(MSG_ERROR, "EHT is not supported");
+		return;
+	}
+
+	hw = &hapd->iface->current_mode->eht_capab[mode];
+
+	if (hapd->iconf->mxl_conf.enable_eht_debug_mode) {
+		mxl_hostapd_set_debug_eht_mac_capab_info((u8*)&hw->mac_cap, (u8*)&conf->mac_cap, override_cap_idx);
+		mxl_hostapd_set_debug_eht_phy_capab_info(hw->phy_cap, conf->phy_cap, override_cap_idx);
+		mxl_hostapd_set_debug_eht_txrx_mcs_support(hw->mcs, conf->optional, override_cap_idx);
+		mxl_hostapd_set_debug_eht_ppe_thresholds(hw->ppet, conf->optional + EHT_MCS_NSS_CAPAB_LEN, override_cap_idx);
+	}
+}
+
+static void mxl_hostapd_send_debug_mode_eht_cap (struct hostapd_data *hapd)
+{
+	errno_t err = EOK;
+	struct mxl_vendor_eht_capa debug_data = { 0 };
+	struct eht_capabilities *eht_capab = NULL;
+	enum ieee80211_op_mode mode = IEEE80211_MODE_AP;
+	size_t ppe_thr_size;
+
+	if (!hapd->iconf->mxl_conf.enable_eht_debug_mode)
+		return;
+
+
+	if (!hapd->iface->current_mode ||
+		!hapd->iface->current_mode->eht_capab[mode].eht_supported) {
+		wpa_printf(MSG_ERROR, "EHT is not supported");
+		return;
+	}
+
+	eht_capab = &hapd->iface->current_mode->eht_capab[mode];
+
+	err = memcpy_s(debug_data.eht_mac_capab_info, sizeof(debug_data.eht_mac_capab_info),
+		    &eht_capab->mac_cap, sizeof(eht_capab->mac_cap));
+	if (EOK != err) {
+		wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
+		return;
+	}
+
+	err = memcpy_s(debug_data.eht_phy_capab_info, sizeof(debug_data.eht_phy_capab_info),
+		    eht_capab->phy_cap, sizeof(eht_capab->phy_cap));
+	if (EOK != err) {
+		wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
+		return;
+	}
+
+	err = memcpy_s(debug_data.eht_txrx_mcs_support, sizeof(debug_data.eht_txrx_mcs_support),
+		    eht_capab->mcs, sizeof(eht_capab->mcs));
+	if (EOK != err) {
+		wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
+		return;
+	}
+
+	/* in opensource we have bigger buffer for EHT PPE thresholds */
+	ppe_thr_size = MIN((sizeof(debug_data.eht_ppe_thresholds)),(sizeof(eht_capab->ppet)));
+	err = memcpy_s(debug_data.eht_ppe_thresholds, ppe_thr_size,
+		    eht_capab->ppet, ppe_thr_size);
+	if (EOK != err) {
+		wpa_printf(MSG_ERROR, "%s: memcpy_s error %d", __func__, err);
+		return;
+	}
+
+	MXL_DRV_VENDOR_SET(MXL_NL80211_VENDOR_SUBCMD_SET_EHT_DEBUG_DATA, &debug_data, sizeof(debug_data));
+}
+
+#endif /* CONFIG_IEEE80211BE */
+
 
 int mxl_hostapd_setup_interface(struct hostapd_data *hapd)
 {
@@ -830,6 +1405,9 @@ int mxl_hostapd_setup_interface(struct hostapd_data *hapd)
 	/* He Debug mode */
 	mxl_hostapd_set_debug_mode_he_cap(hapd);
 #endif
+#ifdef CONFIG_IEEE80211BE
+	mxl_hostapd_set_debug_mode_eht_cap(hapd);
+#endif /* CONFIG_IEEE80211BE */
 
 	/* Add next vendor command here */
 	return 0;
@@ -871,7 +1449,9 @@ int mxl_hostapd_setup_bss_post(struct hostapd_data *hapd)
 	mxl_hostapd_send_debug_mode_he_cap(hapd);
 	mxl_hostapd_send_non_adv_he_cap(hapd);
 #endif /* CONFIG_IEEE80211AX */
-
+#ifdef CONFIG_IEEE80211BE
+	mxl_hostapd_send_debug_mode_eht_cap(hapd);
+#endif /* CONFIG_IEEE80211BE */
 	return 0;
 }
 
diff --git a/src/common/mxl_ieee802_11_defs.h b/src/common/mxl_ieee802_11_defs.h
index e4e88a208..8144f2cf3 100644
--- a/src/common/mxl_ieee802_11_defs.h
+++ b/src/common/mxl_ieee802_11_defs.h
@@ -265,5 +265,212 @@ struct dmg_link_adaptation_ack {
 #define HE_PPE_CAP12_PPET16_FOR_NSS4_FOR_RU3 ((u8) (BIT(1) | BIT(2) | BIT(3)))
 #define HE_PPE_CAP12_PPET8_FOR_NSS4_FOR_RU3 ((u8) (BIT(4) | BIT(5) | BIT(6)))
 
+#define EHT_MCS_NSS_FOR_1SS  ((u8) (BIT(0) | BIT(1)))
+#define EHT_MCS_NSS_FOR_2SS  ((u8) (BIT(2) | BIT(3)))
+#define EHT_MCS_NSS_FOR_3SS  ((u8) (BIT(4) | BIT(5)))
+#define EHT_MCS_NSS_FOR_4SS  ((u8) (BIT(6) | BIT(7)))
+#define EHT_MCS_NSS_FOR_5SS  ((u8) (BIT(0) | BIT(1)))
+#define EHT_MCS_NSS_FOR_6SS  ((u8) (BIT(2) | BIT(3)))
+#define EHT_MCS_NSS_FOR_7SS  ((u8) (BIT(4) | BIT(5)))
+#define EHT_MCS_NSS_FOR_8SS  ((u8) (BIT(6) | BIT(7)))
+#define EHT_MCS_NSS_FOR_9SS  ((u8) (BIT(0) | BIT(1)))
+#define EHT_MCS_NSS_FOR_10SS ((u8) (BIT(2) | BIT(3)))
+#define EHT_MCS_NSS_FOR_11SS ((u8) (BIT(4) | BIT(5)))
+#define EHT_MCS_NSS_FOR_12SS ((u8) (BIT(6) | BIT(7)))
+#define EHT_MCS_NSS_FOR_13SS ((u8) (BIT(0) | BIT(1)))
+#define EHT_MCS_NSS_FOR_14SS ((u8) (BIT(2) | BIT(3)))
+#define EHT_MCS_NSS_FOR_15SS ((u8) (BIT(4) | BIT(5)))
+#define EHT_MCS_NSS_FOR_16SS ((u8) (BIT(6) | BIT(7)))
+
+/* IEEE 802.11BE DRAFT VER 2.0
+ * EHT MAC Capabilities Information field defines
+ */
+
+#define EHT_MACCAP_CAP0_IDX 0
+#define EHT_MAC_CAP0_EPCS_PRIO_ACCESS        ((u8) BIT(0))
+#define EHT_MAC_CAP0_OM_CONTROL              ((u8) BIT(1))
+#define EHT_MAC_CAP0_TRIG_TXOP_SHARING_MODE1 ((u8) BIT(2))
+#define EHT_MAC_CAP0_TRIG_TXOP_SHARING_MODE2 ((u8) BIT(3))
+#define EHT_MAC_CAP0_RESTRICTED_TWT          ((u8) BIT(4))
+#define EHT_MAC_CAP0_SCS_TRAFFIC_DESC        ((u8) BIT(5))
+#define EHT_MAC_CAP0_MAX_MPDU_LEN            ((u8) BIT(6) | BIT(7))
+
+#define EHT_MACCAP_CAP1_IDX 1
+#define EHT_MAC_CAP1_MAX_AMPDU_LEN_EXP_EXT              ((u8) BIT(0))
+#define EHT_MAC_CAP1_TRS_SUPPORT                        ((u8) BIT(1))
+#define EHT_MAC_CAP1_TXOP_RETURN_SUPPORT_SHARING_MODE2  ((u8) BIT(2))
+/* B11-B15 are reserved */
+
+/* IEEE 802.11BE DRAFT VER 2.0
+ * EHT PHY Capabilities Information field defines
+ */
+#define EHT_PHYCAP_CAP0_IDX 0
+/* B0 is reserved */
+#define EHT_PHY_CAP0_320MHZ_IN_6GHZ                         ((u8) BIT(1))
+#define EHT_PHY_CAP0_242RU_BW_ABOVE_20MHZ                   ((u8) BIT(2))
+#define EHT_PHY_CAP0_NDP_4X_LTF_3_2_GI                      ((u8) BIT(3))
+#define EHT_PHY_CAP0_PARTIAL_BW_UL_MU_MIMO                  ((u8) BIT(4))
+#define EHT_PHY_CAP0_SU_BEAMFORMER                          ((u8) BIT(5))
+#define EHT_PHY_CAP0_SU_BEAMFORMEE                          ((u8) BIT(6))
+#define EHT_PHY_CAP0_SU_BEAMFORMEE_SS_LESS_OR_EQUAL_80      ((u8) BIT(7))
+/* Beamformee SS (<= 80MHz) B7 - B9 */
+
+#define EHT_PHYCAP_CAP1_IDX 1
+#define EHT_PHY_CAP1_SU_BEAMFORMEE_SS_LESS_OR_EQUAL_80      ((u8) (BIT(0) | BIT(1)))
+#define EHT_PHY_CAP1_SU_BEAMFORMEE_SS_EQUAL_160             ((u8) (BIT(2) | BIT(3) | BIT(4)))
+#define EHT_PHY_CAP1_SU_BEAMFORMEE_SS_EQUAL_320             ((u8) (BIT(5) | BIT(6) | BIT(7)))
+
+#define EHT_PHYCAP_CAP2_IDX 2
+#define EHT_PHY_CAP2_NUM_SOUNDING_DIM_80_OR_LESS            ((u8) (BIT(0) | BIT(1) | BIT(2)))
+#define EHT_PHY_CAP2_NUM_SOUNDING_DIM_EQUAL_160             ((u8) (BIT(3) | BIT(4) | BIT(5)))
+#define EHT_PHY_CAP2_NUM_SOUNDING_DIM_EQUAL_320             ((u8) (BIT(6) | BIT(7)))
+
+#define EHT_PHYCAP_CAP3_IDX 3
+#define EHT_PHY_CAP3_NUM_SOUNDING_DIM_EQUAL_320             ((u8) BIT(0))
+#define EHT_PHY_CAP3_NG_16_SU_FEEDBACK                      ((u8) BIT(1))
+#define EHT_PHY_CAP3_NG_16_MU_FEEDBACK                      ((u8) BIT(2))
+#define EHT_PHY_CAP3_CODEBOOK_SIZE_4_2_SU_FB                ((u8) BIT(3))
+#define EHT_PHY_CAP3_CODEBOOK_SIZE_75_5_MU_FB               ((u8) BIT(4))
+#define EHT_PHY_CAP3_TRIG_SU_BF_FB                          ((u8) BIT(5))
+#define EHT_PHY_CAP3_TRIG_MU_BF_PARTIAL_BW_FB               ((u8) BIT(6))
+#define EHT_PHY_CAP3_TRIG_CQI_FB                            ((u8) BIT(7))
+
+#define EHT_PHYCAP_CAP4_IDX 4
+#define EHT_PHY_CAP4_PARTIAL_BW_DL_MU_MIMO                  ((u8) BIT(0))
+#define EHT_PHY_CAP4_PSR_BASED_SR_SUPPORT                   ((u8) BIT(1))
+#define EHT_PHY_CAP4_POWER_BOOST_FACTOR_SUPPORT             ((u8) BIT(2))
+#define EHT_PHY_CAP4_MU_PPDU_4X_LTF_0_8_US_GI               ((u8) BIT(3))
+#define EHT_PHY_CAP4_MAX_NC                                 ((u8) (BIT(4) | BIT(5) | BIT(6) | BIT(7)))
+
+#define EHT_PHYCAP_CAP5_IDX 5
+#define EHT_PHY_CAP5_NON_TRIG_CQI_FB                        ((u8) BIT(0))
+#define EHT_PHY_CAP5_TX_1024_QAM_4096_QAM_LESS_242_RU       ((u8) BIT(1))
+#define EHT_PHY_CAP5_RX_1024_QAM_4096_QAM_LESS_242_RU       ((u8) BIT(2))
+#define EHT_PHY_CAP5_PPE_THRESHOLDS_PRESENT                 ((u8) BIT(3))
+#define EHT_PHY_CAP5_COMMON_NOMINAL_PKT_PAD                 ((u8) (BIT(4) | BIT(5)))
+#define EHT_PHY_CAP5_MAX_NUM_SUPPORTED_EHT_LTFS             ((u8) (BIT(6) | BIT(7)))
+
+#define EHT_PHYCAP_CAP6_IDX 6
+#define EHT_PHY_CAP6_MAX_NUM_SUPPORTED_EHT_LTFS             ((u8) (BIT(0) | BIT(1) | BIT(2)))
+#define EHT_PHY_CAP6_SUPPORT_OF_MCS_15                      ((u8) (BIT(3) | BIT(4) | BIT(5) | BIT(6)))
+#define EHT_PHY_CAP6_SUPPORT_OF_EHT_DUP_6G                  ((u8) BIT(7))
+
+#define EHT_PHYCAP_CAP7_IDX 7
+#define EHT_PHY_CAP7_20MHZ_OPER_STA_RX_NDP_WIDER_BW         ((u8) BIT(0))
+#define EHT_PHY_CAP7_NONOFDMA_UL_MUMIMO_BW_LESS_OR_EQUAL_80 ((u8) BIT(1))
+#define EHT_PHY_CAP7_NONOFDMA_UL_MUMIMO_BW_EQUAL_160        ((u8) BIT(2))
+#define EHT_PHY_CAP7_NONOFDMA_UL_MUMIMO_BW_EQUAL_320        ((u8) BIT(3))
+#define EHT_PHY_CAP7_MU_BF_BW_LESS_OR_EQUAL_80              ((u8) BIT(4))
+#define EHT_PHY_CAP7_MU_BF_BW_EQUAL_160                     ((u8) BIT(5))
+#define EHT_PHY_CAP7_MU_BF_BW_EQUAL_320                     ((u8) BIT(6))
+#define EHT_PHY_CAP7_TB_SOUNDING_FEEDBACK_RATE_LIMIT        ((u8) BIT(7))
+
+#define EHT_PHYCAP_CAP8_IDX 8
+#define EHT_PHY_CAP8_RX_1024_QAM_WIDER_BW_DL_OFDMA          ((u8) BIT(0))
+#define EHT_PHY_CAP8_RX_4096_QAM_WIDER_BW_DL_OFDMA          ((u8) BIT(1))
+/* B66..B71 - Reserved */
+
+/* EHT PPE Thresholds field */
+#define EHT_PPE_CAP0_IDX 0
+#define EHT_PPE_CAP0_NSS_M1 ((u8) (BIT(0) | BIT(1) | BIT(2) | BIT(3)))
+#define EHT_PPE_CAP0_RU_INDEX_BITMASK ((u8) (BIT(4) | BIT(5) | BIT(6) | BIT(7)))
+
+#define EHT_PPE_CAP1_IDX 1
+#define EHT_PPE_CAP1_RU_INDEX_BITMASK ((u8) (BIT(0)))
+#define EHT_PPE_CAP1_PPETX_FOR_NSS1_FOR_RU0 ((u8) (BIT(1) | BIT(2) | BIT(3)))
+#define EHT_PPE_CAP1_PPET8_FOR_NSS1_FOR_RU0 ((u8) (BIT(4) | BIT(5) | BIT(6)))
+#define EHT_PPE_CAP1_PPETX_FOR_NSS1_FOR_RU1 ((u8) (BIT(7)))
+
+#define EHT_PPE_CAP2_IDX 2
+#define EHT_PPE_CAP2_PPETX_FOR_NSS1_FOR_RU1 ((u8) (BIT(0) | BIT(1)))
+#define EHT_PPE_CAP2_PPET8_FOR_NSS1_FOR_RU1 ((u8) (BIT(2) | BIT(3) | BIT(4)))
+#define EHT_PPE_CAP2_PPETX_FOR_NSS1_FOR_RU2 ((u8) (BIT(5) | BIT(6) | BIT(7)))
+
+#define EHT_PPE_CAP3_IDX 3
+#define EHT_PPE_CAP3_PPET8_FOR_NSS1_FOR_RU2 ((u8) (BIT(0) | BIT(1) | BIT(2)))
+#define EHT_PPE_CAP3_PPETX_FOR_NSS1_FOR_RU3 ((u8) (BIT(3) | BIT(4) | BIT(5)))
+#define EHT_PPE_CAP3_PPET8_FOR_NSS1_FOR_RU3 ((u8) (BIT(6) | BIT(7)))
+
+#define EHT_PPE_CAP4_IDX 4
+#define EHT_PPE_CAP4_PPET8_FOR_NSS1_FOR_RU3 ((u8) (BIT(0)))
+#define EHT_PPE_CAP4_PPETX_FOR_NSS1_FOR_RU4 ((u8) (BIT(1) | BIT(2) | BIT(3)))
+#define EHT_PPE_CAP4_PPET8_FOR_NSS1_FOR_RU4 ((u8) (BIT(4) | BIT(5) | BIT(6)))
+#define EHT_PPE_CAP4_PPETX_FOR_NSS2_FOR_RU0 ((u8) (BIT(7)))
+
+#define EHT_PPE_CAP5_IDX 5
+#define EHT_PPE_CAP5_PPETX_FOR_NSS2_FOR_RU0 ((u8) (BIT(0) | BIT(1)))
+#define EHT_PPE_CAP5_PPET8_FOR_NSS2_FOR_RU0 ((u8) (BIT(2) | BIT(3) | BIT(4)))
+#define EHT_PPE_CAP5_PPETX_FOR_NSS2_FOR_RU1 ((u8) (BIT(5) | BIT(6) | BIT(7)))
+
+#define EHT_PPE_CAP6_IDX 6
+#define EHT_PPE_CAP6_PPET8_FOR_NSS2_FOR_RU1 ((u8) (BIT(0) | BIT(1) | BIT(2)))
+#define EHT_PPE_CAP6_PPETX_FOR_NSS2_FOR_RU2 ((u8) (BIT(3) | BIT(4) | BIT(5)))
+#define EHT_PPE_CAP6_PPET8_FOR_NSS2_FOR_RU2 ((u8) (BIT(6) | BIT(7)))
+
+#define EHT_PPE_CAP7_IDX 7
+#define EHT_PPE_CAP7_PPET8_FOR_NSS2_FOR_RU2 ((u8) (BIT(0)))
+#define EHT_PPE_CAP7_PPETX_FOR_NSS2_FOR_RU3 ((u8) (BIT(1) | BIT(2) | BIT(3)))
+#define EHT_PPE_CAP7_PPET8_FOR_NSS2_FOR_RU3 ((u8) (BIT(4) | BIT(5) | BIT(6)))
+#define EHT_PPE_CAP7_PPETX_FOR_NSS2_FOR_RU4 ((u8) (BIT(7)))
+
+#define EHT_PPE_CAP8_IDX 8
+#define EHT_PPE_CAP8_PPETX_FOR_NSS2_FOR_RU4 ((u8) (BIT(0) | BIT(1)))
+#define EHT_PPE_CAP8_PPET8_FOR_NSS2_FOR_RU4 ((u8) (BIT(2) | BIT(3) | BIT(4)))
+#define EHT_PPE_CAP8_PPETX_FOR_NSS3_FOR_RU0 ((u8) (BIT(5) | BIT(6) | BIT(7)))
+
+#define EHT_PPE_CAP9_IDX 9
+#define EHT_PPE_CAP9_PPET8_FOR_NSS3_FOR_RU0 ((u8) (BIT(0) | BIT(1) | BIT(2)))
+#define EHT_PPE_CAP9_PPETX_FOR_NSS3_FOR_RU1 ((u8) (BIT(3) | BIT(4) | BIT(5)))
+#define EHT_PPE_CAP9_PPET8_FOR_NSS3_FOR_RU1 ((u8) (BIT(6) | BIT(7)))
+
+#define EHT_PPE_CAP10_IDX 10
+#define EHT_PPE_CAP10_PPET8_FOR_NSS3_FOR_RU1 ((u8) (BIT(0)))
+#define EHT_PPE_CAP10_PPETX_FOR_NSS3_FOR_RU2 ((u8) (BIT(1) | BIT(2) | BIT(3)))
+#define EHT_PPE_CAP10_PPET8_FOR_NSS3_FOR_RU2 ((u8) (BIT(4) | BIT(5) | BIT(6)))
+#define EHT_PPE_CAP10_PPETX_FOR_NSS3_FOR_RU3 ((u8) (BIT(7)))
+
+#define EHT_PPE_CAP11_IDX 11
+#define EHT_PPE_CAP11_PPETX_FOR_NSS3_FOR_RU3 ((u8) (BIT(0) | BIT(1)))
+#define EHT_PPE_CAP11_PPET8_FOR_NSS3_FOR_RU3 ((u8) (BIT(2) | BIT(3) | BIT(4)))
+#define EHT_PPE_CAP11_PPETX_FOR_NSS3_FOR_RU4 ((u8) (BIT(5) | BIT(6) | BIT(7)))
+
+#define EHT_PPE_CAP12_IDX 12
+#define EHT_PPE_CAP12_PPET8_FOR_NSS3_FOR_RU4 ((u8) (BIT(0) | BIT(1) | BIT(2)))
+#define EHT_PPE_CAP12_PPETX_FOR_NSS4_FOR_RU0 ((u8) (BIT(3) | BIT(4) | BIT(5)))
+#define EHT_PPE_CAP12_PPET8_FOR_NSS4_FOR_RU0 ((u8) (BIT(6) | BIT(7)))
+
+#define EHT_PPE_CAP13_IDX 13
+#define EHT_PPE_CAP13_PPET8_FOR_NSS4_FOR_RU0 ((u8) (BIT(0)))
+#define EHT_PPE_CAP13_PPETX_FOR_NSS4_FOR_RU1 ((u8) (BIT(1) | BIT(2) | BIT(3)))
+#define EHT_PPE_CAP13_PPET8_FOR_NSS4_FOR_RU1 ((u8) (BIT(4) | BIT(5) | BIT(6)))
+#define EHT_PPE_CAP13_PPETX_FOR_NSS4_FOR_RU2 ((u8) (BIT(7)))
+
+#define EHT_PPE_CAP14_IDX 14
+#define EHT_PPE_CAP14_PPETX_FOR_NSS4_FOR_RU2 ((u8) (BIT(0) | BIT(1)))
+#define EHT_PPE_CAP14_PPET8_FOR_NSS4_FOR_RU2 ((u8) (BIT(2) | BIT(3) | BIT(4)))
+#define EHT_PPE_CAP14_PPETX_FOR_NSS4_FOR_RU3 ((u8) (BIT(5) | BIT(6) | BIT(7)))
+
+#define EHT_PPE_CAP15_IDX 15
+#define EHT_PPE_CAP15_PPET8_FOR_NSS4_FOR_RU3 ((u8) (BIT(0) | BIT(1) | BIT(2)))
+#define EHT_PPE_CAP15_PPETX_FOR_NSS4_FOR_RU4 ((u8) (BIT(3) | BIT(4) | BIT(5)))
+#define EHT_PPE_CAP15_PPET8_FOR_NSS4_FOR_RU4 ((u8) (BIT(6) | BIT(7)))
+
+#define EHT_PPE_CAP16_IDX 16
+#define EHT_PPE_CAP16_PPET8_FOR_NSS4_FOR_RU4 ((u8) (BIT(0)))
+
+/* EHT MCS NSS array index */
+#define EHT_MCS_LT_EQ_80_0_9    0
+#define EHT_MCS_LT_EQ_80_10_11  1
+#define EHT_MCS_LT_EQ_80_12_13  2
+#define EHT_MCS_160_0_9         3
+#define EHT_MCS_160_10_11       4
+#define EHT_MCS_160_12_13       5
+#define EHT_MCS_320_0_9         6
+#define EHT_MCS_320_10_11       7
+#define EHT_MCS_320_12_13       8
+
+#define EHT_MCS_RX_MASK         0x0f
+#define EHT_MCS_TX_MASK         0xf0
+
 #endif /* MXL_IEEE802_11_DEFS_H */
 
diff --git a/src/common/vendor_cmds_copy.h b/src/common/vendor_cmds_copy.h
index 2dfab97c5..fa68b2a22 100644
--- a/src/common/vendor_cmds_copy.h
+++ b/src/common/vendor_cmds_copy.h
@@ -642,6 +642,16 @@ struct intel_vendor_he_capa {
   u8 he_ppe_thresholds[25];
 } __attribute__ ((packed));
 
+/* Data for MXL_NL80211_VENDOR_SUBCMD_SET_EHT_DEBUG_DATA,
+ *          MXL_NL80211_VENDOR_SUBCMD_SET_EHT_NON_ADVERTISED and
+ *          MXL_NL80211_VENDOR_SUBCMD_GET_EHT_NON_ADVERTISED vendor commands */
+struct mxl_vendor_eht_capa {
+  u8 eht_mac_capab_info[2];
+  u8 eht_phy_capab_info[9];
+  u8 eht_txrx_mcs_support[9];
+  u8 eht_ppe_thresholds[32];
+} __attribute__ ((packed));
+
 /*******************************************************************************
 *                           Event structures                                   *
 *******************************************************************************/
-- 
2.43.0

