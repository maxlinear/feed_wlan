From 09159d766744b0101a88742741587411d0092eca Mon Sep 17 00:00:00 2001
From: Jurijs Soloveckis <jsoloveckis@maxlinear.com>
Date: Mon, 21 Aug 2023 08:56:51 +0200
Subject: [PATCH] WLANRTSYS-57988: Implement MU EDCA IE vendor extensions

---
 hostapd/config_file.c  |  6 ++++--
 hostapd/ctrl_iface.c   | 17 +++++++++++++++++
 hostapd/hostapd_cli.c  |  8 ++++++++
 src/ap/ap_config.c     | 32 ++++++++++++++++++++++++++++++++
 src/ap/ap_config.h     |  1 +
 src/ap/ieee802_11_he.c |  3 +++
 src/utils/common.h     |  1 +
 7 files changed, 66 insertions(+), 2 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 026878abd..54da6b4d0 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -1416,7 +1416,7 @@ static u8 find_bit_offset(u8 val)
 }
 
 
-static u8 set_he_cap(int val, u8 mask)
+u8 set_he_cap(int val, u8 mask)
 {
 	return (u8) (mask & (val << find_bit_offset(mask)));
 }
@@ -4313,7 +4313,9 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		conf->he_oper_vht_oper_info = atoi(pos);
 	} else if (os_strcmp(buf, "he_basic_mcs_nss_set") == 0) {
 		conf->he_op.he_basic_mcs_nss_set = atoi(pos);
-	} else if (os_strcmp(buf, "he_mu_edca_qos_info_param_count") == 0) {
+	} else if (os_strcmp(buf, "he_mu_edca_ie_present") == 0) {
+		conf->he_mu_edca_ie_present = atoi(pos);
+	} else if (os_strcmp(buf, "he_mu_edca_qos_info_param_count") == 0 || os_strcmp(buf, "he_mu_edca_qos_info_parameter_set_update_count") == 0) {
 		conf->he_mu_edca.he_qos_info |=
 			set_he_cap(atoi(pos), HE_QOS_INFO_EDCA_PARAM_SET_COUNT);
 	} else if (os_strcmp(buf, "he_mu_edca_qos_info_q_ack") == 0) {
diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index f4bdee2c0..f2aec2b55 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -3400,6 +3400,20 @@ out :
 	wpa_printf(MSG_ERROR, "[%s] Too long data", __func__);
 	return -1;
 }
+
+static int hostapd_ctrl_iface_update_edca_counter(struct hostapd_iface *iface)
+{
+	int count = get_he_cap(iface->conf->he_mu_edca.he_qos_info, HE_QOS_INFO_EDCA_PARAM_SET_COUNT);
+	count++;
+	clr_set_he_cap(&iface->conf->he_mu_edca.he_qos_info,
+				   count, HE_QOS_INFO_EDCA_PARAM_SET_COUNT);
+	if (ieee802_11_update_beacons(iface) < 0) {
+		wpa_printf(MSG_ERROR, "Beacon update failed on MU EDCA Parameter Set Count increment");
+		return -1;
+	}
+	return 0;
+}
+
 #endif /* CONFIG_IEEE80211AX */
 
 static u8 hostapd_maxnss(struct hostapd_data *hapd, struct sta_info *sta)
@@ -6657,6 +6671,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 		reply_len = hostapd_ctrl_iface_get_he_spatial_reuse_parameter(hapd, reply, reply_size);
 	} else if (os_strncmp(buf, "SET_HE_SR_PARAM", 15) == 0) {
 		reply_len = hostapd_ctrl_iface_set_he_spatial_reuse_parameter(hapd->iface, buf + 15);
+	} else if (os_strncmp(buf, "UPDATE_EDCA_CNTR", 16) == 0) {
+		if (hostapd_ctrl_iface_update_edca_counter(hapd->iface))
+			reply_len = -1;
 #endif /* CONFIG_IEEE80211AX */
 	} else if (os_strncmp(buf, "GET_STA_WPA_PSK ", 16) == 0) {
 		reply_len = hostapd_ctrl_iface_get_sta_wpa_psk(hapd, buf + 16, reply, reply_size);
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 987a9f874..24aefc04b 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -2052,6 +2052,12 @@ static int hostapd_cli_cmd_get_hidden_mode(struct wpa_ctrl *ctrl, int argc, char
 }
 
 #ifdef CONFIG_IEEE80211AX
+static int hostapd_cli_cmd_update_mu_edca_counter(struct wpa_ctrl *ctrl, int argc,
+					char *argv[])
+{
+	return wpa_ctrl_command(ctrl, "UPDATE_EDCA_CNTR");
+}
+
 static int hostapd_cli_cmd_color_switch(struct wpa_ctrl *ctrl, int argc,
 					char *argv[])
 {
@@ -2596,6 +2602,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	  "<vap_ifname> = clean grylist for radio assosiated with ifname" },
 #endif /* CONFIG_RADIUS_GREYLIST */
 #ifdef CONFIG_IEEE80211AX
+	{ "increment_mu_edca_counter_and_reload", hostapd_cli_cmd_update_mu_edca_counter, NULL,
+	  "= reload configuration and increment EDCA parameter Set Update Counter field" },
 	{ "color_switch", hostapd_cli_cmd_color_switch, NULL,
 	  " <bss_color> [switch_time] = initate color switch" },
 	{ "get_color_table", hostapd_cli_cmd_get_color_table, NULL,
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 9ecbe553b..380fd3c62 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -364,6 +364,38 @@ struct hostapd_config * hostapd_config_defaults(void)
 	/* TODO-COLOR: To make default value as true after FW CCA changes integrated */
 	conf->autonomous_color_change = true;
 	conf->color_coll_notify_interval = COLOR_COLL_NOTIFY_INTERVAL_DEFAULT;
+	conf->he_mu_edca_ie_present = 1;
+	conf->he_mu_edca.he_qos_info |= HE_QOS_INFO_QUEUE_REQUEST;
+	conf->he_mu_edca.he_mu_ac_be_param[HE_MU_AC_PARAM_ECW_IDX] |=
+		set_he_cap(15, HE_MU_AC_PARAM_ECWMIN);
+	conf->he_mu_edca.he_mu_ac_be_param[HE_MU_AC_PARAM_ECW_IDX] |=
+		set_he_cap(15, HE_MU_AC_PARAM_ECWMAX);
+	conf->he_mu_edca.he_mu_ac_be_param[HE_MU_AC_PARAM_TIMER_IDX] =
+		5 & 0xff;
+	conf->he_mu_edca.he_mu_ac_bk_param[HE_MU_AC_PARAM_ACI_IDX] |=
+		set_he_cap(1, HE_MU_AC_PARAM_ACI);
+	conf->he_mu_edca.he_mu_ac_bk_param[HE_MU_AC_PARAM_ECW_IDX] |=
+		set_he_cap(15, HE_MU_AC_PARAM_ECWMIN);
+	conf->he_mu_edca.he_mu_ac_bk_param[HE_MU_AC_PARAM_ECW_IDX] |=
+		set_he_cap(15, HE_MU_AC_PARAM_ECWMAX);
+	conf->he_mu_edca.he_mu_ac_bk_param[HE_MU_AC_PARAM_TIMER_IDX] =
+		5 & 0xff;
+	conf->he_mu_edca.he_mu_ac_vi_param[HE_MU_AC_PARAM_ECW_IDX] |=
+		set_he_cap(15, HE_MU_AC_PARAM_ECWMIN);
+	conf->he_mu_edca.he_mu_ac_vi_param[HE_MU_AC_PARAM_ECW_IDX] |=
+		set_he_cap(15, HE_MU_AC_PARAM_ECWMAX);
+	conf->he_mu_edca.he_mu_ac_vi_param[HE_MU_AC_PARAM_ACI_IDX] |=
+		set_he_cap(2, HE_MU_AC_PARAM_ACI);
+	conf->he_mu_edca.he_mu_ac_vi_param[HE_MU_AC_PARAM_TIMER_IDX] =
+		5 & 0xff;
+	conf->he_mu_edca.he_mu_ac_vo_param[HE_MU_AC_PARAM_ACI_IDX] |=
+		set_he_cap(3, HE_MU_AC_PARAM_ACI);
+	conf->he_mu_edca.he_mu_ac_vo_param[HE_MU_AC_PARAM_ECW_IDX] |=
+		set_he_cap(15, HE_MU_AC_PARAM_ECWMIN);
+	conf->he_mu_edca.he_mu_ac_vo_param[HE_MU_AC_PARAM_ECW_IDX] |=
+		set_he_cap(15, HE_MU_AC_PARAM_ECWMAX);
+	conf->he_mu_edca.he_mu_ac_vo_param[HE_MU_AC_PARAM_TIMER_IDX] =
+		5 & 0xff;
 	conf->he_spatial_reuse_ie_present_in_beacon = 1;
 	conf->he_spatial_reuse_ie_present_in_probe_response = 1;
 	conf->he_spatial_reuse_ie_present_in_assoc_response = 1;
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 7a95bbd15..791ddb7a6 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1393,6 +1393,7 @@ struct hostapd_config {
 	u32 used_color_table_ageing; /* in mins */
 	bool autonomous_color_change;
 	u32 color_coll_notify_interval;
+	u8 he_mu_edca_ie_present;
 	u8 he_spatial_reuse_ie_present_in_beacon;
 	u8 he_spatial_reuse_ie_present_in_assoc_response;
 	u8 he_spatial_reuse_ie_present_in_probe_response;
diff --git a/src/ap/ieee802_11_he.c b/src/ap/ieee802_11_he.c
index a1770e284..f7f66e6ed 100644
--- a/src/ap/ieee802_11_he.c
+++ b/src/ap/ieee802_11_he.c
@@ -322,6 +322,9 @@ u8 * hostapd_eid_he_mu_edca_parameter_set(struct hostapd_data *hapd, u8 *eid)
 	u8 *pos;
 	size_t i;
 
+	if (hapd->iconf->he_mu_edca_ie_present == 0)
+		return eid;
+
 	pos = (u8 *) &hapd->iface->conf->he_mu_edca;
 	for (i = 0; i < sizeof(*edca); i++) {
 		if (pos[i])
diff --git a/src/utils/common.h b/src/utils/common.h
index be263a500..f93b019ee 100644
--- a/src/utils/common.h
+++ b/src/utils/common.h
@@ -592,6 +592,7 @@ void forced_memzero(void *ptr, size_t len);
 #ifdef CONFIG_IEEE80211AX
 u8 get_he_cap(int val, u8 mask);
 void clr_set_he_cap(u8 *field, int val, u8 mask);
+u8 set_he_cap(int val, u8 mask);
 #endif /* CONFIG_IEEE80211AX */
 
 /*
-- 
2.43.0

