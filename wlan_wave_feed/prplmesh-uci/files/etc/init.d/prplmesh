#!/bin/sh /etc/rc.common
###############################################################
# SPDX-License-Identifier: BSD-2-Clause-Patent
#
#  Copyright 2020 MaxLinear, Inc.
#  Copyright 2016 - 2020 Intel Corporation
#  Copyright 2015 - 2016 Lantiq Beteiligungs-GmbH
#  Copyright 2009 - 2014 Lantiq Deutschland GmbH
#  Copyright 2007 - 2008 Infineon Technologies AG
#
# This code is subject to the terms of the BSD+Patent license.
# See LICENSE file for more details.
###############################################################
. /lib/functions/system.sh

USE_PROCD=1

START=99
STOP=01

####################
# main
####################

start_service() {
        local prplenable
        config_load prplmesh
        config_get prplenable config enable 0
        config_get prplmaster config master 0

        if [ "$prplenable" = "0" ]; then
                echo "prplmesh Disabled (prplmesh.config.enable=0), skipping..."
                exit 0
        fi

        # This is required for solveing issue which causing meesges not geeting to their destination.
        # For more information see: https://github.com/prplfoundation/prplMesh/pull/1029#issuecomment-608353274
        ebtables -A FORWARD -d 01:80:c2:00:00:13 -j DROP
        
        echo "Starting prplmesh"
        
        echo "Start ieee1905_transport process"
        procd_open_instance "transport"
        procd_set_param respawn
        procd_set_param user nwk
        procd_set_param capabilities /usr/share/capabilities/sscript_prplmesh_cap.json
        procd_set_param command /opt/prplmesh/bin/ieee1905_transport
        procd_set_param env LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/prplmesh/lib
        procd_set_param stdout 1
        procd_set_param stderr 1
        [ -e /proc/sys/kernel/core_pattern ] && {
                procd_set_param limits core="unlimited"
        }
        procd_close_instance

        if [ "$prplmaster" = "1" ]; then
                echo "Start beerocks_controller process"
                procd_open_instance "controller"
                procd_set_param respawn
                procd_set_param user nwk
                procd_set_param capabilities /usr/share/capabilities/sscript_prplmesh_cap.json
                procd_set_param command /opt/prplmesh/bin/beerocks_controller
                procd_set_param env LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/prplmesh/lib
                procd_set_param stdout 1
                procd_set_param stderr 1
                [ -e /proc/sys/kernel/core_pattern ] && {
                        procd_set_param limits core="unlimited"
                }
                procd_close_instance
        fi

        echo "Start beerocks_agent process"
        procd_open_instance "agent"
        procd_set_param respawn
        procd_set_param user nwk
        procd_set_param capabilities /usr/share/capabilities/sscript_prplmesh_cap.json
        procd_set_param command /opt/prplmesh/bin/beerocks_agent
        procd_set_param env LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/prplmesh/lib
        procd_set_param stdout 1
        procd_set_param stderr 1
        [ -e /proc/sys/kernel/core_pattern ] && {
                procd_set_param limits core="unlimited"
        }
        procd_close_instance
}

restart() {
        stop
        sleep 5
        start
}

service_triggers() {
        procd_add_reload_trigger prplmesh
}

reload_service() {
        restart
}

enable_service() {
        echo "Enable prplmesh (reboot required)"
        ubus call uci set '{ "config" : "prplmesh" ,"section" : "config",
            "values" : {"enable" : "1"
        }}'
        ubus call uci commit '{"config" : "prplmesh"}'
}

disable_service() {
        echo "Disable prplmesh (reboot required)"
        ubus call uci set '{ "config" : "prplmesh" ,"section" : "config",
            "values" : {"enable" : "0"
        }}'
        ubus call uci commit '{"config" : "prplmesh"}'
}
